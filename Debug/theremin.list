
theremin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000838c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  08008518  08008518  00018518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008f88  08008f88  00018f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008f8c  08008f8c  00018f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a8  20000000  08008f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00013e40  200000a8  08009038  000200a8  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20013ee8  08009038  00023ee8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  9 .debug_info   000149dc  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002828  00000000  00000000  00034ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010f8  00000000  00000000  000372e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000fb0  00000000  00000000  000383d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007fc5  00000000  00000000  00039388  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005e0d  00000000  00000000  0004134d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      000000ec  00000000  00000000  0004715a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004a3c  00000000  00000000  00047248  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000000d8  00000000  00000000  0004bc84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a8 	.word	0x200000a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080084fc 	.word	0x080084fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ac 	.word	0x200000ac
 80001c4:	080084fc 	.word	0x080084fc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_d2iz>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d215      	bcs.n	8000ace <__aeabi_d2iz+0x36>
 8000aa2:	d511      	bpl.n	8000ac8 <__aeabi_d2iz+0x30>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d912      	bls.n	8000ad4 <__aeabi_d2iz+0x3c>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d105      	bne.n	8000ae0 <__aeabi_d2iz+0x48>
 8000ad4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	bf08      	it	eq
 8000ada:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	4603      	mov	r3, r0
 8000b92:	81fb      	strh	r3, [r7, #14]
 8000b94:	460b      	mov	r3, r1
 8000b96:	81bb      	strh	r3, [r7, #12]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000ba0:	f000 fc8c 	bl	80014bc <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000ba4:	89fb      	ldrh	r3, [r7, #14]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2102      	movs	r1, #2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 faf7 	bl	80011a0 <CODEC_IO_Write>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	4413      	add	r3, r2
 8000bba:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000bbc:	89bb      	ldrh	r3, [r7, #12]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	d81b      	bhi.n	8000bfc <cs43l22_Init+0x74>
 8000bc4:	a201      	add	r2, pc, #4	; (adr r2, 8000bcc <cs43l22_Init+0x44>)
 8000bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bca:	bf00      	nop
 8000bcc:	08000bdd 	.word	0x08000bdd
 8000bd0:	08000be5 	.word	0x08000be5
 8000bd4:	08000bed 	.word	0x08000bed
 8000bd8:	08000bf5 	.word	0x08000bf5
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000bdc:	4b5b      	ldr	r3, [pc, #364]	; (8000d4c <cs43l22_Init+0x1c4>)
 8000bde:	22fa      	movs	r2, #250	; 0xfa
 8000be0:	701a      	strb	r2, [r3, #0]
    break;
 8000be2:	e00f      	b.n	8000c04 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000be4:	4b59      	ldr	r3, [pc, #356]	; (8000d4c <cs43l22_Init+0x1c4>)
 8000be6:	22af      	movs	r2, #175	; 0xaf
 8000be8:	701a      	strb	r2, [r3, #0]
    break;
 8000bea:	e00b      	b.n	8000c04 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000bec:	4b57      	ldr	r3, [pc, #348]	; (8000d4c <cs43l22_Init+0x1c4>)
 8000bee:	22aa      	movs	r2, #170	; 0xaa
 8000bf0:	701a      	strb	r2, [r3, #0]
    break;
 8000bf2:	e007      	b.n	8000c04 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000bf4:	4b55      	ldr	r3, [pc, #340]	; (8000d4c <cs43l22_Init+0x1c4>)
 8000bf6:	2205      	movs	r2, #5
 8000bf8:	701a      	strb	r2, [r3, #0]
    break;    
 8000bfa:	e003      	b.n	8000c04 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000bfc:	4b53      	ldr	r3, [pc, #332]	; (8000d4c <cs43l22_Init+0x1c4>)
 8000bfe:	2205      	movs	r2, #5
 8000c00:	701a      	strb	r2, [r3, #0]
    break;    
 8000c02:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000c04:	89fb      	ldrh	r3, [r7, #14]
 8000c06:	b2d8      	uxtb	r0, r3
 8000c08:	4b50      	ldr	r3, [pc, #320]	; (8000d4c <cs43l22_Init+0x1c4>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	2104      	movs	r1, #4
 8000c12:	f000 fac5 	bl	80011a0 <CODEC_IO_Write>
 8000c16:	4603      	mov	r3, r0
 8000c18:	461a      	mov	r2, r3
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000c20:	89fb      	ldrh	r3, [r7, #14]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2281      	movs	r2, #129	; 0x81
 8000c26:	2105      	movs	r1, #5
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 fab9 	bl	80011a0 <CODEC_IO_Write>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	4413      	add	r3, r2
 8000c36:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000c38:	89fb      	ldrh	r3, [r7, #14]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	2106      	movs	r1, #6
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 faad 	bl	80011a0 <CODEC_IO_Write>
 8000c46:	4603      	mov	r3, r0
 8000c48:	461a      	mov	r2, r3
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000c50:	7afa      	ldrb	r2, [r7, #11]
 8000c52:	89fb      	ldrh	r3, [r7, #14]
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f95a 	bl	8000f10 <cs43l22_SetVolume>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	4413      	add	r3, r2
 8000c62:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000c64:	89bb      	ldrh	r3, [r7, #12]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d023      	beq.n	8000cb2 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000c6a:	89fb      	ldrh	r3, [r7, #14]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2206      	movs	r2, #6
 8000c70:	210f      	movs	r1, #15
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 fa94 	bl	80011a0 <CODEC_IO_Write>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	4413      	add	r3, r2
 8000c80:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000c82:	89fb      	ldrh	r3, [r7, #14]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2200      	movs	r2, #0
 8000c88:	2124      	movs	r1, #36	; 0x24
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fa88 	bl	80011a0 <CODEC_IO_Write>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	4413      	add	r3, r2
 8000c98:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2125      	movs	r1, #37	; 0x25
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fa7c 	bl	80011a0 <CODEC_IO_Write>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	461a      	mov	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	4413      	add	r3, r2
 8000cb0:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000cb2:	89fb      	ldrh	r3, [r7, #14]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	210a      	movs	r1, #10
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 fa70 	bl	80011a0 <CODEC_IO_Write>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000cca:	89fb      	ldrh	r3, [r7, #14]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2204      	movs	r2, #4
 8000cd0:	210e      	movs	r1, #14
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fa64 	bl	80011a0 <CODEC_IO_Write>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	4413      	add	r3, r2
 8000ce0:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000ce2:	89fb      	ldrh	r3, [r7, #14]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2127      	movs	r1, #39	; 0x27
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 fa58 	bl	80011a0 <CODEC_IO_Write>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000cfa:	89fb      	ldrh	r3, [r7, #14]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	220f      	movs	r2, #15
 8000d00:	211f      	movs	r1, #31
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 fa4c 	bl	80011a0 <CODEC_IO_Write>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	4413      	add	r3, r2
 8000d10:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000d12:	89fb      	ldrh	r3, [r7, #14]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	220a      	movs	r2, #10
 8000d18:	211a      	movs	r1, #26
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 fa40 	bl	80011a0 <CODEC_IO_Write>
 8000d20:	4603      	mov	r3, r0
 8000d22:	461a      	mov	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	4413      	add	r3, r2
 8000d28:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000d2a:	89fb      	ldrh	r3, [r7, #14]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	220a      	movs	r2, #10
 8000d30:	211b      	movs	r1, #27
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fa34 	bl	80011a0 <CODEC_IO_Write>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	4413      	add	r3, r2
 8000d40:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000d42:	697b      	ldr	r3, [r7, #20]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200000c4 	.word	0x200000c4

08000d50 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000d54:	f000 fbe8 	bl	8001528 <AUDIO_IO_DeInit>
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000d66:	f000 fba9 	bl	80014bc <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2101      	movs	r1, #1
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 fc31 	bl	80015d8 <AUDIO_IO_Read>
 8000d76:	4603      	mov	r3, r0
 8000d78:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	f023 0307 	bic.w	r3, r3, #7
 8000d80:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	80fb      	strh	r3, [r7, #6]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <cs43l22_Play+0x5c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d11a      	bne.n	8000dde <cs43l22_Play+0x52>
  {
    /* Enable the digital soft ramp */
    //counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
	  counter ++;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	3301      	adds	r3, #1
 8000dac:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 f918 	bl	8000fe8 <cs43l22_SetMute>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	229e      	movs	r2, #158	; 0x9e
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 f9e9 	bl	80011a0 <CODEC_IO_Write>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <cs43l22_Play+0x5c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000030 	.word	0x20000030

08000dec <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000dfa:	88fb      	ldrh	r3, [r7, #6]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f8f2 	bl	8000fe8 <cs43l22_SetMute>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4413      	add	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2201      	movs	r2, #1
 8000e12:	2102      	movs	r1, #2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 f9c3 	bl	80011a0 <CODEC_IO_Write>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	4413      	add	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8000e24:	68fb      	ldr	r3, [r7, #12]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f8ce 	bl	8000fe8 <cs43l22_SetMute>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	4413      	add	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8000e54:	2300      	movs	r3, #0
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	e002      	b.n	8000e60 <cs43l22_Resume+0x30>
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	2bfe      	cmp	r3, #254	; 0xfe
 8000e64:	d9f9      	bls.n	8000e5a <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	b2d8      	uxtb	r0, r3
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <cs43l22_Resume+0x74>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	2104      	movs	r1, #4
 8000e74:	f000 f994 	bl	80011a0 <CODEC_IO_Write>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	229e      	movs	r2, #158	; 0x9e
 8000e88:	2102      	movs	r1, #2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f988 	bl	80011a0 <CODEC_IO_Write>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200000c4 	.word	0x200000c4

08000ea8 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	2101      	movs	r1, #1
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f893 	bl	8000fe8 <cs43l22_SetMute>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2204      	movs	r2, #4
 8000ed0:	210e      	movs	r1, #14
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f964 	bl	80011a0 <CODEC_IO_Write>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	229f      	movs	r2, #159	; 0x9f
 8000ee8:	2102      	movs	r1, #2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f958 	bl	80011a0 <CODEC_IO_Write>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <cs43l22_Stop+0x64>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
  return counter;    
 8000f00:	68fb      	ldr	r3, [r7, #12]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000030 	.word	0x20000030

08000f10 <cs43l22_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	460a      	mov	r2, r1
 8000f1a:	80fb      	strh	r3, [r7, #6]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000f24:	797b      	ldrb	r3, [r7, #5]
 8000f26:	2b64      	cmp	r3, #100	; 0x64
 8000f28:	d80b      	bhi.n	8000f42 <cs43l22_SetVolume+0x32>
 8000f2a:	797a      	ldrb	r2, [r7, #5]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	1a9b      	subs	r3, r3, r2
 8000f32:	4a25      	ldr	r2, [pc, #148]	; (8000fc8 <cs43l22_SetVolume+0xb8>)
 8000f34:	fb82 1203 	smull	r1, r2, r2, r3
 8000f38:	1152      	asrs	r2, r2, #5
 8000f3a:	17db      	asrs	r3, r3, #31
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	e000      	b.n	8000f44 <cs43l22_SetVolume+0x34>
 8000f42:	2364      	movs	r3, #100	; 0x64
 8000f44:	72fb      	strb	r3, [r7, #11]

  if(Volume > 0xE6)
 8000f46:	797b      	ldrb	r3, [r7, #5]
 8000f48:	2be6      	cmp	r3, #230	; 0xe6
 8000f4a:	d91c      	bls.n	8000f86 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	b2d8      	uxtb	r0, r3
 8000f50:	7afb      	ldrb	r3, [r7, #11]
 8000f52:	3319      	adds	r3, #25
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	461a      	mov	r2, r3
 8000f58:	2120      	movs	r1, #32
 8000f5a:	f000 f921 	bl	80011a0 <CODEC_IO_Write>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	b2d8      	uxtb	r0, r3
 8000f6c:	7afb      	ldrb	r3, [r7, #11]
 8000f6e:	3319      	adds	r3, #25
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	461a      	mov	r2, r3
 8000f74:	2121      	movs	r1, #33	; 0x21
 8000f76:	f000 f913 	bl	80011a0 <CODEC_IO_Write>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4413      	add	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e01b      	b.n	8000fbe <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	b2d8      	uxtb	r0, r3
 8000f8a:	7afb      	ldrb	r3, [r7, #11]
 8000f8c:	3319      	adds	r3, #25
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	2120      	movs	r1, #32
 8000f94:	f000 f904 	bl	80011a0 <CODEC_IO_Write>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	b2d8      	uxtb	r0, r3
 8000fa6:	7afb      	ldrb	r3, [r7, #11]
 8000fa8:	3319      	adds	r3, #25
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	2121      	movs	r1, #33	; 0x21
 8000fb0:	f000 f8f6 	bl	80011a0 <CODEC_IO_Write>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4413      	add	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	51eb851f 	.word	0x51eb851f

08000fcc <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	80fb      	strh	r3, [r7, #6]
  return 0;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d124      	bne.n	8001048 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	22ff      	movs	r2, #255	; 0xff
 8001004:	2104      	movs	r1, #4
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f8ca 	bl	80011a0 <CODEC_IO_Write>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2201      	movs	r2, #1
 800101c:	2122      	movs	r1, #34	; 0x22
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f8be 	bl	80011a0 <CODEC_IO_Write>
 8001024:	4603      	mov	r3, r0
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2201      	movs	r2, #1
 8001034:	2123      	movs	r1, #35	; 0x23
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f8b2 	bl	80011a0 <CODEC_IO_Write>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	e025      	b.n	8001094 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2200      	movs	r2, #0
 800104e:	2122      	movs	r1, #34	; 0x22
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f8a5 	bl	80011a0 <CODEC_IO_Write>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4413      	add	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2200      	movs	r2, #0
 8001066:	2123      	movs	r1, #35	; 0x23
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f899 	bl	80011a0 <CODEC_IO_Write>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4413      	add	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	b2d8      	uxtb	r0, r3
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <cs43l22_SetMute+0xb8>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	2104      	movs	r1, #4
 8001086:	f000 f88b 	bl	80011a0 <CODEC_IO_Write>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4413      	add	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001094:	68fb      	ldr	r3, [r7, #12]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200000c4 	.word	0x200000c4

080010a4 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	460a      	mov	r2, r1
 80010ae:	80fb      	strh	r3, [r7, #6]
 80010b0:	4613      	mov	r3, r2
 80010b2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80010b8:	797b      	ldrb	r3, [r7, #5]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d84b      	bhi.n	8001158 <cs43l22_SetOutputMode+0xb4>
 80010c0:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <cs43l22_SetOutputMode+0x24>)
 80010c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c6:	bf00      	nop
 80010c8:	080010d9 	.word	0x080010d9
 80010cc:	080010f9 	.word	0x080010f9
 80010d0:	08001119 	.word	0x08001119
 80010d4:	08001139 	.word	0x08001139
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	22fa      	movs	r2, #250	; 0xfa
 80010de:	2104      	movs	r1, #4
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 f85d 	bl	80011a0 <CODEC_IO_Write>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4413      	add	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 80010f0:	4b24      	ldr	r3, [pc, #144]	; (8001184 <cs43l22_SetOutputMode+0xe0>)
 80010f2:	22fa      	movs	r2, #250	; 0xfa
 80010f4:	701a      	strb	r2, [r3, #0]
      break;
 80010f6:	e03f      	b.n	8001178 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	22af      	movs	r2, #175	; 0xaf
 80010fe:	2104      	movs	r1, #4
 8001100:	4618      	mov	r0, r3
 8001102:	f000 f84d 	bl	80011a0 <CODEC_IO_Write>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4413      	add	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001110:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <cs43l22_SetOutputMode+0xe0>)
 8001112:	22af      	movs	r2, #175	; 0xaf
 8001114:	701a      	strb	r2, [r3, #0]
      break;
 8001116:	e02f      	b.n	8001178 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	22aa      	movs	r2, #170	; 0xaa
 800111e:	2104      	movs	r1, #4
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f83d 	bl	80011a0 <CODEC_IO_Write>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4413      	add	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <cs43l22_SetOutputMode+0xe0>)
 8001132:	22aa      	movs	r2, #170	; 0xaa
 8001134:	701a      	strb	r2, [r3, #0]
      break;
 8001136:	e01f      	b.n	8001178 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2205      	movs	r2, #5
 800113e:	2104      	movs	r1, #4
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f82d 	bl	80011a0 <CODEC_IO_Write>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4413      	add	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <cs43l22_SetOutputMode+0xe0>)
 8001152:	2205      	movs	r2, #5
 8001154:	701a      	strb	r2, [r3, #0]
      break;    
 8001156:	e00f      	b.n	8001178 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2205      	movs	r2, #5
 800115e:	2104      	movs	r1, #4
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f81d 	bl	80011a0 <CODEC_IO_Write>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <cs43l22_SetOutputMode+0xe0>)
 8001172:	2205      	movs	r2, #5
 8001174:	701a      	strb	r2, [r3, #0]
      break;
 8001176:	bf00      	nop
  }  
  return counter;
 8001178:	68fb      	ldr	r3, [r7, #12]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200000c4 	.word	0x200000c4

08001188 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
 80011aa:	460b      	mov	r3, r1
 80011ac:	71bb      	strb	r3, [r7, #6]
 80011ae:	4613      	mov	r3, r2
 80011b0:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80011b6:	797a      	ldrb	r2, [r7, #5]
 80011b8:	79b9      	ldrb	r1, [r7, #6]
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f9f3 	bl	80015a8 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	b2db      	uxtb	r3, r3
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <I2C1_Init>:
/**
  * @brief Discovery I2C1 Bus initialization
  * @retval None
  */
static void I2C1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2c1Handle) == HAL_I2C_STATE_RESET)
 80011d4:	4812      	ldr	r0, [pc, #72]	; (8001220 <I2C1_Init+0x50>)
 80011d6:	f001 fecf 	bl	8002f78 <HAL_I2C_GetState>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d11d      	bne.n	800121c <I2C1_Init+0x4c>
  {
    I2c1Handle.Instance              = DISCOVERY_I2C1;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <I2C1_Init+0x50>)
 80011e2:	4a10      	ldr	r2, [pc, #64]	; (8001224 <I2C1_Init+0x54>)
 80011e4:	601a      	str	r2, [r3, #0]
    I2c1Handle.Init.Timing           = DISCOVERY_I2C1_TIMING;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <I2C1_Init+0x50>)
 80011e8:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <I2C1_Init+0x58>)
 80011ea:	605a      	str	r2, [r3, #4]
    I2c1Handle.Init.OwnAddress1      = 0;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <I2C1_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
    I2c1Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <I2C1_Init+0x50>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	60da      	str	r2, [r3, #12]
    I2c1Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <I2C1_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
    I2c1Handle.Init.OwnAddress2      = 0;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <I2C1_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	615a      	str	r2, [r3, #20]
    I2c1Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <I2C1_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
    I2c1Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;  
 800120a:	4b05      	ldr	r3, [pc, #20]	; (8001220 <I2C1_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C1_MspInit(&I2c1Handle);
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <I2C1_Init+0x50>)
 8001212:	f000 f80b 	bl	800122c <I2C1_MspInit>
    HAL_I2C_Init(&I2c1Handle);
 8001216:	4802      	ldr	r0, [pc, #8]	; (8001220 <I2C1_Init+0x50>)
 8001218:	f001 fbc2 	bl	80029a0 <HAL_I2C_Init>
  }
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20007ef8 	.word	0x20007ef8
 8001224:	40005400 	.word	0x40005400
 8001228:	90112626 	.word	0x90112626

0800122c <I2C1_MspInit>:
  * @brief Discovery I2C1 MSP Initialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *hi2c)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b0ae      	sub	sp, #184	; 0xb8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;  
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  /* IOSV bit MUST be set to access GPIO port G[2:15] */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001234:	4a3a      	ldr	r2, [pc, #232]	; (8001320 <I2C1_MspInit+0xf4>)
 8001236:	4b3a      	ldr	r3, [pc, #232]	; (8001320 <I2C1_MspInit+0xf4>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123e:	6593      	str	r3, [r2, #88]	; 0x58
 8001240:	4b37      	ldr	r3, [pc, #220]	; (8001320 <I2C1_MspInit+0xf4>)
 8001242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 800124c:	f002 f8ca 	bl	80033e4 <HAL_PWREx_EnableVddIO2>
  
  if (hi2c->Instance == DISCOVERY_I2C1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a33      	ldr	r2, [pc, #204]	; (8001324 <I2C1_MspInit+0xf8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d15e      	bne.n	8001318 <I2C1_MspInit+0xec>
  {
    /*##-1- Configure the Discovery I2C clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800125a:	2340      	movs	r3, #64	; 0x40
 800125c:	61fb      	str	r3, [r7, #28]
    RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	4618      	mov	r0, r3
 800126a:	f002 fe51 	bl	8003f10 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/  
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 800126e:	4a2c      	ldr	r2, [pc, #176]	; (8001320 <I2C1_MspInit+0xf4>)
 8001270:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <I2C1_MspInit+0xf4>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b29      	ldr	r3, [pc, #164]	; (8001320 <I2C1_MspInit+0xf4>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 8001286:	4a26      	ldr	r2, [pc, #152]	; (8001320 <I2C1_MspInit+0xf4>)
 8001288:	4b25      	ldr	r3, [pc, #148]	; (8001320 <I2C1_MspInit+0xf4>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001292:	4b23      	ldr	r3, [pc, #140]	; (8001320 <I2C1_MspInit+0xf4>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
      
    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN;
 800129e:	23c0      	movs	r3, #192	; 0xc0
 80012a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 80012a4:	2312      	movs	r3, #18
 80012a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = GPIO_PULLUP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C1_SCL_SDA_AF;
 80012b6:	2304      	movs	r3, #4
 80012b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C1_SCL_GPIO_PORT, &GPIO_InitStructure);
 80012bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4819      	ldr	r0, [pc, #100]	; (8001328 <I2C1_MspInit+0xfc>)
 80012c4:	f001 f8b8 	bl	8002438 <HAL_GPIO_Init>
      
    /*##-3- Configure the Discovery I2C1 peripheral #######################################*/ 
    /* Enable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_ENABLE();
 80012c8:	4a15      	ldr	r2, [pc, #84]	; (8001320 <I2C1_MspInit+0xf4>)
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <I2C1_MspInit+0xf4>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d2:	6593      	str	r3, [r2, #88]	; 0x58
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <I2C1_MspInit+0xf4>)
 80012d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
    
    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 80012e0:	4a0f      	ldr	r2, [pc, #60]	; (8001320 <I2C1_MspInit+0xf4>)
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <I2C1_MspInit+0xf4>)
 80012e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ea:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 80012ec:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <I2C1_MspInit+0xf4>)
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <I2C1_MspInit+0xf4>)
 80012f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012f6:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_EV_IRQn, 0x00, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	201f      	movs	r0, #31
 80012fe:	f000 fb22 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_EV_IRQn);
 8001302:	201f      	movs	r0, #31
 8001304:	f000 fb3b 	bl	800197e <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_ER_IRQn, 0x00, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2100      	movs	r1, #0
 800130c:	2020      	movs	r0, #32
 800130e:	f000 fb1a 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_ER_IRQn); 
 8001312:	2020      	movs	r0, #32
 8001314:	f000 fb33 	bl	800197e <HAL_NVIC_EnableIRQ>
  }
}
 8001318:	bf00      	nop
 800131a:	37b8      	adds	r7, #184	; 0xb8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40021000 	.word	0x40021000
 8001324:	40005400 	.word	0x40005400
 8001328:	48000400 	.word	0x48000400

0800132c <I2C1_DeInit>:
/**
  * @brief Discovery I2C1 Bus Deitialization
  * @retval None
  */
static void I2C1_DeInit(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2c1Handle) != HAL_I2C_STATE_RESET)
 8001330:	4806      	ldr	r0, [pc, #24]	; (800134c <I2C1_DeInit+0x20>)
 8001332:	f001 fe21 	bl	8002f78 <HAL_I2C_GetState>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <I2C1_DeInit+0x1c>
  {
    /* Deinit the I2C */
    HAL_I2C_DeInit(&I2c1Handle);
 800133c:	4803      	ldr	r0, [pc, #12]	; (800134c <I2C1_DeInit+0x20>)
 800133e:	f001 fbbd 	bl	8002abc <HAL_I2C_DeInit>
    I2C1_MspDeInit(&I2c1Handle);
 8001342:	4802      	ldr	r0, [pc, #8]	; (800134c <I2C1_DeInit+0x20>)
 8001344:	f000 f804 	bl	8001350 <I2C1_MspDeInit>
  }
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20007ef8 	.word	0x20007ef8

08001350 <I2C1_MspDeInit>:
  * @brief Discovery I2C1 MSP Deinitialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance == DISCOVERY_I2C1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a24      	ldr	r2, [pc, #144]	; (80013f0 <I2C1_MspDeInit+0xa0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d141      	bne.n	80013e6 <I2C1_MspDeInit+0x96>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 8001362:	4a24      	ldr	r2, [pc, #144]	; (80013f4 <I2C1_MspDeInit+0xa4>)
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <I2C1_MspDeInit+0xa4>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136e:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <I2C1_MspDeInit+0xa4>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 800137a:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <I2C1_MspDeInit+0xa4>)
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <I2C1_MspDeInit+0xa4>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <I2C1_MspDeInit+0xa4>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]

    /* Deinit Rx/Tx pins */
    HAL_GPIO_DeInit(DISCOVERY_I2C1_SCL_GPIO_PORT, (DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN));
 8001392:	21c0      	movs	r1, #192	; 0xc0
 8001394:	4818      	ldr	r0, [pc, #96]	; (80013f8 <I2C1_MspDeInit+0xa8>)
 8001396:	f001 f9f7 	bl	8002788 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C1 peripheral ############################*/
    /* Force & Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2C1_FORCE_RESET();
 800139a:	4a16      	ldr	r2, [pc, #88]	; (80013f4 <I2C1_MspDeInit+0xa4>)
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <I2C1_MspDeInit+0xa4>)
 800139e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a4:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 80013a6:	4a13      	ldr	r2, [pc, #76]	; (80013f4 <I2C1_MspDeInit+0xa4>)
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <I2C1_MspDeInit+0xa4>)
 80013aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_DISABLE();
 80013b2:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <I2C1_MspDeInit+0xa4>)
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <I2C1_MspDeInit+0xa4>)
 80013b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013bc:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C1 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_EV_IRQn);
 80013be:	201f      	movs	r0, #31
 80013c0:	f000 faeb 	bl	800199a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_ER_IRQn);
 80013c4:	2020      	movs	r0, #32
 80013c6:	f000 fae8 	bl	800199a <HAL_NVIC_DisableIRQ>
    
    __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <I2C1_MspDeInit+0xa4>)
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <I2C1_MspDeInit+0xa4>)
 80013ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d4:	6593      	str	r3, [r2, #88]	; 0x58
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <I2C1_MspDeInit+0xa4>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_DisableVddIO2();
 80013e2:	f002 f80f 	bl	8003404 <HAL_PWREx_DisableVddIO2>
  }
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40005400 	.word	0x40005400
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000400 	.word	0x48000400

080013fc <I2C1_WriteBuffer>:
  * @param  pBuffer: The target register value to be written 
  * @param  Length: buffer size to be written
  * @retval None
  */
static HAL_StatusTypeDef I2C1_WriteBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af04      	add	r7, sp, #16
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	4603      	mov	r3, r0
 8001406:	81fb      	strh	r3, [r7, #14]
 8001408:	460b      	mov	r3, r1
 800140a:	81bb      	strh	r3, [r7, #12]
 800140c:	4613      	mov	r3, r2
 800140e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout); 
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <I2C1_WriteBuffer+0x4c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	8978      	ldrh	r0, [r7, #10]
 800141a:	89ba      	ldrh	r2, [r7, #12]
 800141c:	89f9      	ldrh	r1, [r7, #14]
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	8c3b      	ldrh	r3, [r7, #32]
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	4603      	mov	r3, r0
 800142a:	4808      	ldr	r0, [pc, #32]	; (800144c <I2C1_WriteBuffer+0x50>)
 800142c:	f001 fb76 	bl	8002b1c <HAL_I2C_Mem_Write>
 8001430:	4603      	mov	r3, r0
 8001432:	75fb      	strb	r3, [r7, #23]

/* Check the communication status */
  if(status != HAL_OK)
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <I2C1_WriteBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 800143a:	f000 f833 	bl	80014a4 <I2C1_Error>
  }        
  return status;
 800143e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000034 	.word	0x20000034
 800144c:	20007ef8 	.word	0x20007ef8

08001450 <I2C1_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C1_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af04      	add	r7, sp, #16
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	4603      	mov	r3, r0
 800145a:	81fb      	strh	r3, [r7, #14]
 800145c:	460b      	mov	r3, r1
 800145e:	81bb      	strh	r3, [r7, #12]
 8001460:	4613      	mov	r3, r2
 8001462:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <I2C1_ReadBuffer+0x4c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	8978      	ldrh	r0, [r7, #10]
 800146e:	89ba      	ldrh	r2, [r7, #12]
 8001470:	89f9      	ldrh	r1, [r7, #14]
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	8c3b      	ldrh	r3, [r7, #32]
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	4603      	mov	r3, r0
 800147e:	4808      	ldr	r0, [pc, #32]	; (80014a0 <I2C1_ReadBuffer+0x50>)
 8001480:	f001 fc60 	bl	8002d44 <HAL_I2C_Mem_Read>
 8001484:	4603      	mov	r3, r0
 8001486:	75fb      	strb	r3, [r7, #23]
  
/* Check the communication status */
  if(status != HAL_OK)
 8001488:	7dfb      	ldrb	r3, [r7, #23]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <I2C1_ReadBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 800148e:	f000 f809 	bl	80014a4 <I2C1_Error>
  }        
  return status;
 8001492:	7dfb      	ldrb	r3, [r7, #23]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000034 	.word	0x20000034
 80014a0:	20007ef8 	.word	0x20007ef8

080014a4 <I2C1_Error>:
/**
  * @brief Discovery I2C1 error treatment function
  * @retval None
  */
static void I2C1_Error (void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c1Handle);
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <I2C1_Error+0x14>)
 80014aa:	f001 fb07 	bl	8002abc <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C communication BUS */
  I2C1_Init();
 80014ae:	f7ff fe8f 	bl	80011d0 <I2C1_Init>
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20007ef8 	.word	0x20007ef8

080014bc <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80014c2:	4a17      	ldr	r2, [pc, #92]	; (8001520 <AUDIO_IO_Init+0x64>)
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <AUDIO_IO_Init+0x64>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	f043 0310 	orr.w	r3, r3, #16
 80014cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <AUDIO_IO_Init+0x64>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 80014da:	2308      	movs	r3, #8
 80014dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	2301      	movs	r3, #1
 80014e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e2:	2302      	movs	r3, #2
 80014e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	480d      	ldr	r0, [pc, #52]	; (8001524 <AUDIO_IO_Init+0x68>)
 80014f0:	f000 ffa2 	bl	8002438 <HAL_GPIO_Init>

  /* I2C bus init */
  I2C1_Init();
 80014f4:	f7ff fe6c 	bl	80011d0 <I2C1_Init>

  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 80014f8:	2200      	movs	r2, #0
 80014fa:	2108      	movs	r1, #8
 80014fc:	4809      	ldr	r0, [pc, #36]	; (8001524 <AUDIO_IO_Init+0x68>)
 80014fe:	f001 fa37 	bl	8002970 <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8001502:	2005      	movs	r0, #5
 8001504:	f000 f912 	bl	800172c <HAL_Delay>

  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8001508:	2201      	movs	r2, #1
 800150a:	2108      	movs	r1, #8
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <AUDIO_IO_Init+0x68>)
 800150e:	f001 fa2f 	bl	8002970 <HAL_GPIO_WritePin>
   
  /* wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8001512:	2005      	movs	r0, #5
 8001514:	f000 f90a 	bl	800172c <HAL_Delay>
}
 8001518:	bf00      	nop
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	48001000 	.word	0x48001000

08001528 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)                       /* TO DO */
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
  
  /***********************************************************************/
  /* In case of battery-supplied powered, there is no audio codec-based 
     features available. Set audio codec I/O default setting */
  /***********************************************************************/ 
  __HAL_RCC_GPIOE_CLK_ENABLE();  
 800152e:	4a1c      	ldr	r2, [pc, #112]	; (80015a0 <AUDIO_IO_DeInit+0x78>)
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <AUDIO_IO_DeInit+0x78>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001534:	f043 0310 	orr.w	r3, r3, #16
 8001538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <AUDIO_IO_DeInit+0x78>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP  ;
 8001546:	2301      	movs	r3, #1
 8001548:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pin       = (GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 800154a:	237c      	movs	r3, #124	; 0x7c
 800154c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 800154e:	2302      	movs	r3, #2
 8001550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH; 
 8001552:	2303      	movs	r3, #3
 8001554:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4619      	mov	r1, r3
 800155a:	4812      	ldr	r0, [pc, #72]	; (80015a4 <AUDIO_IO_DeInit+0x7c>)
 800155c:	f000 ff6c 	bl	8002438 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	2104      	movs	r1, #4
 8001564:	480f      	ldr	r0, [pc, #60]	; (80015a4 <AUDIO_IO_DeInit+0x7c>)
 8001566:	f001 fa03 	bl	8002970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	2108      	movs	r1, #8
 800156e:	480d      	ldr	r0, [pc, #52]	; (80015a4 <AUDIO_IO_DeInit+0x7c>)
 8001570:	f001 f9fe 	bl	8002970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	2110      	movs	r1, #16
 8001578:	480a      	ldr	r0, [pc, #40]	; (80015a4 <AUDIO_IO_DeInit+0x7c>)
 800157a:	f001 f9f9 	bl	8002970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	2120      	movs	r1, #32
 8001582:	4808      	ldr	r0, [pc, #32]	; (80015a4 <AUDIO_IO_DeInit+0x7c>)
 8001584:	f001 f9f4 	bl	8002970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	2140      	movs	r1, #64	; 0x40
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <AUDIO_IO_DeInit+0x7c>)
 800158e:	f001 f9ef 	bl	8002970 <HAL_GPIO_WritePin>

  /* I2C bus Deinit */
  I2C1_DeInit();
 8001592:	f7ff fecb 	bl	800132c <I2C1_DeInit>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	48001000 	.word	0x48001000

080015a8 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
 80015b2:	460b      	mov	r3, r1
 80015b4:	71bb      	strb	r3, [r7, #6]
 80015b6:	4613      	mov	r3, r2
 80015b8:	717b      	strb	r3, [r7, #5]
  I2C1_WriteBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1);
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	b298      	uxth	r0, r3
 80015be:	79bb      	ldrb	r3, [r7, #6]
 80015c0:	b299      	uxth	r1, r3
 80015c2:	1d7a      	adds	r2, r7, #5
 80015c4:	2301      	movs	r3, #1
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	4613      	mov	r3, r2
 80015ca:	2201      	movs	r2, #1
 80015cc:	f7ff ff16 	bl	80013fc <I2C1_WriteBuffer>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af02      	add	r7, sp, #8
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	4613      	mov	r3, r2
 80015e6:	71bb      	strb	r3, [r7, #6]
  uint8_t Read_Value = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
  
  I2C1_ReadBuffer((uint16_t) Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Read_Value, 1); 
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	b298      	uxth	r0, r3
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	b299      	uxth	r1, r3
 80015f4:	f107 020f 	add.w	r2, r7, #15
 80015f8:	2301      	movs	r3, #1
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	4613      	mov	r3, r2
 80015fe:	2201      	movs	r2, #1
 8001600:	f7ff ff26 	bl	8001450 <I2C1_ReadBuffer>
  
  return Read_Value;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'HalfTransfer' callback function (if any) */
  if (hAudioOut.CbHalfTransfer != (Audio_CallbackTypeDef)NULL)
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_SAI_TxHalfCpltCallback+0x20>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <HAL_SAI_TxHalfCpltCallback+0x16>
  {
    hAudioOut.CbHalfTransfer();
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_SAI_TxHalfCpltCallback+0x20>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	4798      	blx	r3
  }
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200000c8 	.word	0x200000c8

08001634 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'ErrorCallback' callback function (if any) */
  if (hAudioOut.CbError != (Audio_CallbackTypeDef)NULL)
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_SAI_ErrorCallback+0x20>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <HAL_SAI_ErrorCallback+0x16>
  {
    hAudioOut.CbError();
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_SAI_ErrorCallback+0x20>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4798      	blx	r3
  }
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200000c8 	.word	0x200000c8

08001658 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter : DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'ErrorCallback' callback function (if any) */
  if (hAudioIn.CbError != (Audio_CallbackTypeDef)NULL)
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_DFSDM_FilterErrorCallback+0x24>)
 8001662:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_DFSDM_FilterErrorCallback+0x1a>
  {
    hAudioIn.CbError();
 800166a:	4b04      	ldr	r3, [pc, #16]	; (800167c <HAL_DFSDM_FilterErrorCallback+0x24>)
 800166c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001670:	4798      	blx	r3
  }
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200000d8 	.word	0x200000d8

08001680 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168a:	2003      	movs	r0, #3
 800168c:	f000 f950 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001690:	200f      	movs	r0, #15
 8001692:	f000 f80d 	bl	80016b0 <HAL_InitTick>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	71fb      	strb	r3, [r7, #7]
 80016a0:	e001      	b.n	80016a6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016a2:	f005 f9a5 	bl	80069f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016a6:	79fb      	ldrb	r3, [r7, #7]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_InitTick+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <HAL_InitTick+0x44>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	099b      	lsrs	r3, r3, #6
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 f974 	bl	80019b6 <HAL_SYSTICK_Config>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <HAL_InitTick+0x2a>
  {
    status = HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	e005      	b.n	80016e6 <HAL_InitTick+0x36>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	f04f 30ff 	mov.w	r0, #4294967295
 80016e2:	f000 f930 	bl	8001946 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2000003c 	.word	0x2000003c
 80016f4:	10624dd3 	.word	0x10624dd3

080016f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick++;
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <HAL_IncTick+0x18>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	4a03      	ldr	r2, [pc, #12]	; (8001710 <HAL_IncTick+0x18>)
 8001704:	6013      	str	r3, [r2, #0]
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	20007f44 	.word	0x20007f44

08001714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_GetTick+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20007f44 	.word	0x20007f44

0800172c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001734:	f7ff ffee 	bl	8001714 <HAL_GetTick>
 8001738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001744:	d002      	beq.n	800174c <HAL_Delay+0x20>
  {
    wait++;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3301      	adds	r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800174c:	bf00      	nop
 800174e:	f7ff ffe1 	bl	8001714 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	1ad2      	subs	r2, r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	429a      	cmp	r2, r3
 800175c:	d3f7      	bcc.n	800174e <HAL_Delay+0x22>
  {
  }
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <NVIC_SetPriorityGrouping+0x44>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <NVIC_SetPriorityGrouping+0x44>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80017d6:	4909      	ldr	r1, [pc, #36]	; (80017fc <NVIC_EnableIRQ+0x30>)
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	095b      	lsrs	r3, r3, #5
 80017de:	79fa      	ldrb	r2, [r7, #7]
 80017e0:	f002 021f 	and.w	r2, r2, #31
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100

08001800 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800180a:	4909      	ldr	r1, [pc, #36]	; (8001830 <NVIC_DisableIRQ+0x30>)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	095b      	lsrs	r3, r3, #5
 8001812:	79fa      	ldrb	r2, [r7, #7]
 8001814:	f002 021f 	and.w	r2, r2, #31
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	3320      	adds	r3, #32
 8001820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100

08001834 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	da0b      	bge.n	8001860 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	490d      	ldr	r1, [pc, #52]	; (8001880 <NVIC_SetPriority+0x4c>)
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	3b04      	subs	r3, #4
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	0112      	lsls	r2, r2, #4
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	440b      	add	r3, r1
 800185c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185e:	e009      	b.n	8001874 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	4908      	ldr	r1, [pc, #32]	; (8001884 <NVIC_SetPriority+0x50>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00
 8001884:	e000e100 	.word	0xe000e100

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	2201      	movs	r2, #1
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	1e5a      	subs	r2, r3, #1
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	401a      	ands	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ce:	2101      	movs	r1, #1
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	1e59      	subs	r1, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f7ff ff90 	bl	8001834 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff15 	bl	8001768 <NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff2a 	bl	80017b0 <NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff90 	bl	8001888 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5f 	bl	8001834 <NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff1d 	bl	80017cc <NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff29 	bl	8001800 <NVIC_DisableIRQ>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ff94 	bl	80018ec <SysTick_Config>
 80019c4:	4603      	mov	r3, r0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e0ac      	b.n	8001b3c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fa82 	bl	8001ef0 <DFSDM_GetChannelFromInstance>
 80019ec:	4602      	mov	r2, r0
 80019ee:	4b55      	ldr	r3, [pc, #340]	; (8001b44 <HAL_DFSDM_ChannelInit+0x174>)
 80019f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e09f      	b.n	8001b3c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f004 fe93 	bl	8006728 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001a02:	4b51      	ldr	r3, [pc, #324]	; (8001b48 <HAL_DFSDM_ChannelInit+0x178>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	3301      	adds	r3, #1
 8001a08:	4a4f      	ldr	r2, [pc, #316]	; (8001b48 <HAL_DFSDM_ChannelInit+0x178>)
 8001a0a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001a0c:	4b4e      	ldr	r3, [pc, #312]	; (8001b48 <HAL_DFSDM_ChannelInit+0x178>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d125      	bne.n	8001a60 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001a14:	4a4d      	ldr	r2, [pc, #308]	; (8001b4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a16:	4b4d      	ldr	r3, [pc, #308]	; (8001b4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001a1e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001a20:	494a      	ldr	r1, [pc, #296]	; (8001b4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a22:	4b4a      	ldr	r3, [pc, #296]	; (8001b4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001a2e:	4a47      	ldr	r2, [pc, #284]	; (8001b4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a30:	4b46      	ldr	r3, [pc, #280]	; (8001b4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001a38:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	791b      	ldrb	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d108      	bne.n	8001a54 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001a42:	4942      	ldr	r1, [pc, #264]	; (8001b4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a44:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	041b      	lsls	r3, r3, #16
 8001a50:	4313      	orrs	r3, r2
 8001a52:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001a54:	4a3d      	ldr	r2, [pc, #244]	; (8001b4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a56:	4b3d      	ldr	r3, [pc, #244]	; (8001b4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a5e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001a6e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	6811      	ldr	r1, [r2, #0]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6910      	ldr	r0, [r2, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6952      	ldr	r2, [r2, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a82:	4310      	orrs	r0, r2
                                        hdfsdm_channel->Init.Input.Pins);
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6992      	ldr	r2, [r2, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a88:	4302      	orrs	r2, r0
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	f022 020f 	bic.w	r2, r2, #15
 8001a9c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	6811      	ldr	r1, [r2, #0]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	69d0      	ldr	r0, [r2, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6a12      	ldr	r2, [r2, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001ab0:	4302      	orrs	r2, r0
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	6892      	ldr	r2, [r2, #8]
 8001ac0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001ac4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	6891      	ldr	r1, [r2, #8]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6a50      	ldr	r0, [r2, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001ad8:	3a01      	subs	r2, #1
 8001ada:	0412      	lsls	r2, r2, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001adc:	4302      	orrs	r2, r0
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	6852      	ldr	r2, [r2, #4]
 8001aec:	f002 0207 	and.w	r2, r2, #7
 8001af0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	6851      	ldr	r1, [r2, #4]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b00:	0210      	lsls	r0, r2, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b06:	00d2      	lsls	r2, r2, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b08:	4302      	orrs	r2, r0
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b1c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f9e0 	bl	8001ef0 <DFSDM_GetChannelFromInstance>
 8001b30:	4601      	mov	r1, r0
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <HAL_DFSDM_ChannelInit+0x174>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000180 	.word	0x20000180
 8001b48:	2000017c 	.word	0x2000017c
 8001b4c:	40016000 	.word	0x40016000

08001b50 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e0ca      	b.n	8001cf8 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a66      	ldr	r2, [pc, #408]	; (8001d00 <HAL_DFSDM_FilterInit+0x1b0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d109      	bne.n	8001b80 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d003      	beq.n	8001b7c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0bb      	b.n	8001cf8 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f004 fe23 	bl	80067e4 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001bac:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7a1b      	ldrb	r3, [r3, #8]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d108      	bne.n	8001bc8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	e007      	b.n	8001bd8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001bd6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7a5b      	ldrb	r3, [r3, #9]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d108      	bne.n	8001bf2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e007      	b.n	8001c02 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8001c10:	f023 0308 	bic.w	r3, r3, #8
 8001c14:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d108      	bne.n	8001c30 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	6811      	ldr	r1, [r2, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6952      	ldr	r2, [r2, #20]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7c1b      	ldrb	r3, [r3, #16]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d108      	bne.n	8001c4a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	f042 0210 	orr.w	r2, r2, #16
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e007      	b.n	8001c5a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	f022 0210 	bic.w	r2, r2, #16
 8001c58:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	7c5b      	ldrb	r3, [r3, #17]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d108      	bne.n	8001c74 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	f042 0220 	orr.w	r2, r2, #32
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	e007      	b.n	8001c84 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	f022 0220 	bic.w	r2, r2, #32
 8001c82:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8001c92:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001c96:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	6951      	ldr	r1, [r2, #20]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	69d0      	ldr	r0, [r2, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6a12      	ldr	r2, [r2, #32]
 8001caa:	3a01      	subs	r2, #1
 8001cac:	0412      	lsls	r2, r2, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001cae:	4310      	orrs	r0, r2
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cb4:	3a01      	subs	r2, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001cb6:	4302      	orrs	r2, r0
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699a      	ldr	r2, [r3, #24]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7c1a      	ldrb	r2, [r3, #16]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	f042 0201 	orr.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40016100 	.word	0x40016100

08001d04 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d02e      	beq.n	8001d7c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001d24:	2bff      	cmp	r3, #255	; 0xff
 8001d26:	d029      	beq.n	8001d7c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d10d      	bne.n	8001d5e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	6811      	ldr	r1, [r2, #0]
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	0212      	lsls	r2, r2, #8
 8001d50:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001d54:	430a      	orrs	r2, r1
 8001d56:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	e00a      	b.n	8001d74 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	6811      	ldr	r1, [r2, #0]
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	0212      	lsls	r2, r2, #8
 8001d6c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	631a      	str	r2, [r3, #48]	; 0x30
 8001d7a:	e001      	b.n	8001d80 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	75fb      	strb	r3, [r7, #23]
 8001db0:	e064      	b.n	8001e7c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dc0:	d002      	beq.n	8001dc8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	75fb      	strb	r3, [r7, #23]
 8001dc6:	e059      	b.n	8001e7c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10e      	bne.n	8001dee <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10a      	bne.n	8001dee <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d105      	bne.n	8001dee <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d002      	beq.n	8001dee <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	75fb      	strb	r3, [r7, #23]
 8001dec:	e046      	b.n	8001e7c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10b      	bne.n	8001e0e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d107      	bne.n	8001e0e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	d102      	bne.n	8001e0e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	75fb      	strb	r3, [r7, #23]
 8001e0c:	e036      	b.n	8001e7c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d004      	beq.n	8001e22 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d12a      	bne.n	8001e78 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001e28:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001e30:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e3a:	69d2      	ldr	r2, [r2, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001e3c:	2a20      	cmp	r2, #32
 8001e3e:	d101      	bne.n	8001e44 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8001e40:	4a13      	ldr	r2, [pc, #76]	; (8001e90 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001e42:	e000      	b.n	8001e46 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8001e44:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001e46:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	331c      	adds	r3, #28
 8001e52:	4619      	mov	r1, r3
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f000 f9ae 	bl	80021b8 <HAL_DMA_Start_IT>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d006      	beq.n	8001e70 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	22ff      	movs	r2, #255	; 0xff
 8001e66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001e6e:	e005      	b.n	8001e7c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f893 	bl	8001f9c <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001e76:	e001      	b.n	8001e7c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	08001eb1 	.word	0x08001eb1
 8001e8c:	08001ecd 	.word	0x08001ecd
 8001e90:	08001e95 	.word	0x08001e95

08001e94 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea0:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f004 fd64 	bl	8006970 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f004 fd66 	bl	8006990 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2203      	movs	r2, #3
 8001ede:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f7ff fbb9 	bl	8001658 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a20      	ldr	r2, [pc, #128]	; (8001f7c <DFSDM_GetChannelFromInstance+0x8c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d102      	bne.n	8001f06 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	e032      	b.n	8001f6c <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel1)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <DFSDM_GetChannelFromInstance+0x90>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d102      	bne.n	8001f14 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	e02b      	b.n	8001f6c <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a1b      	ldr	r2, [pc, #108]	; (8001f84 <DFSDM_GetChannelFromInstance+0x94>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d102      	bne.n	8001f22 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	e024      	b.n	8001f6c <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel3)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <DFSDM_GetChannelFromInstance+0x98>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d102      	bne.n	8001f30 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	e01d      	b.n	8001f6c <DFSDM_GetChannelFromInstance+0x7c>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a16      	ldr	r2, [pc, #88]	; (8001f8c <DFSDM_GetChannelFromInstance+0x9c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d102      	bne.n	8001f3e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8001f38:	2304      	movs	r3, #4
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	e016      	b.n	8001f6c <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel5)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a13      	ldr	r2, [pc, #76]	; (8001f90 <DFSDM_GetChannelFromInstance+0xa0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d102      	bne.n	8001f4c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8001f46:	2305      	movs	r3, #5
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	e00f      	b.n	8001f6c <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel6)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a11      	ldr	r2, [pc, #68]	; (8001f94 <DFSDM_GetChannelFromInstance+0xa4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d102      	bne.n	8001f5a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8001f54:	2306      	movs	r3, #6
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	e008      	b.n	8001f6c <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel7)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <DFSDM_GetChannelFromInstance+0xa8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d102      	bne.n	8001f68 <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 8001f62:	2307      	movs	r3, #7
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	e001      	b.n	8001f6c <DFSDM_GetChannelFromInstance+0x7c>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40016000 	.word	0x40016000
 8001f80:	40016020 	.word	0x40016020
 8001f84:	40016040 	.word	0x40016040
 8001f88:	40016060 	.word	0x40016060
 8001f8c:	40016080 	.word	0x40016080
 8001f90:	400160a0 	.word	0x400160a0
 8001f94:	400160c0 	.word	0x400160c0
 8001f98:	400160e0 	.word	0x400160e0

08001f9c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d108      	bne.n	8001fbe <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	e033      	b.n	8002026 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	f022 0201 	bic.w	r2, r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001fdc:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d116      	bne.n	8002026 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d107      	bne.n	8002010 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	f042 0202 	orr.w	r2, r2, #2
 800200e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8002016:	2b01      	cmp	r3, #1
 8002018:	d102      	bne.n	8002020 <DFSDM_RegConvStart+0x84>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	e000      	b.n	8002022 <DFSDM_RegConvStart+0x86>
 8002020:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <DFSDM_RegConvStart+0x98>
 8002030:	2202      	movs	r2, #2
 8002032:	e000      	b.n	8002036 <DFSDM_RegConvStart+0x9a>
 8002034:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e098      	b.n	800218c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	4b4d      	ldr	r3, [pc, #308]	; (8002198 <HAL_DMA_Init+0x150>)
 8002062:	429a      	cmp	r2, r3
 8002064:	d80f      	bhi.n	8002086 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	4b4b      	ldr	r3, [pc, #300]	; (800219c <HAL_DMA_Init+0x154>)
 800206e:	4413      	add	r3, r2
 8002070:	4a4b      	ldr	r2, [pc, #300]	; (80021a0 <HAL_DMA_Init+0x158>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	009a      	lsls	r2, r3, #2
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a48      	ldr	r2, [pc, #288]	; (80021a4 <HAL_DMA_Init+0x15c>)
 8002082:	641a      	str	r2, [r3, #64]	; 0x40
 8002084:	e00e      	b.n	80020a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_DMA_Init+0x160>)
 800208e:	4413      	add	r3, r2
 8002090:	4a43      	ldr	r2, [pc, #268]	; (80021a0 <HAL_DMA_Init+0x158>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	009a      	lsls	r2, r3, #2
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a42      	ldr	r2, [pc, #264]	; (80021ac <HAL_DMA_Init+0x164>)
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80020ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80020c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020fe:	d039      	beq.n	8002174 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	4a27      	ldr	r2, [pc, #156]	; (80021a4 <HAL_DMA_Init+0x15c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d11a      	bne.n	8002140 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800210a:	4929      	ldr	r1, [pc, #164]	; (80021b0 <HAL_DMA_Init+0x168>)
 800210c:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <HAL_DMA_Init+0x168>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002114:	f003 031c 	and.w	r3, r3, #28
 8002118:	200f      	movs	r0, #15
 800211a:	fa00 f303 	lsl.w	r3, r0, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	4013      	ands	r3, r2
 8002122:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002124:	4822      	ldr	r0, [pc, #136]	; (80021b0 <HAL_DMA_Init+0x168>)
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <HAL_DMA_Init+0x168>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6859      	ldr	r1, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f003 031c 	and.w	r3, r3, #28
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	4313      	orrs	r3, r2
 800213c:	6003      	str	r3, [r0, #0]
 800213e:	e019      	b.n	8002174 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002140:	491c      	ldr	r1, [pc, #112]	; (80021b4 <HAL_DMA_Init+0x16c>)
 8002142:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <HAL_DMA_Init+0x16c>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f003 031c 	and.w	r3, r3, #28
 800214e:	200f      	movs	r0, #15
 8002150:	fa00 f303 	lsl.w	r3, r0, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	4013      	ands	r3, r2
 8002158:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800215a:	4816      	ldr	r0, [pc, #88]	; (80021b4 <HAL_DMA_Init+0x16c>)
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <HAL_DMA_Init+0x16c>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6859      	ldr	r1, [r3, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	f003 031c 	and.w	r3, r3, #28
 800216c:	fa01 f303 	lsl.w	r3, r1, r3
 8002170:	4313      	orrs	r3, r2
 8002172:	6003      	str	r3, [r0, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	40020407 	.word	0x40020407
 800219c:	bffdfff8 	.word	0xbffdfff8
 80021a0:	cccccccd 	.word	0xcccccccd
 80021a4:	40020000 	.word	0x40020000
 80021a8:	bffdfbf8 	.word	0xbffdfbf8
 80021ac:	40020400 	.word	0x40020400
 80021b0:	400200a8 	.word	0x400200a8
 80021b4:	400204a8 	.word	0x400204a8

080021b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_DMA_Start_IT+0x20>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e04b      	b.n	8002270 <HAL_DMA_Start_IT+0xb8>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d13a      	bne.n	8002262 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	f022 0201 	bic.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 f8e0 	bl	80023d6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	f042 020e 	orr.w	r2, r2, #14
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e00f      	b.n	8002250 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	f022 0204 	bic.w	r2, r2, #4
 800223e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	f042 020a 	orr.w	r2, r2, #10
 800224e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	e005      	b.n	800226e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800226a:	2302      	movs	r3, #2
 800226c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800226e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002294:	f003 031c 	and.w	r3, r3, #28
 8002298:	2204      	movs	r2, #4
 800229a:	409a      	lsls	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4013      	ands	r3, r2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d026      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x7a>
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d021      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d107      	bne.n	80022cc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	f022 0204 	bic.w	r2, r2, #4
 80022ca:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022d4:	f002 021c 	and.w	r2, r2, #28
 80022d8:	2104      	movs	r1, #4
 80022da:	fa01 f202 	lsl.w	r2, r1, r2
 80022de:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d071      	beq.n	80023cc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80022f0:	e06c      	b.n	80023cc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f003 031c 	and.w	r3, r3, #28
 80022fa:	2202      	movs	r2, #2
 80022fc:	409a      	lsls	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4013      	ands	r3, r2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d02e      	beq.n	8002364 <HAL_DMA_IRQHandler+0xec>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d029      	beq.n	8002364 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10b      	bne.n	8002336 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	f022 020a 	bic.w	r2, r2, #10
 800232c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800233e:	f002 021c 	and.w	r2, r2, #28
 8002342:	2102      	movs	r1, #2
 8002344:	fa01 f202 	lsl.w	r2, r1, r2
 8002348:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d038      	beq.n	80023cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002362:	e033      	b.n	80023cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002368:	f003 031c 	and.w	r3, r3, #28
 800236c:	2208      	movs	r2, #8
 800236e:	409a      	lsls	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d02a      	beq.n	80023ce <HAL_DMA_IRQHandler+0x156>
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d025      	beq.n	80023ce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	f022 020e 	bic.w	r2, r2, #14
 8002390:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800239a:	f002 021c 	and.w	r2, r2, #28
 800239e:	2101      	movs	r1, #1
 80023a0:	fa01 f202 	lsl.w	r2, r1, r2
 80023a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d004      	beq.n	80023ce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
}
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b085      	sub	sp, #20
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023ec:	f002 021c 	and.w	r2, r2, #28
 80023f0:	2101      	movs	r1, #1
 80023f2:	fa01 f202 	lsl.w	r2, r1, r2
 80023f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b10      	cmp	r3, #16
 8002406:	d108      	bne.n	800241a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002418:	e007      	b.n	800242a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	60da      	str	r2, [r3, #12]
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
	...

08002438 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002446:	e17f      	b.n	8002748 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	2101      	movs	r1, #1
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	4013      	ands	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8171 	beq.w	8002742 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x38>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b12      	cmp	r3, #18
 800246e:	d123      	bne.n	80024b8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	08da      	lsrs	r2, r3, #3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3208      	adds	r2, #8
 8002478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	220f      	movs	r2, #15
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	08da      	lsrs	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3208      	adds	r2, #8
 80024b2:	6939      	ldr	r1, [r7, #16]
 80024b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0203 	and.w	r2, r3, #3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d00b      	beq.n	800250c <HAL_GPIO_Init+0xd4>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d007      	beq.n	800250c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002500:	2b11      	cmp	r3, #17
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b12      	cmp	r3, #18
 800250a:	d130      	bne.n	800256e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002542:	2201      	movs	r2, #1
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	f003 0201 	and.w	r2, r3, #1
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b03      	cmp	r3, #3
 8002578:	d118      	bne.n	80025ac <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002580:	2201      	movs	r2, #1
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	08db      	lsrs	r3, r3, #3
 8002596:	f003 0201 	and.w	r2, r3, #1
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80ac 	beq.w	8002742 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	4a5e      	ldr	r2, [pc, #376]	; (8002764 <HAL_GPIO_Init+0x32c>)
 80025ec:	4b5d      	ldr	r3, [pc, #372]	; (8002764 <HAL_GPIO_Init+0x32c>)
 80025ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6613      	str	r3, [r2, #96]	; 0x60
 80025f6:	4b5b      	ldr	r3, [pc, #364]	; (8002764 <HAL_GPIO_Init+0x32c>)
 80025f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002602:	4a59      	ldr	r2, [pc, #356]	; (8002768 <HAL_GPIO_Init+0x330>)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	3302      	adds	r3, #2
 800260a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	220f      	movs	r2, #15
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4013      	ands	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800262c:	d025      	beq.n	800267a <HAL_GPIO_Init+0x242>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4e      	ldr	r2, [pc, #312]	; (800276c <HAL_GPIO_Init+0x334>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01f      	beq.n	8002676 <HAL_GPIO_Init+0x23e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a4d      	ldr	r2, [pc, #308]	; (8002770 <HAL_GPIO_Init+0x338>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d019      	beq.n	8002672 <HAL_GPIO_Init+0x23a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a4c      	ldr	r2, [pc, #304]	; (8002774 <HAL_GPIO_Init+0x33c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <HAL_GPIO_Init+0x236>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a4b      	ldr	r2, [pc, #300]	; (8002778 <HAL_GPIO_Init+0x340>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00d      	beq.n	800266a <HAL_GPIO_Init+0x232>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4a      	ldr	r2, [pc, #296]	; (800277c <HAL_GPIO_Init+0x344>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d007      	beq.n	8002666 <HAL_GPIO_Init+0x22e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a49      	ldr	r2, [pc, #292]	; (8002780 <HAL_GPIO_Init+0x348>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d101      	bne.n	8002662 <HAL_GPIO_Init+0x22a>
 800265e:	2306      	movs	r3, #6
 8002660:	e00c      	b.n	800267c <HAL_GPIO_Init+0x244>
 8002662:	2307      	movs	r3, #7
 8002664:	e00a      	b.n	800267c <HAL_GPIO_Init+0x244>
 8002666:	2305      	movs	r3, #5
 8002668:	e008      	b.n	800267c <HAL_GPIO_Init+0x244>
 800266a:	2304      	movs	r3, #4
 800266c:	e006      	b.n	800267c <HAL_GPIO_Init+0x244>
 800266e:	2303      	movs	r3, #3
 8002670:	e004      	b.n	800267c <HAL_GPIO_Init+0x244>
 8002672:	2302      	movs	r3, #2
 8002674:	e002      	b.n	800267c <HAL_GPIO_Init+0x244>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_GPIO_Init+0x244>
 800267a:	2300      	movs	r3, #0
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	f002 0203 	and.w	r2, r2, #3
 8002682:	0092      	lsls	r2, r2, #2
 8002684:	4093      	lsls	r3, r2
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800268c:	4936      	ldr	r1, [pc, #216]	; (8002768 <HAL_GPIO_Init+0x330>)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	089b      	lsrs	r3, r3, #2
 8002692:	3302      	adds	r3, #2
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800269a:	4b3a      	ldr	r3, [pc, #232]	; (8002784 <HAL_GPIO_Init+0x34c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026be:	4a31      	ldr	r2, [pc, #196]	; (8002784 <HAL_GPIO_Init+0x34c>)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80026c4:	4b2f      	ldr	r3, [pc, #188]	; (8002784 <HAL_GPIO_Init+0x34c>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026e8:	4a26      	ldr	r2, [pc, #152]	; (8002784 <HAL_GPIO_Init+0x34c>)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ee:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_GPIO_Init+0x34c>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002712:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <HAL_GPIO_Init+0x34c>)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002718:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <HAL_GPIO_Init+0x34c>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	43db      	mvns	r3, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800273c:	4a11      	ldr	r2, [pc, #68]	; (8002784 <HAL_GPIO_Init+0x34c>)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	3301      	adds	r3, #1
 8002746:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	f47f ae78 	bne.w	8002448 <HAL_GPIO_Init+0x10>
  }
}
 8002758:	bf00      	nop
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40021000 	.word	0x40021000
 8002768:	40010000 	.word	0x40010000
 800276c:	48000400 	.word	0x48000400
 8002770:	48000800 	.word	0x48000800
 8002774:	48000c00 	.word	0x48000c00
 8002778:	48001000 	.word	0x48001000
 800277c:	48001400 	.word	0x48001400
 8002780:	48001800 	.word	0x48001800
 8002784:	40010400 	.word	0x40010400

08002788 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002796:	e0cd      	b.n	8002934 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002798:	2201      	movs	r2, #1
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	409a      	lsls	r2, r3
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80c1 	beq.w	800292e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	2103      	movs	r1, #3
 80027b6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	08da      	lsrs	r2, r3, #3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	08d9      	lsrs	r1, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3108      	adds	r1, #8
 80027cc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	200f      	movs	r0, #15
 80027da:	fa00 f303 	lsl.w	r3, r0, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	4019      	ands	r1, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3208      	adds	r2, #8
 80027e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	2103      	movs	r1, #3
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	401a      	ands	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	2101      	movs	r1, #1
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	401a      	ands	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	2103      	movs	r1, #3
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	401a      	ands	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282e:	2101      	movs	r1, #1
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	401a      	ands	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800283e:	4a44      	ldr	r2, [pc, #272]	; (8002950 <HAL_GPIO_DeInit+0x1c8>)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	3302      	adds	r3, #2
 8002846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	220f      	movs	r2, #15
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4013      	ands	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002866:	d025      	beq.n	80028b4 <HAL_GPIO_DeInit+0x12c>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a3a      	ldr	r2, [pc, #232]	; (8002954 <HAL_GPIO_DeInit+0x1cc>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d01f      	beq.n	80028b0 <HAL_GPIO_DeInit+0x128>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a39      	ldr	r2, [pc, #228]	; (8002958 <HAL_GPIO_DeInit+0x1d0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d019      	beq.n	80028ac <HAL_GPIO_DeInit+0x124>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a38      	ldr	r2, [pc, #224]	; (800295c <HAL_GPIO_DeInit+0x1d4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d013      	beq.n	80028a8 <HAL_GPIO_DeInit+0x120>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a37      	ldr	r2, [pc, #220]	; (8002960 <HAL_GPIO_DeInit+0x1d8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d00d      	beq.n	80028a4 <HAL_GPIO_DeInit+0x11c>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a36      	ldr	r2, [pc, #216]	; (8002964 <HAL_GPIO_DeInit+0x1dc>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d007      	beq.n	80028a0 <HAL_GPIO_DeInit+0x118>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a35      	ldr	r2, [pc, #212]	; (8002968 <HAL_GPIO_DeInit+0x1e0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d101      	bne.n	800289c <HAL_GPIO_DeInit+0x114>
 8002898:	2306      	movs	r3, #6
 800289a:	e00c      	b.n	80028b6 <HAL_GPIO_DeInit+0x12e>
 800289c:	2307      	movs	r3, #7
 800289e:	e00a      	b.n	80028b6 <HAL_GPIO_DeInit+0x12e>
 80028a0:	2305      	movs	r3, #5
 80028a2:	e008      	b.n	80028b6 <HAL_GPIO_DeInit+0x12e>
 80028a4:	2304      	movs	r3, #4
 80028a6:	e006      	b.n	80028b6 <HAL_GPIO_DeInit+0x12e>
 80028a8:	2303      	movs	r3, #3
 80028aa:	e004      	b.n	80028b6 <HAL_GPIO_DeInit+0x12e>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e002      	b.n	80028b6 <HAL_GPIO_DeInit+0x12e>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <HAL_GPIO_DeInit+0x12e>
 80028b4:	2300      	movs	r3, #0
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	f002 0203 	and.w	r2, r2, #3
 80028bc:	0092      	lsls	r2, r2, #2
 80028be:	fa03 f202 	lsl.w	r2, r3, r2
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d132      	bne.n	800292e <HAL_GPIO_DeInit+0x1a6>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	220f      	movs	r2, #15
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80028d8:	481d      	ldr	r0, [pc, #116]	; (8002950 <HAL_GPIO_DeInit+0x1c8>)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	491c      	ldr	r1, [pc, #112]	; (8002950 <HAL_GPIO_DeInit+0x1c8>)
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	0892      	lsrs	r2, r2, #2
 80028e4:	3202      	adds	r2, #2
 80028e6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	43d2      	mvns	r2, r2
 80028ee:	400a      	ands	r2, r1
 80028f0:	3302      	adds	r3, #2
 80028f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80028f6:	491d      	ldr	r1, [pc, #116]	; (800296c <HAL_GPIO_DeInit+0x1e4>)
 80028f8:	4b1c      	ldr	r3, [pc, #112]	; (800296c <HAL_GPIO_DeInit+0x1e4>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	43db      	mvns	r3, r3
 8002900:	4013      	ands	r3, r2
 8002902:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002904:	4919      	ldr	r1, [pc, #100]	; (800296c <HAL_GPIO_DeInit+0x1e4>)
 8002906:	4b19      	ldr	r3, [pc, #100]	; (800296c <HAL_GPIO_DeInit+0x1e4>)
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	43db      	mvns	r3, r3
 800290e:	4013      	ands	r3, r2
 8002910:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002912:	4916      	ldr	r1, [pc, #88]	; (800296c <HAL_GPIO_DeInit+0x1e4>)
 8002914:	4b15      	ldr	r3, [pc, #84]	; (800296c <HAL_GPIO_DeInit+0x1e4>)
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	43db      	mvns	r3, r3
 800291c:	4013      	ands	r3, r2
 800291e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002920:	4912      	ldr	r1, [pc, #72]	; (800296c <HAL_GPIO_DeInit+0x1e4>)
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_GPIO_DeInit+0x1e4>)
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	43db      	mvns	r3, r3
 800292a:	4013      	ands	r3, r2
 800292c:	60cb      	str	r3, [r1, #12]
      }
    }

    position++;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3301      	adds	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	f47f af2b 	bne.w	8002798 <HAL_GPIO_DeInit+0x10>
  }
}
 8002942:	bf00      	nop
 8002944:	371c      	adds	r7, #28
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40010000 	.word	0x40010000
 8002954:	48000400 	.word	0x48000400
 8002958:	48000800 	.word	0x48000800
 800295c:	48000c00 	.word	0x48000c00
 8002960:	48001000 	.word	0x48001000
 8002964:	48001400 	.word	0x48001400
 8002968:	48001800 	.word	0x48001800
 800296c:	40010400 	.word	0x40010400

08002970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	807b      	strh	r3, [r7, #2]
 800297c:	4613      	mov	r3, r2
 800297e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002980:	787b      	ldrb	r3, [r7, #1]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002986:	887a      	ldrh	r2, [r7, #2]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800298c:	e002      	b.n	8002994 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800298e:	887a      	ldrh	r2, [r7, #2]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e080      	b.n	8002ab4 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f004 f836 	bl	8006a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2224      	movs	r2, #36	; 0x24
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6852      	ldr	r2, [r2, #4]
 80029ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	6892      	ldr	r2, [r2, #8]
 80029fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d107      	bne.n	8002a1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6892      	ldr	r2, [r2, #8]
 8002a12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	e006      	b.n	8002a28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6892      	ldr	r2, [r2, #8]
 8002a22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d104      	bne.n	8002a3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	68d2      	ldr	r2, [r2, #12]
 8002a58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6911      	ldr	r1, [r2, #16]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6952      	ldr	r2, [r2, #20]
 8002a6a:	4311      	orrs	r1, r2
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6992      	ldr	r2, [r2, #24]
 8002a70:	0212      	lsls	r2, r2, #8
 8002a72:	430a      	orrs	r2, r1
 8002a74:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	69d1      	ldr	r1, [r2, #28]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6a12      	ldr	r2, [r2, #32]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	f042 0201 	orr.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e021      	b.n	8002b12 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2224      	movs	r2, #36	; 0x24
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	f022 0201 	bic.w	r2, r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f003 ffea 	bl	8006ac0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	4608      	mov	r0, r1
 8002b26:	4611      	mov	r1, r2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	817b      	strh	r3, [r7, #10]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	813b      	strh	r3, [r7, #8]
 8002b32:	4613      	mov	r3, r2
 8002b34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	f040 80f9 	bne.w	8002d36 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_I2C_Mem_Write+0x34>
 8002b4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d105      	bne.n	8002b5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0ed      	b.n	8002d38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_I2C_Mem_Write+0x4e>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e0e6      	b.n	8002d38 <HAL_I2C_Mem_Write+0x21c>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b72:	f7fe fdcf 	bl	8001714 <HAL_GetTick>
 8002b76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2319      	movs	r3, #25
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fad1 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0d1      	b.n	8002d38 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2221      	movs	r2, #33	; 0x21
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2240      	movs	r2, #64	; 0x40
 8002ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a3a      	ldr	r2, [r7, #32]
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bbc:	88f8      	ldrh	r0, [r7, #6]
 8002bbe:	893a      	ldrh	r2, [r7, #8]
 8002bc0:	8979      	ldrh	r1, [r7, #10]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	4603      	mov	r3, r0
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f9e1 	bl	8002f94 <I2C_RequestMemoryWrite>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0a9      	b.n	8002d38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2bff      	cmp	r3, #255	; 0xff
 8002bec:	d90e      	bls.n	8002c0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	22ff      	movs	r2, #255	; 0xff
 8002bf2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	8979      	ldrh	r1, [r7, #10]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 fbb3 	bl	8003370 <I2C_TransferConfig>
 8002c0a:	e00f      	b.n	8002c2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	8979      	ldrh	r1, [r7, #10]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 fba2 	bl	8003370 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fabb 	bl	80031ac <I2C_WaitOnTXISFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e07b      	b.n	8002d38 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c48:	7812      	ldrb	r2, [r2, #0]
 8002c4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d034      	beq.n	8002ce4 <HAL_I2C_Mem_Write+0x1c8>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d130      	bne.n	8002ce4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 fa4d 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e04d      	b.n	8002d38 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2bff      	cmp	r3, #255	; 0xff
 8002ca4:	d90e      	bls.n	8002cc4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	22ff      	movs	r2, #255	; 0xff
 8002caa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	8979      	ldrh	r1, [r7, #10]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 fb57 	bl	8003370 <I2C_TransferConfig>
 8002cc2:	e00f      	b.n	8002ce4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	8979      	ldrh	r1, [r7, #10]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 fb46 	bl	8003370 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d19e      	bne.n	8002c2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 fa9a 	bl	800322c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e01a      	b.n	8002d38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2220      	movs	r2, #32
 8002d08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_I2C_Mem_Write+0x224>)
 8002d16:	400b      	ands	r3, r1
 8002d18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
  }
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	fe00e800 	.word	0xfe00e800

08002d44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	4611      	mov	r1, r2
 8002d50:	461a      	mov	r2, r3
 8002d52:	4603      	mov	r3, r0
 8002d54:	817b      	strh	r3, [r7, #10]
 8002d56:	460b      	mov	r3, r1
 8002d58:	813b      	strh	r3, [r7, #8]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	f040 80fd 	bne.w	8002f66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_I2C_Mem_Read+0x34>
 8002d72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d105      	bne.n	8002d84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0f1      	b.n	8002f68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_I2C_Mem_Read+0x4e>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e0ea      	b.n	8002f68 <HAL_I2C_Mem_Read+0x224>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d9a:	f7fe fcbb 	bl	8001714 <HAL_GetTick>
 8002d9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	2319      	movs	r3, #25
 8002da6:	2201      	movs	r2, #1
 8002da8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f9bd 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0d5      	b.n	8002f68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2222      	movs	r2, #34	; 0x22
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2240      	movs	r2, #64	; 0x40
 8002dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a3a      	ldr	r2, [r7, #32]
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002de4:	88f8      	ldrh	r0, [r7, #6]
 8002de6:	893a      	ldrh	r2, [r7, #8]
 8002de8:	8979      	ldrh	r1, [r7, #10]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	9301      	str	r3, [sp, #4]
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	4603      	mov	r3, r0
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f921 	bl	800303c <I2C_RequestMemoryRead>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0ad      	b.n	8002f68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2bff      	cmp	r3, #255	; 0xff
 8002e14:	d90e      	bls.n	8002e34 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	22ff      	movs	r2, #255	; 0xff
 8002e1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	8979      	ldrh	r1, [r7, #10]
 8002e24:	4b52      	ldr	r3, [pc, #328]	; (8002f70 <HAL_I2C_Mem_Read+0x22c>)
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fa9f 	bl	8003370 <I2C_TransferConfig>
 8002e32:	e00f      	b.n	8002e54 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	8979      	ldrh	r1, [r7, #10]
 8002e46:	4b4a      	ldr	r3, [pc, #296]	; (8002f70 <HAL_I2C_Mem_Read+0x22c>)
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fa8e 	bl	8003370 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2104      	movs	r1, #4
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f964 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e07c      	b.n	8002f68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d034      	beq.n	8002f14 <HAL_I2C_Mem_Read+0x1d0>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d130      	bne.n	8002f14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f935 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e04d      	b.n	8002f68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2bff      	cmp	r3, #255	; 0xff
 8002ed4:	d90e      	bls.n	8002ef4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	22ff      	movs	r2, #255	; 0xff
 8002eda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	8979      	ldrh	r1, [r7, #10]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fa3f 	bl	8003370 <I2C_TransferConfig>
 8002ef2:	e00f      	b.n	8002f14 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	8979      	ldrh	r1, [r7, #10]
 8002f06:	2300      	movs	r3, #0
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fa2e 	bl	8003370 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d19a      	bne.n	8002e54 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f982 	bl	800322c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e01a      	b.n	8002f68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2220      	movs	r2, #32
 8002f38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6859      	ldr	r1, [r3, #4]
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_I2C_Mem_Read+0x230>)
 8002f46:	400b      	ands	r3, r1
 8002f48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	e000      	b.n	8002f68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f66:	2302      	movs	r3, #2
  }
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	80002400 	.word	0x80002400
 8002f74:	fe00e800 	.word	0xfe00e800

08002f78 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f86:	b2db      	uxtb	r3, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	817b      	strh	r3, [r7, #10]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	813b      	strh	r3, [r7, #8]
 8002faa:	4613      	mov	r3, r2
 8002fac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fae:	88fb      	ldrh	r3, [r7, #6]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	8979      	ldrh	r1, [r7, #10]
 8002fb4:	4b20      	ldr	r3, [pc, #128]	; (8003038 <I2C_RequestMemoryWrite+0xa4>)
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f9d7 	bl	8003370 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	69b9      	ldr	r1, [r7, #24]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f8f0 	bl	80031ac <I2C_WaitOnTXISFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e02c      	b.n	8003030 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d105      	bne.n	8002fe8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	893a      	ldrh	r2, [r7, #8]
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	629a      	str	r2, [r3, #40]	; 0x28
 8002fe6:	e015      	b.n	8003014 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	893a      	ldrh	r2, [r7, #8]
 8002fee:	0a12      	lsrs	r2, r2, #8
 8002ff0:	b292      	uxth	r2, r2
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	69b9      	ldr	r1, [r7, #24]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f8d6 	bl	80031ac <I2C_WaitOnTXISFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e012      	b.n	8003030 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	893a      	ldrh	r2, [r7, #8]
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2200      	movs	r2, #0
 800301c:	2180      	movs	r1, #128	; 0x80
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f884 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	80002000 	.word	0x80002000

0800303c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	4608      	mov	r0, r1
 8003046:	4611      	mov	r1, r2
 8003048:	461a      	mov	r2, r3
 800304a:	4603      	mov	r3, r0
 800304c:	817b      	strh	r3, [r7, #10]
 800304e:	460b      	mov	r3, r1
 8003050:	813b      	strh	r3, [r7, #8]
 8003052:	4613      	mov	r3, r2
 8003054:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	8979      	ldrh	r1, [r7, #10]
 800305c:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <I2C_RequestMemoryRead+0xa4>)
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	2300      	movs	r3, #0
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f984 	bl	8003370 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	69b9      	ldr	r1, [r7, #24]
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f89d 	bl	80031ac <I2C_WaitOnTXISFlagUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e02c      	b.n	80030d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d105      	bne.n	800308e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	893a      	ldrh	r2, [r7, #8]
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	629a      	str	r2, [r3, #40]	; 0x28
 800308c:	e015      	b.n	80030ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	893a      	ldrh	r2, [r7, #8]
 8003094:	0a12      	lsrs	r2, r2, #8
 8003096:	b292      	uxth	r2, r2
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800309c:	69fa      	ldr	r2, [r7, #28]
 800309e:	69b9      	ldr	r1, [r7, #24]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f883 	bl	80031ac <I2C_WaitOnTXISFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e012      	b.n	80030d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	893a      	ldrh	r2, [r7, #8]
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	2200      	movs	r2, #0
 80030c2:	2140      	movs	r1, #64	; 0x40
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f831 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	80002000 	.word	0x80002000

080030e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d103      	bne.n	8003102 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2200      	movs	r2, #0
 8003100:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	d007      	beq.n	8003120 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	6992      	ldr	r2, [r2, #24]
 800311a:	f042 0201 	orr.w	r2, r2, #1
 800311e:	619a      	str	r2, [r3, #24]
  }
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800313c:	e022      	b.n	8003184 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d01e      	beq.n	8003184 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003146:	f7fe fae5 	bl	8001714 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	1ad2      	subs	r2, r2, r3
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d802      	bhi.n	800315c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d113      	bne.n	8003184 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	f043 0220 	orr.w	r2, r3, #32
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e00f      	b.n	80031a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699a      	ldr	r2, [r3, #24]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	401a      	ands	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	429a      	cmp	r2, r3
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	461a      	mov	r2, r3
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d0cd      	beq.n	800313e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031b8:	e02c      	b.n	8003214 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f870 	bl	80032a4 <I2C_IsAcknowledgeFailed>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e02a      	b.n	8003224 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d01e      	beq.n	8003214 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d6:	f7fe fa9d 	bl	8001714 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	1ad2      	subs	r2, r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d802      	bhi.n	80031ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d113      	bne.n	8003214 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e007      	b.n	8003224 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b02      	cmp	r3, #2
 8003220:	d1cb      	bne.n	80031ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003238:	e028      	b.n	800328c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f830 	bl	80032a4 <I2C_IsAcknowledgeFailed>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e026      	b.n	800329c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324e:	f7fe fa61 	bl	8001714 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	1ad2      	subs	r2, r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	429a      	cmp	r2, r3
 800325c:	d802      	bhi.n	8003264 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d113      	bne.n	800328c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e007      	b.n	800329c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b20      	cmp	r3, #32
 8003298:	d1cf      	bne.n	800323a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b10      	cmp	r3, #16
 80032bc:	d151      	bne.n	8003362 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032be:	e022      	b.n	8003306 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c6:	d01e      	beq.n	8003306 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c8:	f7fe fa24 	bl	8001714 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	1ad2      	subs	r2, r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d802      	bhi.n	80032de <I2C_IsAcknowledgeFailed+0x3a>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d113      	bne.n	8003306 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	f043 0220 	orr.w	r2, r3, #32
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e02e      	b.n	8003364 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b20      	cmp	r3, #32
 8003312:	d1d5      	bne.n	80032c0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2210      	movs	r2, #16
 800331a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2220      	movs	r2, #32
 8003322:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f7ff fedd 	bl	80030e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6859      	ldr	r1, [r3, #4]
 8003334:	4b0d      	ldr	r3, [pc, #52]	; (800336c <I2C_IsAcknowledgeFailed+0xc8>)
 8003336:	400b      	ands	r3, r1
 8003338:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	f043 0204 	orr.w	r2, r3, #4
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	fe00e800 	.word	0xfe00e800

08003370 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	460b      	mov	r3, r1
 800337c:	817b      	strh	r3, [r7, #10]
 800337e:	4613      	mov	r3, r2
 8003380:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6859      	ldr	r1, [r3, #4]
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	0d5b      	lsrs	r3, r3, #21
 8003390:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <I2C_TransferConfig+0x54>)
 8003396:	4303      	orrs	r3, r0
 8003398:	43db      	mvns	r3, r3
 800339a:	4019      	ands	r1, r3
 800339c:	897b      	ldrh	r3, [r7, #10]
 800339e:	f3c3 0009 	ubfx	r0, r3, #0, #10
 80033a2:	7a7b      	ldrb	r3, [r7, #9]
 80033a4:	041b      	lsls	r3, r3, #16
 80033a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033aa:	4318      	orrs	r0, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4318      	orrs	r0, r3
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	4303      	orrs	r3, r0
 80033b4:	430b      	orrs	r3, r1
 80033b6:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	03ff63ff 	.word	0x03ff63ff

080033c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033cc:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40007000 	.word	0x40007000

080033e4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80033e8:	4a05      	ldr	r2, [pc, #20]	; (8003400 <HAL_PWREx_EnableVddIO2+0x1c>)
 80033ea:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_PWREx_EnableVddIO2+0x1c>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033f2:	6053      	str	r3, [r2, #4]
}
 80033f4:	bf00      	nop
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40007000 	.word	0x40007000

08003404 <HAL_PWREx_DisableVddIO2>:
/**
  * @brief Disable VDDIO2 supply.
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003408:	4a05      	ldr	r2, [pc, #20]	; (8003420 <HAL_PWREx_DisableVddIO2+0x1c>)
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_PWREx_DisableVddIO2+0x1c>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003412:	6053      	str	r3, [r2, #4]
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40007000 	.word	0x40007000

08003424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e353      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003436:	4ba3      	ldr	r3, [pc, #652]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003440:	4ba0      	ldr	r3, [pc, #640]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 80df 	beq.w	8003616 <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <HAL_RCC_OscConfig+0x4a>
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b0c      	cmp	r3, #12
 8003462:	f040 8086 	bne.w	8003572 <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b01      	cmp	r3, #1
 800346a:	f040 8082 	bne.w	8003572 <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800346e:	4b95      	ldr	r3, [pc, #596]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_RCC_OscConfig+0x62>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e32b      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1a      	ldr	r2, [r3, #32]
 800348a:	4b8e      	ldr	r3, [pc, #568]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d004      	beq.n	80034a0 <HAL_RCC_OscConfig+0x7c>
 8003496:	4b8b      	ldr	r3, [pc, #556]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800349e:	e005      	b.n	80034ac <HAL_RCC_OscConfig+0x88>
 80034a0:	4b88      	ldr	r3, [pc, #544]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 80034a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a6:	091b      	lsrs	r3, r3, #4
 80034a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d923      	bls.n	80034f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fccb 	bl	8003e50 <RCC_SetFlashLatencyFromMSIRange>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e30c      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034c4:	4a7f      	ldr	r2, [pc, #508]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 80034c6:	4b7f      	ldr	r3, [pc, #508]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f043 0308 	orr.w	r3, r3, #8
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	497c      	ldr	r1, [pc, #496]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 80034d2:	4b7c      	ldr	r3, [pc, #496]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034e2:	4978      	ldr	r1, [pc, #480]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 80034e4:	4b77      	ldr	r3, [pc, #476]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	021b      	lsls	r3, r3, #8
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]
 80034f6:	e022      	b.n	800353e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034f8:	4a72      	ldr	r2, [pc, #456]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 80034fa:	4b72      	ldr	r3, [pc, #456]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f043 0308 	orr.w	r3, r3, #8
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	496f      	ldr	r1, [pc, #444]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 8003506:	4b6f      	ldr	r3, [pc, #444]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003516:	496b      	ldr	r1, [pc, #428]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 8003518:	4b6a      	ldr	r3, [pc, #424]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	4313      	orrs	r3, r2
 8003528:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fc8e 	bl	8003e50 <RCC_SetFlashLatencyFromMSIRange>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e2cf      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800353e:	f000 fbb3 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8003542:	4601      	mov	r1, r0
 8003544:	4b5f      	ldr	r3, [pc, #380]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	091b      	lsrs	r3, r3, #4
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	4a5e      	ldr	r2, [pc, #376]	; (80036c8 <HAL_RCC_OscConfig+0x2a4>)
 8003550:	5cd3      	ldrb	r3, [r2, r3]
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	fa21 f303 	lsr.w	r3, r1, r3
 800355a:	4a5c      	ldr	r2, [pc, #368]	; (80036cc <HAL_RCC_OscConfig+0x2a8>)
 800355c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800355e:	200f      	movs	r0, #15
 8003560:	f7fe f8a6 	bl	80016b0 <HAL_InitTick>
 8003564:	4603      	mov	r3, r0
 8003566:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d052      	beq.n	8003614 <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	e2b5      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d032      	beq.n	80035e0 <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800357a:	4a52      	ldr	r2, [pc, #328]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 800357c:	4b51      	ldr	r3, [pc, #324]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003586:	f7fe f8c5 	bl	8001714 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800358e:	f7fe f8c1 	bl	8001714 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e29e      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035a0:	4b48      	ldr	r3, [pc, #288]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ac:	4a45      	ldr	r2, [pc, #276]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 80035ae:	4b45      	ldr	r3, [pc, #276]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f043 0308 	orr.w	r3, r3, #8
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4942      	ldr	r1, [pc, #264]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 80035ba:	4b42      	ldr	r3, [pc, #264]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ca:	493e      	ldr	r1, [pc, #248]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 80035cc:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	021b      	lsls	r3, r3, #8
 80035da:	4313      	orrs	r3, r2
 80035dc:	604b      	str	r3, [r1, #4]
 80035de:	e01a      	b.n	8003616 <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035e0:	4a38      	ldr	r2, [pc, #224]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 80035e2:	4b38      	ldr	r3, [pc, #224]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035ec:	f7fe f892 	bl	8001714 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035f4:	f7fe f88e 	bl	8001714 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e26b      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003606:	4b2f      	ldr	r3, [pc, #188]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x1d0>
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003614:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d072      	beq.n	8003708 <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b08      	cmp	r3, #8
 8003626:	d005      	beq.n	8003634 <HAL_RCC_OscConfig+0x210>
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2b0c      	cmp	r3, #12
 800362c:	d10e      	bne.n	800364c <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d10b      	bne.n	800364c <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003634:	4b23      	ldr	r3, [pc, #140]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d062      	beq.n	8003706 <HAL_RCC_OscConfig+0x2e2>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d15e      	bne.n	8003706 <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e248      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003654:	d106      	bne.n	8003664 <HAL_RCC_OscConfig+0x240>
 8003656:	4a1b      	ldr	r2, [pc, #108]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 8003658:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	e01d      	b.n	80036a0 <HAL_RCC_OscConfig+0x27c>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800366c:	d10c      	bne.n	8003688 <HAL_RCC_OscConfig+0x264>
 800366e:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	4a12      	ldr	r2, [pc, #72]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 800367c:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	e00b      	b.n	80036a0 <HAL_RCC_OscConfig+0x27c>
 8003688:	4a0e      	ldr	r2, [pc, #56]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 800368a:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	4a0b      	ldr	r2, [pc, #44]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_OscConfig+0x2a0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800369e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01a      	beq.n	80036de <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7fe f834 	bl	8001714 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ae:	e00f      	b.n	80036d0 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b0:	f7fe f830 	bl	8001714 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b64      	cmp	r3, #100	; 0x64
 80036bc:	d908      	bls.n	80036d0 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e20d      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000
 80036c8:	0800851c 	.word	0x0800851c
 80036cc:	2000003c 	.word	0x2000003c
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036d0:	4bae      	ldr	r3, [pc, #696]	; (800398c <HAL_RCC_OscConfig+0x568>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0e9      	beq.n	80036b0 <HAL_RCC_OscConfig+0x28c>
 80036dc:	e014      	b.n	8003708 <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036de:	f7fe f819 	bl	8001714 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e6:	f7fe f815 	bl	8001714 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b64      	cmp	r3, #100	; 0x64
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e1f2      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036f8:	4ba4      	ldr	r3, [pc, #656]	; (800398c <HAL_RCC_OscConfig+0x568>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1f0      	bne.n	80036e6 <HAL_RCC_OscConfig+0x2c2>
 8003704:	e000      	b.n	8003708 <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003706:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d060      	beq.n	80037d6 <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2b04      	cmp	r3, #4
 8003718:	d005      	beq.n	8003726 <HAL_RCC_OscConfig+0x302>
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	2b0c      	cmp	r3, #12
 800371e:	d119      	bne.n	8003754 <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d116      	bne.n	8003754 <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003726:	4b99      	ldr	r3, [pc, #612]	; (800398c <HAL_RCC_OscConfig+0x568>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_RCC_OscConfig+0x31a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e1cf      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373e:	4993      	ldr	r1, [pc, #588]	; (800398c <HAL_RCC_OscConfig+0x568>)
 8003740:	4b92      	ldr	r3, [pc, #584]	; (800398c <HAL_RCC_OscConfig+0x568>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	061b      	lsls	r3, r3, #24
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003752:	e040      	b.n	80037d6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d023      	beq.n	80037a4 <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800375c:	4a8b      	ldr	r2, [pc, #556]	; (800398c <HAL_RCC_OscConfig+0x568>)
 800375e:	4b8b      	ldr	r3, [pc, #556]	; (800398c <HAL_RCC_OscConfig+0x568>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fd ffd4 	bl	8001714 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003770:	f7fd ffd0 	bl	8001714 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e1ad      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003782:	4b82      	ldr	r3, [pc, #520]	; (800398c <HAL_RCC_OscConfig+0x568>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378e:	497f      	ldr	r1, [pc, #508]	; (800398c <HAL_RCC_OscConfig+0x568>)
 8003790:	4b7e      	ldr	r3, [pc, #504]	; (800398c <HAL_RCC_OscConfig+0x568>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	061b      	lsls	r3, r3, #24
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
 80037a2:	e018      	b.n	80037d6 <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a4:	4a79      	ldr	r2, [pc, #484]	; (800398c <HAL_RCC_OscConfig+0x568>)
 80037a6:	4b79      	ldr	r3, [pc, #484]	; (800398c <HAL_RCC_OscConfig+0x568>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7fd ffb0 	bl	8001714 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b8:	f7fd ffac 	bl	8001714 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e189      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037ca:	4b70      	ldr	r3, [pc, #448]	; (800398c <HAL_RCC_OscConfig+0x568>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d03c      	beq.n	800385c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01c      	beq.n	8003824 <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ea:	4a68      	ldr	r2, [pc, #416]	; (800398c <HAL_RCC_OscConfig+0x568>)
 80037ec:	4b67      	ldr	r3, [pc, #412]	; (800398c <HAL_RCC_OscConfig+0x568>)
 80037ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fa:	f7fd ff8b 	bl	8001714 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003802:	f7fd ff87 	bl	8001714 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e164      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003814:	4b5d      	ldr	r3, [pc, #372]	; (800398c <HAL_RCC_OscConfig+0x568>)
 8003816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0ef      	beq.n	8003802 <HAL_RCC_OscConfig+0x3de>
 8003822:	e01b      	b.n	800385c <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003824:	4a59      	ldr	r2, [pc, #356]	; (800398c <HAL_RCC_OscConfig+0x568>)
 8003826:	4b59      	ldr	r3, [pc, #356]	; (800398c <HAL_RCC_OscConfig+0x568>)
 8003828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003834:	f7fd ff6e 	bl	8001714 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800383c:	f7fd ff6a 	bl	8001714 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e147      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800384e:	4b4f      	ldr	r3, [pc, #316]	; (800398c <HAL_RCC_OscConfig+0x568>)
 8003850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1ef      	bne.n	800383c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80a5 	beq.w	80039b4 <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 800386a:	2300      	movs	r3, #0
 800386c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800386e:	4b47      	ldr	r3, [pc, #284]	; (800398c <HAL_RCC_OscConfig+0x568>)
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10d      	bne.n	8003896 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387a:	4a44      	ldr	r2, [pc, #272]	; (800398c <HAL_RCC_OscConfig+0x568>)
 800387c:	4b43      	ldr	r3, [pc, #268]	; (800398c <HAL_RCC_OscConfig+0x568>)
 800387e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003884:	6593      	str	r3, [r2, #88]	; 0x58
 8003886:	4b41      	ldr	r3, [pc, #260]	; (800398c <HAL_RCC_OscConfig+0x568>)
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388e:	60bb      	str	r3, [r7, #8]
 8003890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003892:	2301      	movs	r3, #1
 8003894:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003896:	4b3e      	ldr	r3, [pc, #248]	; (8003990 <HAL_RCC_OscConfig+0x56c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d118      	bne.n	80038d4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038a2:	4a3b      	ldr	r2, [pc, #236]	; (8003990 <HAL_RCC_OscConfig+0x56c>)
 80038a4:	4b3a      	ldr	r3, [pc, #232]	; (8003990 <HAL_RCC_OscConfig+0x56c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ae:	f7fd ff31 	bl	8001714 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b6:	f7fd ff2d 	bl	8001714 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e10a      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038c8:	4b31      	ldr	r3, [pc, #196]	; (8003990 <HAL_RCC_OscConfig+0x56c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d108      	bne.n	80038ee <HAL_RCC_OscConfig+0x4ca>
 80038dc:	4a2b      	ldr	r2, [pc, #172]	; (800398c <HAL_RCC_OscConfig+0x568>)
 80038de:	4b2b      	ldr	r3, [pc, #172]	; (800398c <HAL_RCC_OscConfig+0x568>)
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038ec:	e024      	b.n	8003938 <HAL_RCC_OscConfig+0x514>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b05      	cmp	r3, #5
 80038f4:	d110      	bne.n	8003918 <HAL_RCC_OscConfig+0x4f4>
 80038f6:	4a25      	ldr	r2, [pc, #148]	; (800398c <HAL_RCC_OscConfig+0x568>)
 80038f8:	4b24      	ldr	r3, [pc, #144]	; (800398c <HAL_RCC_OscConfig+0x568>)
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fe:	f043 0304 	orr.w	r3, r3, #4
 8003902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003906:	4a21      	ldr	r2, [pc, #132]	; (800398c <HAL_RCC_OscConfig+0x568>)
 8003908:	4b20      	ldr	r3, [pc, #128]	; (800398c <HAL_RCC_OscConfig+0x568>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003916:	e00f      	b.n	8003938 <HAL_RCC_OscConfig+0x514>
 8003918:	4a1c      	ldr	r2, [pc, #112]	; (800398c <HAL_RCC_OscConfig+0x568>)
 800391a:	4b1c      	ldr	r3, [pc, #112]	; (800398c <HAL_RCC_OscConfig+0x568>)
 800391c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003928:	4a18      	ldr	r2, [pc, #96]	; (800398c <HAL_RCC_OscConfig+0x568>)
 800392a:	4b18      	ldr	r3, [pc, #96]	; (800398c <HAL_RCC_OscConfig+0x568>)
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003930:	f023 0304 	bic.w	r3, r3, #4
 8003934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d016      	beq.n	800396e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003940:	f7fd fee8 	bl	8001714 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003946:	e00a      	b.n	800395e <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003948:	f7fd fee4 	bl	8001714 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	; 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e0bf      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800395e:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_OscConfig+0x568>)
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ed      	beq.n	8003948 <HAL_RCC_OscConfig+0x524>
 800396c:	e019      	b.n	80039a2 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396e:	f7fd fed1 	bl	8001714 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003974:	e00e      	b.n	8003994 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003976:	f7fd fecd 	bl	8001714 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f241 3288 	movw	r2, #5000	; 0x1388
 8003984:	4293      	cmp	r3, r2
 8003986:	d905      	bls.n	8003994 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e0a8      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
 800398c:	40021000 	.word	0x40021000
 8003990:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003994:	4b54      	ldr	r3, [pc, #336]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e9      	bne.n	8003976 <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039a2:	7ffb      	ldrb	r3, [r7, #31]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d105      	bne.n	80039b4 <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a8:	4a4f      	ldr	r2, [pc, #316]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 80039aa:	4b4f      	ldr	r3, [pc, #316]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 80039ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 808f 	beq.w	8003adc <HAL_RCC_OscConfig+0x6b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	2b0c      	cmp	r3, #12
 80039c2:	f000 8089 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x6b4>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d156      	bne.n	8003a7c <HAL_RCC_OscConfig+0x658>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ce:	4a46      	ldr	r2, [pc, #280]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 80039d0:	4b45      	ldr	r3, [pc, #276]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039da:	f7fd fe9b 	bl	8001714 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e2:	f7fd fe97 	bl	8001714 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e074      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039f4:	4b3c      	ldr	r3, [pc, #240]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f0      	bne.n	80039e2 <HAL_RCC_OscConfig+0x5be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a00:	4939      	ldr	r1, [pc, #228]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	3b01      	subs	r3, #1
 8003a08:	011a      	lsls	r2, r3, #4
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	045b      	lsls	r3, r3, #17
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a26:	085b      	lsrs	r3, r3, #1
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	055b      	lsls	r3, r3, #21
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	3b01      	subs	r3, #1
 8003a36:	065b      	lsls	r3, r3, #25
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 8003a3e:	4b2a      	ldr	r3, [pc, #168]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a46:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a48:	4a27      	ldr	r2, [pc, #156]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 8003a4a:	4b27      	ldr	r3, [pc, #156]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a52:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fd fe5e 	bl	8001714 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x64a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a5c:	f7fd fe5a 	bl	8001714 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x64a>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e037      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0x638>
 8003a7a:	e02f      	b.n	8003adc <HAL_RCC_OscConfig+0x6b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 8003a7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a86:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003a88:	4b17      	ldr	r3, [pc, #92]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x67c>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a94:	4a14      	ldr	r2, [pc, #80]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 8003a96:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f023 0303 	bic.w	r3, r3, #3
 8003a9e:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003aa0:	4a11      	ldr	r2, [pc, #68]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 8003aa2:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aae:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fd fe30 	bl	8001714 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x6a6>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab8:	f7fd fe2c 	bl	8001714 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e009      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aca:	4b07      	ldr	r3, [pc, #28]	; (8003ae8 <HAL_RCC_OscConfig+0x6c4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x694>
 8003ad6:	e001      	b.n	8003adc <HAL_RCC_OscConfig+0x6b8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <HAL_RCC_OscConfig+0x6ba>
    }
  }
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3720      	adds	r7, #32
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000

08003aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0c6      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b00:	4b65      	ldr	r3, [pc, #404]	; (8003c98 <HAL_RCC_ClockConfig+0x1ac>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0207 	and.w	r2, r3, #7
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d210      	bcs.n	8003b30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4962      	ldr	r1, [pc, #392]	; (8003c98 <HAL_RCC_ClockConfig+0x1ac>)
 8003b10:	4b61      	ldr	r3, [pc, #388]	; (8003c98 <HAL_RCC_ClockConfig+0x1ac>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f023 0207 	bic.w	r2, r3, #7
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b5e      	ldr	r3, [pc, #376]	; (8003c98 <HAL_RCC_ClockConfig+0x1ac>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0207 	and.w	r2, r3, #7
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0ae      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d04c      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d107      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b44:	4b55      	ldr	r3, [pc, #340]	; (8003c9c <HAL_RCC_ClockConfig+0x1b0>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d121      	bne.n	8003b94 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e09c      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d107      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b5c:	4b4f      	ldr	r3, [pc, #316]	; (8003c9c <HAL_RCC_ClockConfig+0x1b0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d115      	bne.n	8003b94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e090      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d107      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b74:	4b49      	ldr	r3, [pc, #292]	; (8003c9c <HAL_RCC_ClockConfig+0x1b0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d109      	bne.n	8003b94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e084      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b84:	4b45      	ldr	r3, [pc, #276]	; (8003c9c <HAL_RCC_ClockConfig+0x1b0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e07c      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b94:	4941      	ldr	r1, [pc, #260]	; (8003c9c <HAL_RCC_ClockConfig+0x1b0>)
 8003b96:	4b41      	ldr	r3, [pc, #260]	; (8003c9c <HAL_RCC_ClockConfig+0x1b0>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f023 0203 	bic.w	r2, r3, #3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba6:	f7fd fdb5 	bl	8001714 <HAL_GetTick>
 8003baa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bae:	f7fd fdb1 	bl	8001714 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e064      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc4:	4b35      	ldr	r3, [pc, #212]	; (8003c9c <HAL_RCC_ClockConfig+0x1b0>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 020c 	and.w	r2, r3, #12
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d1eb      	bne.n	8003bae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d008      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be2:	492e      	ldr	r1, [pc, #184]	; (8003c9c <HAL_RCC_ClockConfig+0x1b0>)
 8003be4:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <HAL_RCC_ClockConfig+0x1b0>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf4:	4b28      	ldr	r3, [pc, #160]	; (8003c98 <HAL_RCC_ClockConfig+0x1ac>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0207 	and.w	r2, r3, #7
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d910      	bls.n	8003c24 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c02:	4925      	ldr	r1, [pc, #148]	; (8003c98 <HAL_RCC_ClockConfig+0x1ac>)
 8003c04:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <HAL_RCC_ClockConfig+0x1ac>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f023 0207 	bic.w	r2, r3, #7
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c12:	4b21      	ldr	r3, [pc, #132]	; (8003c98 <HAL_RCC_ClockConfig+0x1ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0207 	and.w	r2, r3, #7
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d001      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e034      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c30:	491a      	ldr	r1, [pc, #104]	; (8003c9c <HAL_RCC_ClockConfig+0x1b0>)
 8003c32:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <HAL_RCC_ClockConfig+0x1b0>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c4e:	4913      	ldr	r1, [pc, #76]	; (8003c9c <HAL_RCC_ClockConfig+0x1b0>)
 8003c50:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <HAL_RCC_ClockConfig+0x1b0>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c62:	f000 f821 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8003c66:	4601      	mov	r1, r0
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <HAL_RCC_ClockConfig+0x1b0>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	4a0b      	ldr	r2, [pc, #44]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c74:	5cd3      	ldrb	r3, [r2, r3]
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8003c7e:	4a09      	ldr	r2, [pc, #36]	; (8003ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8003c82:	200f      	movs	r0, #15
 8003c84:	f7fd fd14 	bl	80016b0 <HAL_InitTick>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c8c:	7afb      	ldrb	r3, [r7, #11]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40022000 	.word	0x40022000
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	0800851c 	.word	0x0800851c
 8003ca4:	2000003c 	.word	0x2000003c

08003ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b089      	sub	sp, #36	; 0x24
 8003cac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb6:	4b46      	ldr	r3, [pc, #280]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x128>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cc0:	4b43      	ldr	r3, [pc, #268]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x128>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0x34>
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b0c      	cmp	r3, #12
 8003cd4:	d121      	bne.n	8003d1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d11e      	bne.n	8003d1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cdc:	4b3c      	ldr	r3, [pc, #240]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x128>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d107      	bne.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ce8:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x128>)
 8003cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cee:	0a1b      	lsrs	r3, r3, #8
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	e005      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cf8:	4b35      	ldr	r3, [pc, #212]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x128>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d04:	4a33      	ldr	r2, [pc, #204]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10d      	bne.n	8003d30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d18:	e00a      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d102      	bne.n	8003d26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d20:	4b2d      	ldr	r3, [pc, #180]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x130>)
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	e004      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d2c:	4b2b      	ldr	r3, [pc, #172]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x134>)
 8003d2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	d145      	bne.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d36:	4b26      	ldr	r3, [pc, #152]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x128>)
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d40:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x128>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d002      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0xb2>
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d00d      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0xcc>
 8003d58:	e019      	b.n	8003d8e <HAL_RCC_GetSysClockFreq+0xe6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d5a:	4a1f      	ldr	r2, [pc, #124]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x130>)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d62:	4a1b      	ldr	r2, [pc, #108]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x128>)
 8003d64:	68d2      	ldr	r2, [r2, #12]
 8003d66:	0a12      	lsrs	r2, r2, #8
 8003d68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d6c:	fb02 f303 	mul.w	r3, r2, r3
 8003d70:	617b      	str	r3, [r7, #20]
      break;
 8003d72:	e019      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d74:	4a19      	ldr	r2, [pc, #100]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x134>)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7c:	4a14      	ldr	r2, [pc, #80]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x128>)
 8003d7e:	68d2      	ldr	r2, [r2, #12]
 8003d80:	0a12      	lsrs	r2, r2, #8
 8003d82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	617b      	str	r3, [r7, #20]
      break;
 8003d8c:	e00c      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d96:	4a0e      	ldr	r2, [pc, #56]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x128>)
 8003d98:	68d2      	ldr	r2, [r2, #12]
 8003d9a:	0a12      	lsrs	r2, r2, #8
 8003d9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003da0:	fb02 f303 	mul.w	r3, r2, r3
 8003da4:	617b      	str	r3, [r7, #20]
      break;
 8003da6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003da8:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x128>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	0e5b      	lsrs	r3, r3, #25
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	3301      	adds	r3, #1
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dc2:	69bb      	ldr	r3, [r7, #24]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3724      	adds	r7, #36	; 0x24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	08008534 	.word	0x08008534
 8003dd8:	00f42400 	.word	0x00f42400
 8003ddc:	007a1200 	.word	0x007a1200

08003de0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003de4:	4b03      	ldr	r3, [pc, #12]	; (8003df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003de6:	681b      	ldr	r3, [r3, #0]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	2000003c 	.word	0x2000003c

08003df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dfc:	f7ff fff0 	bl	8003de0 <HAL_RCC_GetHCLKFreq>
 8003e00:	4601      	mov	r1, r0
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	0a1b      	lsrs	r3, r3, #8
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	4a04      	ldr	r2, [pc, #16]	; (8003e20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e0e:	5cd3      	ldrb	r3, [r2, r3]
 8003e10:	f003 031f 	and.w	r3, r3, #31
 8003e14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	0800852c 	.word	0x0800852c

08003e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e28:	f7ff ffda 	bl	8003de0 <HAL_RCC_GetHCLKFreq>
 8003e2c:	4601      	mov	r1, r0
 8003e2e:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	0adb      	lsrs	r3, r3, #11
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	4a04      	ldr	r2, [pc, #16]	; (8003e4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e3a:	5cd3      	ldrb	r3, [r2, r3]
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	0800852c 	.word	0x0800852c

08003e50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e5c:	4b2a      	ldr	r3, [pc, #168]	; (8003f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e68:	f7ff faae 	bl	80033c8 <HAL_PWREx_GetVoltageRange>
 8003e6c:	6178      	str	r0, [r7, #20]
 8003e6e:	e014      	b.n	8003e9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e70:	4a25      	ldr	r2, [pc, #148]	; (8003f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e72:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e7c:	4b22      	ldr	r3, [pc, #136]	; (8003f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e88:	f7ff fa9e 	bl	80033c8 <HAL_PWREx_GetVoltageRange>
 8003e8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e8e:	4a1e      	ldr	r2, [pc, #120]	; (8003f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e90:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea0:	d10b      	bne.n	8003eba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b80      	cmp	r3, #128	; 0x80
 8003ea6:	d919      	bls.n	8003edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2ba0      	cmp	r3, #160	; 0xa0
 8003eac:	d902      	bls.n	8003eb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003eae:	2302      	movs	r3, #2
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	e013      	b.n	8003edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	e010      	b.n	8003edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b80      	cmp	r3, #128	; 0x80
 8003ebe:	d902      	bls.n	8003ec6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	e00a      	b.n	8003edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b80      	cmp	r3, #128	; 0x80
 8003eca:	d102      	bne.n	8003ed2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ecc:	2302      	movs	r3, #2
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	e004      	b.n	8003edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b70      	cmp	r3, #112	; 0x70
 8003ed6:	d101      	bne.n	8003edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ed8:	2301      	movs	r3, #1
 8003eda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003edc:	490b      	ldr	r1, [pc, #44]	; (8003f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ede:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 0207 	bic.w	r2, r3, #7
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003eec:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0207 	and.w	r2, r3, #7
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d001      	beq.n	8003efe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40022000 	.word	0x40022000

08003f10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f18:	2300      	movs	r3, #0
 8003f1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d03f      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f34:	d01c      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f3a:	d802      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00e      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003f40:	e01f      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003f42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f46:	d003      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003f48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f4c:	d01c      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003f4e:	e018      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f50:	4a85      	ldr	r2, [pc, #532]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f52:	4b85      	ldr	r3, [pc, #532]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f5c:	e015      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3304      	adds	r3, #4
 8003f62:	2100      	movs	r1, #0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 ff31 	bl	8004dcc <RCCEx_PLLSAI1_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f6e:	e00c      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3320      	adds	r3, #32
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 f818 	bl	8004fac <RCCEx_PLLSAI2_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f80:	e003      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	74fb      	strb	r3, [r7, #19]
      break;
 8003f86:	e000      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f8a:	7cfb      	ldrb	r3, [r7, #19]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10b      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f90:	4975      	ldr	r1, [pc, #468]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f92:	4b75      	ldr	r3, [pc, #468]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fa6:	e001      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa8:	7cfb      	ldrb	r3, [r7, #19]
 8003faa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d03f      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fc0:	d01c      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003fc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fc6:	d802      	bhi.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00e      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003fcc:	e01f      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003fce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fd2:	d003      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003fd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fd8:	d01c      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003fda:	e018      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fdc:	4a62      	ldr	r2, [pc, #392]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fde:	4b62      	ldr	r3, [pc, #392]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fe8:	e015      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3304      	adds	r3, #4
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 feeb 	bl	8004dcc <RCCEx_PLLSAI1_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ffa:	e00c      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3320      	adds	r3, #32
 8004000:	2100      	movs	r1, #0
 8004002:	4618      	mov	r0, r3
 8004004:	f000 ffd2 	bl	8004fac <RCCEx_PLLSAI2_Config>
 8004008:	4603      	mov	r3, r0
 800400a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800400c:	e003      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	74fb      	strb	r3, [r7, #19]
      break;
 8004012:	e000      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004016:	7cfb      	ldrb	r3, [r7, #19]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10b      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800401c:	4952      	ldr	r1, [pc, #328]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800401e:	4b52      	ldr	r3, [pc, #328]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004024:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004032:	e001      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004034:	7cfb      	ldrb	r3, [r7, #19]
 8004036:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80a0 	beq.w	8004186 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004046:	2300      	movs	r3, #0
 8004048:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800404a:	4b47      	ldr	r3, [pc, #284]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800405a:	2300      	movs	r3, #0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004060:	4a41      	ldr	r2, [pc, #260]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004062:	4b41      	ldr	r3, [pc, #260]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406a:	6593      	str	r3, [r2, #88]	; 0x58
 800406c:	4b3e      	ldr	r3, [pc, #248]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800406e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004078:	2301      	movs	r3, #1
 800407a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800407c:	4a3b      	ldr	r2, [pc, #236]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800407e:	4b3b      	ldr	r3, [pc, #236]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004086:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004088:	f7fd fb44 	bl	8001714 <HAL_GetTick>
 800408c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800408e:	e009      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004090:	f7fd fb40 	bl	8001714 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d902      	bls.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	74fb      	strb	r3, [r7, #19]
        break;
 80040a2:	e005      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040a4:	4b31      	ldr	r3, [pc, #196]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0ef      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d15c      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040b6:	4b2c      	ldr	r3, [pc, #176]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01f      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d019      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040d4:	4b24      	ldr	r3, [pc, #144]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040e0:	4a21      	ldr	r2, [pc, #132]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040e2:	4b21      	ldr	r3, [pc, #132]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040f0:	4a1d      	ldr	r2, [pc, #116]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040f2:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004100:	4a19      	ldr	r2, [pc, #100]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d016      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004112:	f7fd faff 	bl	8001714 <HAL_GetTick>
 8004116:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004118:	e00b      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411a:	f7fd fafb 	bl	8001714 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	f241 3288 	movw	r2, #5000	; 0x1388
 8004128:	4293      	cmp	r3, r2
 800412a:	d902      	bls.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	74fb      	strb	r3, [r7, #19]
            break;
 8004130:	e006      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004132:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0ec      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004140:	7cfb      	ldrb	r3, [r7, #19]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10c      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004146:	4908      	ldr	r1, [pc, #32]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004148:	4b07      	ldr	r3, [pc, #28]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800415e:	e009      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004160:	7cfb      	ldrb	r3, [r7, #19]
 8004162:	74bb      	strb	r3, [r7, #18]
 8004164:	e006      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000
 800416c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004174:	7c7b      	ldrb	r3, [r7, #17]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d105      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800417a:	4a9e      	ldr	r2, [pc, #632]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800417c:	4b9d      	ldr	r3, [pc, #628]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800417e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004184:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004192:	4998      	ldr	r1, [pc, #608]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004194:	4b97      	ldr	r3, [pc, #604]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	f023 0203 	bic.w	r2, r3, #3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041b4:	498f      	ldr	r1, [pc, #572]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041b6:	4b8f      	ldr	r3, [pc, #572]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f023 020c 	bic.w	r2, r3, #12
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041d6:	4987      	ldr	r1, [pc, #540]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041d8:	4b86      	ldr	r3, [pc, #536]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041f8:	497e      	ldr	r1, [pc, #504]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041fa:	4b7e      	ldr	r3, [pc, #504]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004200:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800421a:	4976      	ldr	r1, [pc, #472]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800421c:	4b75      	ldr	r3, [pc, #468]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800423c:	496d      	ldr	r1, [pc, #436]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800423e:	4b6d      	ldr	r3, [pc, #436]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800425e:	4965      	ldr	r1, [pc, #404]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004260:	4b64      	ldr	r3, [pc, #400]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004280:	495c      	ldr	r1, [pc, #368]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004282:	4b5c      	ldr	r3, [pc, #368]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042a2:	4954      	ldr	r1, [pc, #336]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042a4:	4b53      	ldr	r3, [pc, #332]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042c4:	494b      	ldr	r1, [pc, #300]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042c6:	4b4b      	ldr	r3, [pc, #300]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042e6:	4943      	ldr	r1, [pc, #268]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042e8:	4b42      	ldr	r3, [pc, #264]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d028      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004308:	493a      	ldr	r1, [pc, #232]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800430a:	4b3a      	ldr	r3, [pc, #232]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800430c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004310:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004326:	d106      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004328:	4a32      	ldr	r2, [pc, #200]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800432a:	4b32      	ldr	r3, [pc, #200]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004332:	60d3      	str	r3, [r2, #12]
 8004334:	e011      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800433a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800433e:	d10c      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	2101      	movs	r1, #1
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fd40 	bl	8004dcc <RCCEx_PLLSAI1_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004350:	7cfb      	ldrb	r3, [r7, #19]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004356:	7cfb      	ldrb	r3, [r7, #19]
 8004358:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d028      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004366:	4923      	ldr	r1, [pc, #140]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004368:	4b22      	ldr	r3, [pc, #136]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004384:	d106      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004386:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004388:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004390:	60d3      	str	r3, [r2, #12]
 8004392:	e011      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004398:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800439c:	d10c      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3304      	adds	r3, #4
 80043a2:	2101      	movs	r1, #1
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fd11 	bl	8004dcc <RCCEx_PLLSAI1_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ae:	7cfb      	ldrb	r3, [r7, #19]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d02b      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043c4:	490b      	ldr	r1, [pc, #44]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043c6:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043e2:	d109      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043e4:	4a03      	ldr	r2, [pc, #12]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043e6:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ee:	60d3      	str	r3, [r2, #12]
 80043f0:	e014      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004400:	d10c      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3304      	adds	r3, #4
 8004406:	2101      	movs	r1, #1
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fcdf 	bl	8004dcc <RCCEx_PLLSAI1_Config>
 800440e:	4603      	mov	r3, r0
 8004410:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004412:	7cfb      	ldrb	r3, [r7, #19]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004418:	7cfb      	ldrb	r3, [r7, #19]
 800441a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d02f      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004428:	492b      	ldr	r1, [pc, #172]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800442a:	4b2b      	ldr	r3, [pc, #172]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004430:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004442:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004446:	d10d      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3304      	adds	r3, #4
 800444c:	2102      	movs	r1, #2
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fcbc 	bl	8004dcc <RCCEx_PLLSAI1_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d014      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800445e:	7cfb      	ldrb	r3, [r7, #19]
 8004460:	74bb      	strb	r3, [r7, #18]
 8004462:	e011      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800446c:	d10c      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3320      	adds	r3, #32
 8004472:	2102      	movs	r1, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fd99 	bl	8004fac <RCCEx_PLLSAI2_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800447e:	7cfb      	ldrb	r3, [r7, #19]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004484:	7cfb      	ldrb	r3, [r7, #19]
 8004486:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004494:	4910      	ldr	r1, [pc, #64]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004496:	4b10      	ldr	r3, [pc, #64]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00b      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044b6:	4908      	ldr	r1, [pc, #32]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044b8:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40021000 	.word	0x40021000

080044dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ee:	d137      	bne.n	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80044f0:	4bb8      	ldr	r3, [pc, #736]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fa:	617b      	str	r3, [r7, #20]

    switch(srcclk)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004502:	d014      	beq.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8004504:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004508:	d01e      	beq.n	8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 800450a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800450e:	d001      	beq.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004510:	f000 bc53 	b.w	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004514:	4baf      	ldr	r3, [pc, #700]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b02      	cmp	r3, #2
 8004520:	f040 8446 	bne.w	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 8004524:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004528:	61fb      	str	r3, [r7, #28]
      break;
 800452a:	f000 bc41 	b.w	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800452e:	4ba9      	ldr	r3, [pc, #676]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b02      	cmp	r3, #2
 800453a:	f040 843b 	bne.w	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
        frequency = LSI_VALUE;
 800453e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004542:	61fb      	str	r3, [r7, #28]
      break;
 8004544:	f000 bc36 	b.w	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004548:	4ba2      	ldr	r3, [pc, #648]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004554:	f040 8430 	bne.w	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 8004558:	4b9f      	ldr	r3, [pc, #636]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800455a:	61fb      	str	r3, [r7, #28]
      break;
 800455c:	f000 bc2c 	b.w	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004560:	4b9c      	ldr	r3, [pc, #624]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d023      	beq.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004570:	2b03      	cmp	r3, #3
 8004572:	d02e      	beq.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004574:	2b01      	cmp	r3, #1
 8004576:	d139      	bne.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004578:	4b96      	ldr	r3, [pc, #600]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b02      	cmp	r3, #2
 8004582:	d116      	bne.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004584:	4b93      	ldr	r3, [pc, #588]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8004590:	4b90      	ldr	r3, [pc, #576]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	e005      	b.n	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 800459c:	4b8d      	ldr	r3, [pc, #564]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800459e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045a2:	0a1b      	lsrs	r3, r3, #8
 80045a4:	f003 030f 	and.w	r3, r3, #15
 80045a8:	4a8c      	ldr	r2, [pc, #560]	; (80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80045aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ae:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80045b0:	e01f      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
      break;
 80045b6:	e01c      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045b8:	4b86      	ldr	r3, [pc, #536]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c4:	d102      	bne.n	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 80045c6:	4b86      	ldr	r3, [pc, #536]	; (80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80045c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80045ca:	e012      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61bb      	str	r3, [r7, #24]
      break;
 80045d0:	e00f      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80045d2:	4b80      	ldr	r3, [pc, #512]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045de:	d102      	bne.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 80045e0:	4b80      	ldr	r3, [pc, #512]	; (80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80045e2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80045e4:	e005      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61bb      	str	r3, [r7, #24]
      break;
 80045ea:	e002      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	61bb      	str	r3, [r7, #24]
      break;
 80045f0:	bf00      	nop
    }

    switch(PeriphClk)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f8:	f000 8337 	beq.w	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 80045fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004600:	d825      	bhi.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8004602:	2b10      	cmp	r3, #16
 8004604:	f000 81df 	beq.w	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004608:	2b10      	cmp	r3, #16
 800460a:	d80f      	bhi.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800460c:	2b02      	cmp	r3, #2
 800460e:	f000 8128 	beq.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8004612:	2b02      	cmp	r3, #2
 8004614:	d803      	bhi.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8004616:	2b01      	cmp	r3, #1
 8004618:	f000 80ec 	beq.w	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800461c:	e3cd      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 800461e:	2b04      	cmp	r3, #4
 8004620:	f000 8169 	beq.w	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8004624:	2b08      	cmp	r3, #8
 8004626:	f000 819a 	beq.w	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 800462a:	e3c6      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 800462c:	2b40      	cmp	r3, #64	; 0x40
 800462e:	f000 82b3 	beq.w	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 8004632:	2b40      	cmp	r3, #64	; 0x40
 8004634:	d803      	bhi.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8004636:	2b20      	cmp	r3, #32
 8004638:	f000 81fd 	beq.w	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 800463c:	e3bd      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 800463e:	2b80      	cmp	r3, #128	; 0x80
 8004640:	f000 82cd 	beq.w	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004648:	f000 82ec 	beq.w	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 800464c:	e3b5      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 800464e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004652:	f000 822d 	beq.w	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8004656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800465a:	d811      	bhi.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800465c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004660:	d021      	beq.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8004662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004666:	d804      	bhi.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8004668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466c:	f000 833e 	beq.w	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 8004670:	e3a3      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8004672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004676:	d01d      	beq.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8004678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800467c:	d021      	beq.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 800467e:	e39c      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8004680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004684:	f000 8277 	beq.w	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 8004688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468c:	d804      	bhi.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800468e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004692:	f000 8371 	beq.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 8004696:	e390      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8004698:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800469c:	d011      	beq.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800469e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046a2:	d00e      	beq.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 80046a4:	e389      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80046a6:	69b9      	ldr	r1, [r7, #24]
 80046a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80046ac:	f000 fd58 	bl	8005160 <RCCEx_GetSAIxPeriphCLKFreq>
 80046b0:	61f8      	str	r0, [r7, #28]
      break;
 80046b2:	e382      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80046b4:	69b9      	ldr	r1, [r7, #24]
 80046b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80046ba:	f000 fd51 	bl	8005160 <RCCEx_GetSAIxPeriphCLKFreq>
 80046be:	61f8      	str	r0, [r7, #28]
      break;
 80046c0:	e37b      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80046c2:	4b44      	ldr	r3, [pc, #272]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80046cc:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046d4:	d023      	beq.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 80046d6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80046da:	d003      	beq.n	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80046dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046e0:	d04a      	beq.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 80046e2:	e086      	b.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80046e4:	4b3b      	ldr	r3, [pc, #236]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d17b      	bne.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80046f0:	4b38      	ldr	r3, [pc, #224]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80046fc:	4b35      	ldr	r3, [pc, #212]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	e005      	b.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8004708:	4b32      	ldr	r3, [pc, #200]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800470a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800470e:	0a1b      	lsrs	r3, r3, #8
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	4a31      	ldr	r2, [pc, #196]	; (80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800471a:	61fb      	str	r3, [r7, #28]
          break;
 800471c:	e064      	b.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800471e:	4b2d      	ldr	r3, [pc, #180]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004726:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800472a:	d15f      	bne.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800472c:	4b29      	ldr	r3, [pc, #164]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004734:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004738:	d158      	bne.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800473a:	4b26      	ldr	r3, [pc, #152]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	091b      	lsrs	r3, r3, #4
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	3301      	adds	r3, #1
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	fbb2 f3f3 	udiv	r3, r2, r3
 800474c:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800474e:	4b21      	ldr	r3, [pc, #132]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	0a1b      	lsrs	r3, r3, #8
 8004754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004758:	60fb      	str	r3, [r7, #12]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	fb02 f203 	mul.w	r2, r2, r3
 8004762:	4b1c      	ldr	r3, [pc, #112]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	0d5b      	lsrs	r3, r3, #21
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	3301      	adds	r3, #1
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	fbb2 f3f3 	udiv	r3, r2, r3
 8004774:	61fb      	str	r3, [r7, #28]
          break;
 8004776:	e039      	b.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004778:	4b16      	ldr	r3, [pc, #88]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004780:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004784:	d134      	bne.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004786:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800478e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004792:	d12d      	bne.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004794:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	3301      	adds	r3, #1
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a6:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80047a8:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	0a1b      	lsrs	r3, r3, #8
 80047ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b2:	60fb      	str	r3, [r7, #12]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	fb02 f203 	mul.w	r2, r2, r3
 80047bc:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	0d5b      	lsrs	r3, r3, #21
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	3301      	adds	r3, #1
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ce:	61fb      	str	r3, [r7, #28]
          break;
 80047d0:	e00e      	b.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80047d2:	bf00      	nop
 80047d4:	40021000 	.word	0x40021000
 80047d8:	0003d090 	.word	0x0003d090
 80047dc:	08008534 	.word	0x08008534
 80047e0:	00f42400 	.word	0x00f42400
 80047e4:	007a1200 	.word	0x007a1200
          break;
 80047e8:	bf00      	nop
 80047ea:	e2e6      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80047ec:	bf00      	nop
 80047ee:	e2e4      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80047f0:	bf00      	nop
        break;
 80047f2:	e2e2      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80047f4:	4bac      	ldr	r3, [pc, #688]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2b03      	cmp	r3, #3
 8004804:	d827      	bhi.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8004806:	a201      	add	r2, pc, #4	; (adr r2, 800480c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8004808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480c:	0800481d 	.word	0x0800481d
 8004810:	08004825 	.word	0x08004825
 8004814:	0800482d 	.word	0x0800482d
 8004818:	08004841 	.word	0x08004841
          frequency = HAL_RCC_GetPCLK2Freq();
 800481c:	f7ff fb02 	bl	8003e24 <HAL_RCC_GetPCLK2Freq>
 8004820:	61f8      	str	r0, [r7, #28]
          break;
 8004822:	e01d      	b.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8004824:	f7ff fa40 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8004828:	61f8      	str	r0, [r7, #28]
          break;
 800482a:	e019      	b.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800482c:	4b9e      	ldr	r3, [pc, #632]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004838:	d10f      	bne.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 800483a:	4b9c      	ldr	r3, [pc, #624]	; (8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800483c:	61fb      	str	r3, [r7, #28]
          break;
 800483e:	e00c      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004840:	4b99      	ldr	r3, [pc, #612]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d107      	bne.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 800484e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004852:	61fb      	str	r3, [r7, #28]
          break;
 8004854:	e003      	b.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 8004856:	bf00      	nop
 8004858:	e2af      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800485a:	bf00      	nop
 800485c:	e2ad      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800485e:	bf00      	nop
        break;
 8004860:	e2ab      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004862:	4b91      	ldr	r3, [pc, #580]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	f003 030c 	and.w	r3, r3, #12
 800486c:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b0c      	cmp	r3, #12
 8004872:	d83a      	bhi.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8004874:	a201      	add	r2, pc, #4	; (adr r2, 800487c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8004876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487a:	bf00      	nop
 800487c:	080048b1 	.word	0x080048b1
 8004880:	080048eb 	.word	0x080048eb
 8004884:	080048eb 	.word	0x080048eb
 8004888:	080048eb 	.word	0x080048eb
 800488c:	080048b9 	.word	0x080048b9
 8004890:	080048eb 	.word	0x080048eb
 8004894:	080048eb 	.word	0x080048eb
 8004898:	080048eb 	.word	0x080048eb
 800489c:	080048c1 	.word	0x080048c1
 80048a0:	080048eb 	.word	0x080048eb
 80048a4:	080048eb 	.word	0x080048eb
 80048a8:	080048eb 	.word	0x080048eb
 80048ac:	080048d5 	.word	0x080048d5
          frequency = HAL_RCC_GetPCLK1Freq();
 80048b0:	f7ff faa2 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 80048b4:	61f8      	str	r0, [r7, #28]
          break;
 80048b6:	e01d      	b.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 80048b8:	f7ff f9f6 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 80048bc:	61f8      	str	r0, [r7, #28]
          break;
 80048be:	e019      	b.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048c0:	4b79      	ldr	r3, [pc, #484]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048cc:	d10f      	bne.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 80048ce:	4b77      	ldr	r3, [pc, #476]	; (8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80048d0:	61fb      	str	r3, [r7, #28]
          break;
 80048d2:	e00c      	b.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80048d4:	4b74      	ldr	r3, [pc, #464]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d107      	bne.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 80048e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048e6:	61fb      	str	r3, [r7, #28]
          break;
 80048e8:	e003      	b.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 80048ea:	bf00      	nop
 80048ec:	e265      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80048ee:	bf00      	nop
 80048f0:	e263      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80048f2:	bf00      	nop
        break;
 80048f4:	e261      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80048f6:	4b6c      	ldr	r3, [pc, #432]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004900:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b10      	cmp	r3, #16
 8004906:	d00d      	beq.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8004908:	2b10      	cmp	r3, #16
 800490a:	d802      	bhi.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8004910:	e024      	b.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 8004912:	2b20      	cmp	r3, #32
 8004914:	d00a      	beq.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8004916:	2b30      	cmp	r3, #48	; 0x30
 8004918:	d012      	beq.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 800491a:	e01f      	b.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 800491c:	f7ff fa6c 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8004920:	61f8      	str	r0, [r7, #28]
          break;
 8004922:	e01b      	b.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8004924:	f7ff f9c0 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8004928:	61f8      	str	r0, [r7, #28]
          break;
 800492a:	e017      	b.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800492c:	4b5e      	ldr	r3, [pc, #376]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004938:	d10d      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 800493a:	4b5c      	ldr	r3, [pc, #368]	; (8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800493c:	61fb      	str	r3, [r7, #28]
          break;
 800493e:	e00a      	b.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004940:	4b59      	ldr	r3, [pc, #356]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b02      	cmp	r3, #2
 800494c:	d105      	bne.n	800495a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 800494e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004952:	61fb      	str	r3, [r7, #28]
          break;
 8004954:	e001      	b.n	800495a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8004956:	bf00      	nop
 8004958:	e22f      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800495a:	bf00      	nop
        break;
 800495c:	e22d      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800495e:	4b52      	ldr	r3, [pc, #328]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004964:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004968:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b40      	cmp	r3, #64	; 0x40
 800496e:	d00d      	beq.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8004970:	2b40      	cmp	r3, #64	; 0x40
 8004972:	d802      	bhi.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 8004978:	e024      	b.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 800497a:	2b80      	cmp	r3, #128	; 0x80
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800497e:	2bc0      	cmp	r3, #192	; 0xc0
 8004980:	d012      	beq.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 8004982:	e01f      	b.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004984:	f7ff fa38 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8004988:	61f8      	str	r0, [r7, #28]
          break;
 800498a:	e01b      	b.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 800498c:	f7ff f98c 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8004990:	61f8      	str	r0, [r7, #28]
          break;
 8004992:	e017      	b.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004994:	4b44      	ldr	r3, [pc, #272]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a0:	d10d      	bne.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 80049a2:	4b42      	ldr	r3, [pc, #264]	; (8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80049a4:	61fb      	str	r3, [r7, #28]
          break;
 80049a6:	e00a      	b.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049a8:	4b3f      	ldr	r3, [pc, #252]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d105      	bne.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 80049b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ba:	61fb      	str	r3, [r7, #28]
          break;
 80049bc:	e001      	b.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 80049be:	bf00      	nop
 80049c0:	e1fb      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80049c2:	bf00      	nop
        break;
 80049c4:	e1f9      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80049c6:	4b38      	ldr	r3, [pc, #224]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d0:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d8:	d010      	beq.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80049da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049de:	d802      	bhi.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 80049e4:	e026      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 80049e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ea:	d00b      	beq.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80049ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049f0:	d012      	beq.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 80049f2:	e01f      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 80049f4:	f7ff fa00 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 80049f8:	61f8      	str	r0, [r7, #28]
          break;
 80049fa:	e01b      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 80049fc:	f7ff f954 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8004a00:	61f8      	str	r0, [r7, #28]
          break;
 8004a02:	e017      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a04:	4b28      	ldr	r3, [pc, #160]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a10:	d10d      	bne.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 8004a12:	4b26      	ldr	r3, [pc, #152]	; (8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004a14:	61fb      	str	r3, [r7, #28]
          break;
 8004a16:	e00a      	b.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a18:	4b23      	ldr	r3, [pc, #140]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d105      	bne.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 8004a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a2a:	61fb      	str	r3, [r7, #28]
          break;
 8004a2c:	e001      	b.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 8004a2e:	bf00      	nop
 8004a30:	e1c3      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004a32:	bf00      	nop
        break;
 8004a34:	e1c1      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004a36:	4b1c      	ldr	r3, [pc, #112]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a40:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a48:	d010      	beq.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8004a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a4e:	d802      	bhi.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8004a54:	e026      	b.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 8004a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a5a:	d00b      	beq.n	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8004a5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a60:	d012      	beq.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 8004a62:	e01f      	b.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a64:	f7ff f9c8 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8004a68:	61f8      	str	r0, [r7, #28]
          break;
 8004a6a:	e01b      	b.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a6c:	f7ff f91c 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8004a70:	61f8      	str	r0, [r7, #28]
          break;
 8004a72:	e017      	b.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a74:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a80:	d10d      	bne.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 8004a82:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004a84:	61fb      	str	r3, [r7, #28]
          break;
 8004a86:	e00a      	b.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a88:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d105      	bne.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 8004a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a9a:	61fb      	str	r3, [r7, #28]
          break;
 8004a9c:	e001      	b.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 8004a9e:	bf00      	nop
 8004aa0:	e18b      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004aa2:	bf00      	nop
        break;
 8004aa4:	e189      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004aa6:	bf00      	nop
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004ab0:	4bae      	ldr	r3, [pc, #696]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004aba:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac2:	d02f      	beq.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8004ac4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ac8:	d003      	beq.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004aca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ace:	d004      	beq.n	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 8004ad0:	e050      	b.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ad2:	f7ff f8e9 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8004ad6:	61f8      	str	r0, [r7, #28]
          break;
 8004ad8:	e04c      	b.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8004ada:	4ba4      	ldr	r3, [pc, #656]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d043      	beq.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004ae6:	4ba1      	ldr	r3, [pc, #644]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	091b      	lsrs	r3, r3, #4
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	3301      	adds	r3, #1
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af8:	61bb      	str	r3, [r7, #24]
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004afa:	4b9c      	ldr	r3, [pc, #624]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	0a1b      	lsrs	r3, r3, #8
 8004b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b04:	60fb      	str	r3, [r7, #12]
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	fb02 f203 	mul.w	r2, r2, r3
 8004b0e:	4b97      	ldr	r3, [pc, #604]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	0e5b      	lsrs	r3, r3, #25
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	3301      	adds	r3, #1
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	61fb      	str	r3, [r7, #28]
          break;
 8004b22:	e024      	b.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 8004b24:	4b91      	ldr	r3, [pc, #580]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d020      	beq.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004b30:	4b8e      	ldr	r3, [pc, #568]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	61bb      	str	r3, [r7, #24]
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004b44:	4b89      	ldr	r3, [pc, #548]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	0a1b      	lsrs	r3, r3, #8
 8004b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b4e:	60fb      	str	r3, [r7, #12]
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U);
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	fb02 f203 	mul.w	r2, r2, r3
 8004b58:	4b84      	ldr	r3, [pc, #528]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	0e5b      	lsrs	r3, r3, #25
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	3301      	adds	r3, #1
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6a:	61fb      	str	r3, [r7, #28]
          break;
 8004b6c:	e001      	b.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 8004b6e:	bf00      	nop
 8004b70:	e123      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004b72:	bf00      	nop
        break;
 8004b74:	e121      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004b76:	4b7d      	ldr	r3, [pc, #500]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b80:	617b      	str	r3, [r7, #20]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d103      	bne.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004b88:	f7ff f94c 	bl	8003e24 <HAL_RCC_GetPCLK2Freq>
 8004b8c:	61f8      	str	r0, [r7, #28]
        break;
 8004b8e:	e114      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b90:	f7ff f88a 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8004b94:	61f8      	str	r0, [r7, #28]
        break;
 8004b96:	e110      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004b98:	4b74      	ldr	r3, [pc, #464]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ba2:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004baa:	d009      	beq.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8004bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d000      	beq.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 8004bb6:	e011      	b.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bb8:	f7ff f91e 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8004bbc:	61f8      	str	r0, [r7, #28]
          break;
 8004bbe:	e00d      	b.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 8004bc0:	f7ff f872 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8004bc4:	61f8      	str	r0, [r7, #28]
          break;
 8004bc6:	e009      	b.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bc8:	4b68      	ldr	r3, [pc, #416]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd4:	d101      	bne.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 8004bd6:	4b66      	ldr	r3, [pc, #408]	; (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004bd8:	61fb      	str	r3, [r7, #28]
          break;
 8004bda:	bf00      	nop
        break;
 8004bdc:	e0ed      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004bde:	4b63      	ldr	r3, [pc, #396]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004be8:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bf0:	d009      	beq.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8004bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf6:	d00a      	beq.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d000      	beq.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8004bfc:	e011      	b.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bfe:	f7ff f8fb 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8004c02:	61f8      	str	r0, [r7, #28]
          break;
 8004c04:	e00d      	b.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c06:	f7ff f84f 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8004c0a:	61f8      	str	r0, [r7, #28]
          break;
 8004c0c:	e009      	b.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c0e:	4b57      	ldr	r3, [pc, #348]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c1a:	d101      	bne.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 8004c1c:	4b54      	ldr	r3, [pc, #336]	; (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004c1e:	61fb      	str	r3, [r7, #28]
          break;
 8004c20:	bf00      	nop
        break;
 8004c22:	e0ca      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004c24:	4b51      	ldr	r3, [pc, #324]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c2e:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c36:	d009      	beq.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8004c38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c3c:	d00a      	beq.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d000      	beq.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 8004c42:	e011      	b.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c44:	f7ff f8d8 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8004c48:	61f8      	str	r0, [r7, #28]
          break;
 8004c4a:	e00d      	b.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c4c:	f7ff f82c 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8004c50:	61f8      	str	r0, [r7, #28]
          break;
 8004c52:	e009      	b.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c54:	4b45      	ldr	r3, [pc, #276]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c60:	d101      	bne.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 8004c62:	4b43      	ldr	r3, [pc, #268]	; (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004c64:	61fb      	str	r3, [r7, #28]
          break;
 8004c66:	bf00      	nop
        break;
 8004c68:	e0a7      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004c6a:	4b40      	ldr	r3, [pc, #256]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c70:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004c74:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c7c:	d010      	beq.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8004c7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c82:	d802      	bhi.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d007      	beq.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 8004c88:	e02f      	b.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 8004c8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c8e:	d012      	beq.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8004c90:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c94:	d019      	beq.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8004c96:	e028      	b.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c98:	f7ff f8ae 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8004c9c:	61f8      	str	r0, [r7, #28]
          break;
 8004c9e:	e024      	b.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004ca0:	4b32      	ldr	r3, [pc, #200]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d118      	bne.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
            frequency = LSI_VALUE;
 8004cae:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004cb2:	61fb      	str	r3, [r7, #28]
          break;
 8004cb4:	e014      	b.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cb6:	4b2d      	ldr	r3, [pc, #180]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc2:	d10f      	bne.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 8004cc4:	4b2a      	ldr	r3, [pc, #168]	; (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004cc6:	61fb      	str	r3, [r7, #28]
          break;
 8004cc8:	e00c      	b.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004cca:	4b28      	ldr	r3, [pc, #160]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d107      	bne.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 8004cd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cdc:	61fb      	str	r3, [r7, #28]
          break;
 8004cde:	e003      	b.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 8004ce0:	bf00      	nop
 8004ce2:	e06a      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004ce4:	bf00      	nop
 8004ce6:	e068      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004ce8:	bf00      	nop
        break;
 8004cea:	e066      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004cec:	4b1f      	ldr	r3, [pc, #124]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004cf6:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cfe:	d010      	beq.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d04:	d802      	bhi.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 8004d0a:	e034      	b.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 8004d0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d10:	d012      	beq.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8004d12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d16:	d019      	beq.n	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 8004d18:	e02d      	b.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d1a:	f7ff f86d 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8004d1e:	61f8      	str	r0, [r7, #28]
          break;
 8004d20:	e029      	b.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004d22:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d118      	bne.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
            frequency = LSI_VALUE;
 8004d30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004d34:	61fb      	str	r3, [r7, #28]
          break;
 8004d36:	e014      	b.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d38:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d44:	d10f      	bne.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004d48:	61fb      	str	r3, [r7, #28]
          break;
 8004d4a:	e00c      	b.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d4c:	4b07      	ldr	r3, [pc, #28]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d10c      	bne.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 8004d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d5e:	61fb      	str	r3, [r7, #28]
          break;
 8004d60:	e008      	b.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 8004d62:	bf00      	nop
 8004d64:	e029      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004d66:	bf00      	nop
 8004d68:	e027      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004d6a:	bf00      	nop
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	00f42400 	.word	0x00f42400
          break;
 8004d74:	bf00      	nop
        break;
 8004d76:	e020      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004d78:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d82:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 8004d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d8e:	d004      	beq.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 8004d90:	e00d      	b.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d92:	f7ff f831 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8004d96:	61f8      	str	r0, [r7, #28]
          break;
 8004d98:	e009      	b.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d9a:	4b0a      	ldr	r3, [pc, #40]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da6:	d101      	bne.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 8004da8:	4b07      	ldr	r3, [pc, #28]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 8004daa:	61fb      	str	r3, [r7, #28]
          break;
 8004dac:	bf00      	nop
        break;
 8004dae:	e004      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004db0:	bf00      	nop
 8004db2:	e002      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004db4:	bf00      	nop
 8004db6:	e000      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004db8:	bf00      	nop
    }
  }

  return(frequency);
 8004dba:	69fb      	ldr	r3, [r7, #28]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3720      	adds	r7, #32
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	00f42400 	.word	0x00f42400

08004dcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dda:	4b73      	ldr	r3, [pc, #460]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d018      	beq.n	8004e18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004de6:	4b70      	ldr	r3, [pc, #448]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f003 0203 	and.w	r2, r3, #3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d10d      	bne.n	8004e12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
       ||
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d009      	beq.n	8004e12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004dfe:	4b6a      	ldr	r3, [pc, #424]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d044      	beq.n	8004e9c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	73fb      	strb	r3, [r7, #15]
 8004e16:	e041      	b.n	8004e9c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d00c      	beq.n	8004e3a <RCCEx_PLLSAI1_Config+0x6e>
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d013      	beq.n	8004e4c <RCCEx_PLLSAI1_Config+0x80>
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d120      	bne.n	8004e6a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e28:	4b5f      	ldr	r3, [pc, #380]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d11d      	bne.n	8004e70 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e38:	e01a      	b.n	8004e70 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e3a:	4b5b      	ldr	r3, [pc, #364]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d116      	bne.n	8004e74 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e4a:	e013      	b.n	8004e74 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e4c:	4b56      	ldr	r3, [pc, #344]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10f      	bne.n	8004e78 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e58:	4b53      	ldr	r3, [pc, #332]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d109      	bne.n	8004e78 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e68:	e006      	b.n	8004e78 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e6e:	e004      	b.n	8004e7a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004e70:	bf00      	nop
 8004e72:	e002      	b.n	8004e7a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004e74:	bf00      	nop
 8004e76:	e000      	b.n	8004e7a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004e78:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10d      	bne.n	8004e9c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e80:	4849      	ldr	r0, [pc, #292]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e82:	4b49      	ldr	r3, [pc, #292]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6819      	ldr	r1, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	430b      	orrs	r3, r1
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d17d      	bne.n	8004f9e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ea2:	4a41      	ldr	r2, [pc, #260]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ea4:	4b40      	ldr	r3, [pc, #256]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eae:	f7fc fc31 	bl	8001714 <HAL_GetTick>
 8004eb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eb4:	e009      	b.n	8004eca <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004eb6:	f7fc fc2d 	bl	8001714 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d902      	bls.n	8004eca <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	73fb      	strb	r3, [r7, #15]
        break;
 8004ec8:	e005      	b.n	8004ed6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eca:	4b37      	ldr	r3, [pc, #220]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1ef      	bne.n	8004eb6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d160      	bne.n	8004f9e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d111      	bne.n	8004f06 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ee2:	4831      	ldr	r0, [pc, #196]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ee4:	4b30      	ldr	r3, [pc, #192]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6892      	ldr	r2, [r2, #8]
 8004ef4:	0211      	lsls	r1, r2, #8
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	68d2      	ldr	r2, [r2, #12]
 8004efa:	0912      	lsrs	r2, r2, #4
 8004efc:	0452      	lsls	r2, r2, #17
 8004efe:	430a      	orrs	r2, r1
 8004f00:	4313      	orrs	r3, r2
 8004f02:	6103      	str	r3, [r0, #16]
 8004f04:	e027      	b.n	8004f56 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d112      	bne.n	8004f32 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f0c:	4826      	ldr	r0, [pc, #152]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f0e:	4b26      	ldr	r3, [pc, #152]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6892      	ldr	r2, [r2, #8]
 8004f1e:	0211      	lsls	r1, r2, #8
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6912      	ldr	r2, [r2, #16]
 8004f24:	0852      	lsrs	r2, r2, #1
 8004f26:	3a01      	subs	r2, #1
 8004f28:	0552      	lsls	r2, r2, #21
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	6103      	str	r3, [r0, #16]
 8004f30:	e011      	b.n	8004f56 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f32:	481d      	ldr	r0, [pc, #116]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f34:	4b1c      	ldr	r3, [pc, #112]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6892      	ldr	r2, [r2, #8]
 8004f44:	0211      	lsls	r1, r2, #8
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6952      	ldr	r2, [r2, #20]
 8004f4a:	0852      	lsrs	r2, r2, #1
 8004f4c:	3a01      	subs	r2, #1
 8004f4e:	0652      	lsls	r2, r2, #25
 8004f50:	430a      	orrs	r2, r1
 8004f52:	4313      	orrs	r3, r2
 8004f54:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f56:	4a14      	ldr	r2, [pc, #80]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f58:	4b13      	ldr	r3, [pc, #76]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f62:	f7fc fbd7 	bl	8001714 <HAL_GetTick>
 8004f66:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f68:	e009      	b.n	8004f7e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f6a:	f7fc fbd3 	bl	8001714 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d902      	bls.n	8004f7e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	73fb      	strb	r3, [r7, #15]
          break;
 8004f7c:	e005      	b.n	8004f8a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f7e:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0ef      	beq.n	8004f6a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f90:	4905      	ldr	r1, [pc, #20]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f92:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f94:	691a      	ldr	r2, [r3, #16]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40021000 	.word	0x40021000

08004fac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fba:	4b68      	ldr	r3, [pc, #416]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d018      	beq.n	8004ff8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fc6:	4b65      	ldr	r3, [pc, #404]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f003 0203 	and.w	r2, r3, #3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d10d      	bne.n	8004ff2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
       ||
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d009      	beq.n	8004ff2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004fde:	4b5f      	ldr	r3, [pc, #380]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	091b      	lsrs	r3, r3, #4
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
       ||
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d044      	beq.n	800507c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	73fb      	strb	r3, [r7, #15]
 8004ff6:	e041      	b.n	800507c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d00c      	beq.n	800501a <RCCEx_PLLSAI2_Config+0x6e>
 8005000:	2b03      	cmp	r3, #3
 8005002:	d013      	beq.n	800502c <RCCEx_PLLSAI2_Config+0x80>
 8005004:	2b01      	cmp	r3, #1
 8005006:	d120      	bne.n	800504a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005008:	4b54      	ldr	r3, [pc, #336]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d11d      	bne.n	8005050 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005018:	e01a      	b.n	8005050 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800501a:	4b50      	ldr	r3, [pc, #320]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005022:	2b00      	cmp	r3, #0
 8005024:	d116      	bne.n	8005054 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800502a:	e013      	b.n	8005054 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800502c:	4b4b      	ldr	r3, [pc, #300]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10f      	bne.n	8005058 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005038:	4b48      	ldr	r3, [pc, #288]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d109      	bne.n	8005058 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005048:	e006      	b.n	8005058 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	73fb      	strb	r3, [r7, #15]
      break;
 800504e:	e004      	b.n	800505a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005050:	bf00      	nop
 8005052:	e002      	b.n	800505a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005054:	bf00      	nop
 8005056:	e000      	b.n	800505a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005058:	bf00      	nop
    }

    if(status == HAL_OK)
 800505a:	7bfb      	ldrb	r3, [r7, #15]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10d      	bne.n	800507c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005060:	483e      	ldr	r0, [pc, #248]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005062:	4b3e      	ldr	r3, [pc, #248]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6819      	ldr	r1, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	3b01      	subs	r3, #1
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	430b      	orrs	r3, r1
 8005078:	4313      	orrs	r3, r2
 800507a:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d167      	bne.n	8005152 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005082:	4a36      	ldr	r2, [pc, #216]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005084:	4b35      	ldr	r3, [pc, #212]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800508c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800508e:	f7fc fb41 	bl	8001714 <HAL_GetTick>
 8005092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005094:	e009      	b.n	80050aa <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005096:	f7fc fb3d 	bl	8001714 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d902      	bls.n	80050aa <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	73fb      	strb	r3, [r7, #15]
        break;
 80050a8:	e005      	b.n	80050b6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050aa:	4b2c      	ldr	r3, [pc, #176]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1ef      	bne.n	8005096 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d14a      	bne.n	8005152 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d111      	bne.n	80050e6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050c2:	4826      	ldr	r0, [pc, #152]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050c4:	4b25      	ldr	r3, [pc, #148]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6892      	ldr	r2, [r2, #8]
 80050d4:	0211      	lsls	r1, r2, #8
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	68d2      	ldr	r2, [r2, #12]
 80050da:	0912      	lsrs	r2, r2, #4
 80050dc:	0452      	lsls	r2, r2, #17
 80050de:	430a      	orrs	r2, r1
 80050e0:	4313      	orrs	r3, r2
 80050e2:	6143      	str	r3, [r0, #20]
 80050e4:	e011      	b.n	800510a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050e6:	481d      	ldr	r0, [pc, #116]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050e8:	4b1c      	ldr	r3, [pc, #112]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6892      	ldr	r2, [r2, #8]
 80050f8:	0211      	lsls	r1, r2, #8
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6912      	ldr	r2, [r2, #16]
 80050fe:	0852      	lsrs	r2, r2, #1
 8005100:	3a01      	subs	r2, #1
 8005102:	0652      	lsls	r2, r2, #25
 8005104:	430a      	orrs	r2, r1
 8005106:	4313      	orrs	r3, r2
 8005108:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800510a:	4a14      	ldr	r2, [pc, #80]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 800510c:	4b13      	ldr	r3, [pc, #76]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005114:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005116:	f7fc fafd 	bl	8001714 <HAL_GetTick>
 800511a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800511c:	e009      	b.n	8005132 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800511e:	f7fc faf9 	bl	8001714 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d902      	bls.n	8005132 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	73fb      	strb	r3, [r7, #15]
          break;
 8005130:	e005      	b.n	800513e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005132:	4b0a      	ldr	r3, [pc, #40]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0ef      	beq.n	800511e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d106      	bne.n	8005152 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005144:	4905      	ldr	r1, [pc, #20]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005146:	4b05      	ldr	r3, [pc, #20]	; (800515c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005148:	695a      	ldr	r2, [r3, #20]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005152:	7bfb      	ldrb	r3, [r7, #15]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40021000 	.word	0x40021000

08005160 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005160:	b480      	push	{r7}
 8005162:	b089      	sub	sp, #36	; 0x24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800517c:	d10d      	bne.n	800519a <RCCEx_GetSAIxPeriphCLKFreq+0x3a>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800517e:	4b63      	ldr	r3, [pc, #396]	; (800530c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8005180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005184:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005188:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005190:	d114      	bne.n	80051bc <RCCEx_GetSAIxPeriphCLKFreq+0x5c>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005192:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005196:	61fb      	str	r3, [r7, #28]
 8005198:	e010      	b.n	80051bc <RCCEx_GetSAIxPeriphCLKFreq+0x5c>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a0:	d10c      	bne.n	80051bc <RCCEx_GetSAIxPeriphCLKFreq+0x5c>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80051a2:	4b5a      	ldr	r3, [pc, #360]	; (800530c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a8:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80051ac:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051b4:	d102      	bne.n	80051bc <RCCEx_GetSAIxPeriphCLKFreq+0x5c>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80051b6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80051ba:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f040 809c 	bne.w	80052fc <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
  {
    pllvco = InputFrequency;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051ce:	d003      	beq.n	80051d8 <RCCEx_GetSAIxPeriphCLKFreq+0x78>
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051d6:	d12d      	bne.n	8005234 <RCCEx_GetSAIxPeriphCLKFreq+0xd4>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80051d8:	4b4c      	ldr	r3, [pc, #304]	; (800530c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 808b 	beq.w	80052fc <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80051e6:	4b49      	ldr	r3, [pc, #292]	; (800530c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	091b      	lsrs	r3, r3, #4
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	3301      	adds	r3, #1
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80051fa:	4b44      	ldr	r3, [pc, #272]	; (800530c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	0a1b      	lsrs	r3, r3, #8
 8005200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005204:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10a      	bne.n	8005222 <RCCEx_GetSAIxPeriphCLKFreq+0xc2>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800520c:	4b3f      	ldr	r3, [pc, #252]	; (800530c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          {
            pllp = 17U;
 8005218:	2311      	movs	r3, #17
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	e001      	b.n	8005222 <RCCEx_GetSAIxPeriphCLKFreq+0xc2>
          }
          else
          {
            pllp = 7U;
 800521e:	2307      	movs	r3, #7
 8005220:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	fb02 f203 	mul.w	r2, r2, r3
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005230:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8005232:	e063      	b.n	80052fc <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d12c      	bne.n	8005294 <RCCEx_GetSAIxPeriphCLKFreq+0x134>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 800523a:	4b34      	ldr	r3, [pc, #208]	; (800530c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d05a      	beq.n	80052fc <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005246:	4b31      	ldr	r3, [pc, #196]	; (800530c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	091b      	lsrs	r3, r3, #4
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	3301      	adds	r3, #1
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800525a:	4b2c      	ldr	r3, [pc, #176]	; (800530c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	0a1b      	lsrs	r3, r3, #8
 8005260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005264:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10a      	bne.n	8005282 <RCCEx_GetSAIxPeriphCLKFreq+0x122>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800526c:	4b27      	ldr	r3, [pc, #156]	; (800530c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          {
            pllp = 17U;
 8005278:	2311      	movs	r3, #17
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	e001      	b.n	8005282 <RCCEx_GetSAIxPeriphCLKFreq+0x122>
          }
          else
          {
            pllp = 7U;
 800527e:	2307      	movs	r3, #7
 8005280:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	fb02 f203 	mul.w	r2, r2, r3
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	61fb      	str	r3, [r7, #28]
 8005292:	e033      	b.n	80052fc <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800529a:	d003      	beq.n	80052a4 <RCCEx_GetSAIxPeriphCLKFreq+0x144>
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052a2:	d12b      	bne.n	80052fc <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 80052a4:	4b19      	ldr	r3, [pc, #100]	; (800530c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d025      	beq.n	80052fc <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80052b0:	4b16      	ldr	r3, [pc, #88]	; (800530c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	3301      	adds	r3, #1
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80052c4:	4b11      	ldr	r3, [pc, #68]	; (800530c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	0a1b      	lsrs	r3, r3, #8
 80052ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ce:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10a      	bne.n	80052ec <RCCEx_GetSAIxPeriphCLKFreq+0x18c>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80052d6:	4b0d      	ldr	r3, [pc, #52]	; (800530c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          {
            pllp = 17U;
 80052e2:	2311      	movs	r3, #17
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	e001      	b.n	80052ec <RCCEx_GetSAIxPeriphCLKFreq+0x18c>
          }
          else
          {
            pllp = 7U;
 80052e8:	2307      	movs	r3, #7
 80052ea:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	fb02 f203 	mul.w	r2, r2, r3
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fa:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80052fc:	69fb      	ldr	r3, [r7, #28]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3724      	adds	r7, #36	; 0x24
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40021000 	.word	0x40021000

08005310 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e14a      	b.n	80055b8 <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f001 faa2 	bl	8006880 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fa35 	bl	80057ac <SAI_Disable>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e135      	b.n	80055b8 <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d007      	beq.n	800536c <HAL_SAI_Init+0x5c>
 800535c:	2b01      	cmp	r3, #1
 800535e:	d302      	bcc.n	8005366 <HAL_SAI_Init+0x56>
 8005360:	2b02      	cmp	r3, #2
 8005362:	d006      	beq.n	8005372 <HAL_SAI_Init+0x62>
 8005364:	e008      	b.n	8005378 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	61fb      	str	r3, [r7, #28]
      break;
 800536a:	e008      	b.n	800537e <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800536c:	2310      	movs	r3, #16
 800536e:	61fb      	str	r3, [r7, #28]
      break;
 8005370:	e005      	b.n	800537e <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005372:	2320      	movs	r3, #32
 8005374:	61fb      	str	r3, [r7, #28]
      break;
 8005376:	e002      	b.n	800537e <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	61fb      	str	r3, [r7, #28]
      break;
 800537c:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	2b03      	cmp	r3, #3
 8005384:	d81d      	bhi.n	80053c2 <HAL_SAI_Init+0xb2>
 8005386:	a201      	add	r2, pc, #4	; (adr r2, 800538c <HAL_SAI_Init+0x7c>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	0800539d 	.word	0x0800539d
 8005390:	080053a3 	.word	0x080053a3
 8005394:	080053ab 	.word	0x080053ab
 8005398:	080053b3 	.word	0x080053b3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]
      break;
 80053a0:	e012      	b.n	80053c8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80053a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053a6:	617b      	str	r3, [r7, #20]
      break;
 80053a8:	e00e      	b.n	80053c8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80053aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053ae:	617b      	str	r3, [r7, #20]
      break;
 80053b0:	e00a      	b.n	80053c8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80053b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053b6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f043 0301 	orr.w	r3, r3, #1
 80053be:	61fb      	str	r3, [r7, #28]
      break;
 80053c0:	e002      	b.n	80053c8 <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]
      break;
 80053c6:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a7c      	ldr	r2, [pc, #496]	; (80055c0 <HAL_SAI_Init+0x2b0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d004      	beq.n	80053dc <HAL_SAI_Init+0xcc>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a7b      	ldr	r2, [pc, #492]	; (80055c4 <HAL_SAI_Init+0x2b4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d103      	bne.n	80053e4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80053dc:	4a7a      	ldr	r2, [pc, #488]	; (80055c8 <HAL_SAI_Init+0x2b8>)
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e002      	b.n	80053ea <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80053e4:	4a79      	ldr	r2, [pc, #484]	; (80055cc <HAL_SAI_Init+0x2bc>)
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d038      	beq.n	8005464 <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a72      	ldr	r2, [pc, #456]	; (80055c0 <HAL_SAI_Init+0x2b0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d004      	beq.n	8005406 <HAL_SAI_Init+0xf6>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a70      	ldr	r2, [pc, #448]	; (80055c4 <HAL_SAI_Init+0x2b4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d105      	bne.n	8005412 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005406:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800540a:	f7ff f867 	bl	80044dc <HAL_RCCEx_GetPeriphCLKFreq>
 800540e:	6138      	str	r0, [r7, #16]
 8005410:	e004      	b.n	800541c <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005412:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005416:	f7ff f861 	bl	80044dc <HAL_RCCEx_GetPeriphCLKFreq>
 800541a:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	461a      	mov	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	025b      	lsls	r3, r3, #9
 800542e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005432:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4a66      	ldr	r2, [pc, #408]	; (80055d0 <HAL_SAI_Init+0x2c0>)
 8005438:	fba2 2303 	umull	r2, r3, r2, r3
 800543c:	08da      	lsrs	r2, r3, #3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005442:	68f9      	ldr	r1, [r7, #12]
 8005444:	4b62      	ldr	r3, [pc, #392]	; (80055d0 <HAL_SAI_Init+0x2c0>)
 8005446:	fba3 2301 	umull	r2, r3, r3, r1
 800544a:	08da      	lsrs	r2, r3, #3
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	1aca      	subs	r2, r1, r3
 8005456:	2a08      	cmp	r2, #8
 8005458:	d904      	bls.n	8005464 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <HAL_SAI_Init+0x164>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d109      	bne.n	8005488 <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_SAI_Init+0x170>
 800547c:	2300      	movs	r3, #0
 800547e:	e001      	b.n	8005484 <HAL_SAI_Init+0x174>
 8005480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	e008      	b.n	800549a <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548c:	2b01      	cmp	r3, #1
 800548e:	d102      	bne.n	8005496 <HAL_SAI_Init+0x186>
 8005490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005494:	e000      	b.n	8005498 <HAL_SAI_Init+0x188>
 8005496:	2300      	movs	r3, #0
 8005498:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6819      	ldr	r1, [r3, #0]
 80054a4:	4b4b      	ldr	r3, [pc, #300]	; (80055d4 <HAL_SAI_Init+0x2c4>)
 80054a6:	400b      	ands	r3, r1
 80054a8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6812      	ldr	r2, [r2, #0]
 80054b2:	6811      	ldr	r1, [r2, #0]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6850      	ldr	r0, [r2, #4]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054bc:	4310      	orrs	r0, r2
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054c2:	4310      	orrs	r0, r2
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054c8:	4310      	orrs	r0, r2
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	4310      	orrs	r0, r2
                          ckstr_bits | syncen_bits |                             \
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4310      	orrs	r0, r2
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 80054d6:	4310      	orrs	r0, r2
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6912      	ldr	r2, [r2, #16]
 80054dc:	4310      	orrs	r0, r2
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6952      	ldr	r2, [r2, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80054e2:	4310      	orrs	r0, r2
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6a12      	ldr	r2, [r2, #32]
 80054e8:	0512      	lsls	r2, r2, #20
 80054ea:	4302      	orrs	r2, r0
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054ec:	430a      	orrs	r2, r1
 80054ee:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80054fe:	f023 030f 	bic.w	r3, r3, #15
 8005502:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6812      	ldr	r2, [r2, #0]
 800550c:	6851      	ldr	r1, [r2, #4]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6990      	ldr	r0, [r2, #24]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005516:	4310      	orrs	r0, r2
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800551c:	4302      	orrs	r2, r0
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6899      	ldr	r1, [r3, #8]
 800552c:	4b2a      	ldr	r3, [pc, #168]	; (80055d8 <HAL_SAI_Init+0x2c8>)
 800552e:	400b      	ands	r3, r1
 8005530:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6812      	ldr	r2, [r2, #0]
 800553a:	6891      	ldr	r1, [r2, #8]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005540:	1e50      	subs	r0, r2, #1
                           hsai->FrameInit.FSOffset |
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6d12      	ldr	r2, [r2, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005546:	4310      	orrs	r0, r2
                           hsai->FrameInit.FSDefinition |
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6c92      	ldr	r2, [r2, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800554c:	4310      	orrs	r0, r2
                           hsai->FrameInit.FSPolarity   |
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005552:	4310      	orrs	r0, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005558:	3a01      	subs	r2, #1
 800555a:	0212      	lsls	r2, r2, #8
                           hsai->FrameInit.FSPolarity   |
 800555c:	4302      	orrs	r2, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800555e:	430a      	orrs	r2, r1
 8005560:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68d9      	ldr	r1, [r3, #12]
 800556c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005570:	400b      	ands	r3, r1
 8005572:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	68d1      	ldr	r1, [r2, #12]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005586:	4310      	orrs	r0, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800558c:	0412      	lsls	r2, r2, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800558e:	4310      	orrs	r0, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005594:	3a01      	subs	r2, #1
 8005596:	0212      	lsls	r2, r2, #8
 8005598:	4302      	orrs	r2, r0
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800559a:	430a      	orrs	r2, r1
 800559c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3720      	adds	r7, #32
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40015404 	.word	0x40015404
 80055c4:	40015424 	.word	0x40015424
 80055c8:	40015400 	.word	0x40015400
 80055cc:	40015800 	.word	0x40015800
 80055d0:	cccccccd 	.word	0xcccccccd
 80055d4:	ff05c010 	.word	0xff05c010
 80055d8:	fff88000 	.word	0xfff88000

080055dc <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	4613      	mov	r3, r2
 80055e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80055ea:	f7fc f893 	bl	8001714 <HAL_GetTick>
 80055ee:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_SAI_Transmit_DMA+0x20>
 80055f6:	88fb      	ldrh	r3, [r7, #6]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e093      	b.n	8005728 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b01      	cmp	r3, #1
 800560a:	f040 808c 	bne.w	8005726 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <HAL_SAI_Transmit_DMA+0x40>
 8005618:	2302      	movs	r3, #2
 800561a:	e085      	b.n	8005728 <HAL_SAI_Transmit_DMA+0x14c>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	88fa      	ldrh	r2, [r7, #6]
 800562e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	88fa      	ldrh	r2, [r7, #6]
 8005636:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2212      	movs	r2, #18
 8005646:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800564e:	4a38      	ldr	r2, [pc, #224]	; (8005730 <HAL_SAI_Transmit_DMA+0x154>)
 8005650:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005656:	4a37      	ldr	r2, [pc, #220]	; (8005734 <HAL_SAI_Transmit_DMA+0x158>)
 8005658:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800565e:	4a36      	ldr	r2, [pc, #216]	; (8005738 <HAL_SAI_Transmit_DMA+0x15c>)
 8005660:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005666:	2200      	movs	r2, #0
 8005668:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005672:	4619      	mov	r1, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	331c      	adds	r3, #28
 800567a:	461a      	mov	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005682:	f7fc fd99 	bl	80021b8 <HAL_DMA_Start_IT>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e047      	b.n	8005728 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005698:	2100      	movs	r1, #0
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f000 f84e 	bl	800573c <SAI_InterruptFlag>
 80056a0:	4601      	mov	r1, r0
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	6812      	ldr	r2, [r2, #0]
 80056aa:	6912      	ldr	r2, [r2, #16]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	6812      	ldr	r2, [r2, #0]
 80056ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80056be:	601a      	str	r2, [r3, #0]

    /* Wait untill FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80056c0:	e015      	b.n	80056ee <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80056c2:	f7fc f827 	bl	8001714 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056d0:	d90d      	bls.n	80056ee <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e01c      	b.n	8005728 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0e2      	beq.n	80056c2 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d107      	bne.n	800571a <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005718:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	e000      	b.n	8005728 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8005726:	2302      	movs	r3, #2
  }
}
 8005728:	4618      	mov	r0, r3
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	08005873 	.word	0x08005873
 8005734:	08005815 	.word	0x08005815
 8005738:	0800588f 	.word	0x0800588f

0800573c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005748:	2301      	movs	r3, #1
 800574a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800574c:	78fb      	ldrb	r3, [r7, #3]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d103      	bne.n	800575a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f043 0308 	orr.w	r3, r3, #8
 8005758:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	2b08      	cmp	r3, #8
 8005760:	d10b      	bne.n	800577a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005766:	2b03      	cmp	r3, #3
 8005768:	d003      	beq.n	8005772 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d103      	bne.n	800577a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f043 0310 	orr.w	r3, r3, #16
 8005778:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b03      	cmp	r3, #3
 8005780:	d003      	beq.n	800578a <SAI_InterruptFlag+0x4e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d104      	bne.n	8005794 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	e003      	b.n	800579c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f043 0304 	orr.w	r3, r3, #4
 800579a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800579c:	68fb      	ldr	r3, [r7, #12]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
	...

080057ac <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80057ac:	b490      	push	{r4, r7}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80057b4:	4b15      	ldr	r3, [pc, #84]	; (800580c <SAI_Disable+0x60>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a15      	ldr	r2, [pc, #84]	; (8005810 <SAI_Disable+0x64>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	0b1b      	lsrs	r3, r3, #12
 80057c0:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6812      	ldr	r2, [r2, #0]
 80057ce:	6812      	ldr	r2, [r2, #0]
 80057d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80057d4:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80057d6:	2c00      	cmp	r4, #0
 80057d8:	d10a      	bne.n	80057f0 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	73fb      	strb	r3, [r7, #15]
      break;
 80057ee:	e007      	b.n	8005800 <SAI_Disable+0x54>
    }
    count--;
 80057f0:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1ea      	bne.n	80057d6 <SAI_Disable+0x2a>

  return status;
 8005800:	7bfb      	ldrb	r3, [r7, #15]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bc90      	pop	{r4, r7}
 800580a:	4770      	bx	lr
 800580c:	2000003c 	.word	0x2000003c
 8005810:	95cbec1b 	.word	0x95cbec1b

08005814 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005820:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	2b20      	cmp	r3, #32
 8005828:	d01c      	beq.n	8005864 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	6812      	ldr	r2, [r2, #0]
 800583c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005840:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005842:	2100      	movs	r1, #0
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f7ff ff79 	bl	800573c <SAI_InterruptFlag>
 800584a:	4603      	mov	r3, r0
 800584c:	43da      	mvns	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68f9      	ldr	r1, [r7, #12]
 8005854:	6809      	ldr	r1, [r1, #0]
 8005856:	6909      	ldr	r1, [r1, #16]
 8005858:	400a      	ands	r2, r1
 800585a:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f001 f8a3 	bl	80069b0 <HAL_SAI_TxCpltCallback>
#endif
}
 800586a:	bf00      	nop
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b084      	sub	sp, #16
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f7fb fec5 	bl	8001610 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8005886:	bf00      	nop
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589a:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058a2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	6812      	ldr	r2, [r2, #0]
 80058b6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80058ba:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff ff75 	bl	80057ac <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f7fb feae 	bl	8001634 <HAL_SAI_ErrorCallback>
#endif
}
 80058d8:	bf00      	nop
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <Init_MPU>:

#include "Filtr.h"
#include <math.h>
#include <stdlib.h>
extern I2C_HandleTypeDef I2c1Handle;
void Init_MPU(){
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af04      	add	r7, sp, #16
	uint8_t power = 0;
 80058e6:	2300      	movs	r3, #0
 80058e8:	71fb      	strb	r3, [r7, #7]
	uint8_t data[3]={0b00000001,
 80058ea:	4a1a      	ldr	r2, [pc, #104]	; (8005954 <Init_MPU+0x74>)
 80058ec:	1d3b      	adds	r3, r7, #4
 80058ee:	6812      	ldr	r2, [r2, #0]
 80058f0:	4611      	mov	r1, r2
 80058f2:	8019      	strh	r1, [r3, #0]
 80058f4:	3302      	adds	r3, #2
 80058f6:	0c12      	lsrs	r2, r2, #16
 80058f8:	701a      	strb	r2, [r3, #0]
				     0b00011000,
				     0b00001000};
	HAL_I2C_Mem_Write(&I2c1Handle,GYRO,0x6B,1,&power,1,1000);
 80058fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058fe:	9302      	str	r3, [sp, #8]
 8005900:	2301      	movs	r3, #1
 8005902:	9301      	str	r3, [sp, #4]
 8005904:	1dfb      	adds	r3, r7, #7
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	2301      	movs	r3, #1
 800590a:	226b      	movs	r2, #107	; 0x6b
 800590c:	21d2      	movs	r1, #210	; 0xd2
 800590e:	4812      	ldr	r0, [pc, #72]	; (8005958 <Init_MPU+0x78>)
 8005910:	f7fd f904 	bl	8002b1c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&I2c1Handle,GYRO,0x1A,1,data,3,1000);
 8005914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005918:	9302      	str	r3, [sp, #8]
 800591a:	2303      	movs	r3, #3
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	1d3b      	adds	r3, r7, #4
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	2301      	movs	r3, #1
 8005924:	221a      	movs	r2, #26
 8005926:	21d2      	movs	r1, #210	; 0xd2
 8005928:	480b      	ldr	r0, [pc, #44]	; (8005958 <Init_MPU+0x78>)
 800592a:	f7fd f8f7 	bl	8002b1c <HAL_I2C_Mem_Write>
    data[0]=0b01111000;
 800592e:	2378      	movs	r3, #120	; 0x78
 8005930:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Mem_Write(&I2c1Handle,GYRO,0x23,1,data,1,1000);
 8005932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005936:	9302      	str	r3, [sp, #8]
 8005938:	2301      	movs	r3, #1
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	1d3b      	adds	r3, r7, #4
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	2301      	movs	r3, #1
 8005942:	2223      	movs	r2, #35	; 0x23
 8005944:	21d2      	movs	r1, #210	; 0xd2
 8005946:	4804      	ldr	r0, [pc, #16]	; (8005958 <Init_MPU+0x78>)
 8005948:	f7fd f8e8 	bl	8002b1c <HAL_I2C_Mem_Write>

}
 800594c:	bf00      	nop
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	08008518 	.word	0x08008518
 8005958:	20007ef8 	.word	0x20007ef8

0800595c <Read_MPU_Gyro>:
void Read_MPU_Gyro(){
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af04      	add	r7, sp, #16
	uint8_t data[6]={};
 8005962:	463b      	mov	r3, r7
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	809a      	strh	r2, [r3, #4]
	HAL_I2C_Mem_Read(&I2c1Handle,GYRO,0x43,1,data,6,1000);
 800596a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800596e:	9302      	str	r3, [sp, #8]
 8005970:	2306      	movs	r3, #6
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	463b      	mov	r3, r7
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	2301      	movs	r3, #1
 800597a:	2243      	movs	r2, #67	; 0x43
 800597c:	21d2      	movs	r1, #210	; 0xd2
 800597e:	4818      	ldr	r0, [pc, #96]	; (80059e0 <Read_MPU_Gyro+0x84>)
 8005980:	f7fd f9e0 	bl	8002d44 <HAL_I2C_Mem_Read>

	gyro[0] = (int16_t)((data[0]<<8) | data[1]);
 8005984:	783b      	ldrb	r3, [r7, #0]
 8005986:	021b      	lsls	r3, r3, #8
 8005988:	b21a      	sxth	r2, r3
 800598a:	787b      	ldrb	r3, [r7, #1]
 800598c:	b21b      	sxth	r3, r3
 800598e:	4313      	orrs	r3, r2
 8005990:	b21b      	sxth	r3, r3
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800599a:	4b12      	ldr	r3, [pc, #72]	; (80059e4 <Read_MPU_Gyro+0x88>)
 800599c:	edc3 7a00 	vstr	s15, [r3]
	gyro[1] = (int16_t)((data[2]<<8) | data[3]);
 80059a0:	78bb      	ldrb	r3, [r7, #2]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	b21a      	sxth	r2, r3
 80059a6:	78fb      	ldrb	r3, [r7, #3]
 80059a8:	b21b      	sxth	r3, r3
 80059aa:	4313      	orrs	r3, r2
 80059ac:	b21b      	sxth	r3, r3
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059b6:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <Read_MPU_Gyro+0x88>)
 80059b8:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro[2] = (int16_t)((data[4]<<8) | data[5]);
 80059bc:	793b      	ldrb	r3, [r7, #4]
 80059be:	021b      	lsls	r3, r3, #8
 80059c0:	b21a      	sxth	r2, r3
 80059c2:	797b      	ldrb	r3, [r7, #5]
 80059c4:	b21b      	sxth	r3, r3
 80059c6:	4313      	orrs	r3, r2
 80059c8:	b21b      	sxth	r3, r3
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059d2:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <Read_MPU_Gyro+0x88>)
 80059d4:	edc3 7a02 	vstr	s15, [r3, #8]

}
 80059d8:	bf00      	nop
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20007ef8 	.word	0x20007ef8
 80059e4:	20013d98 	.word	0x20013d98

080059e8 <Read_MPU_Accl>:
void Read_MPU_Accl(){
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af04      	add	r7, sp, #16
	uint8_t data[6]={};
 80059ee:	463b      	mov	r3, r7
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	809a      	strh	r2, [r3, #4]
	HAL_I2C_Mem_Read(&I2c1Handle,GYRO,0x3B,1,data,6,1000);
 80059f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059fa:	9302      	str	r3, [sp, #8]
 80059fc:	2306      	movs	r3, #6
 80059fe:	9301      	str	r3, [sp, #4]
 8005a00:	463b      	mov	r3, r7
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	2301      	movs	r3, #1
 8005a06:	223b      	movs	r2, #59	; 0x3b
 8005a08:	21d2      	movs	r1, #210	; 0xd2
 8005a0a:	481e      	ldr	r0, [pc, #120]	; (8005a84 <Read_MPU_Accl+0x9c>)
 8005a0c:	f7fd f99a 	bl	8002d44 <HAL_I2C_Mem_Read>

	accel[0] = (int16_t)((data[0]<<8) | data[1]) - ACCEL_X_OFFSET;
 8005a10:	783b      	ldrb	r3, [r7, #0]
 8005a12:	021b      	lsls	r3, r3, #8
 8005a14:	b21a      	sxth	r2, r3
 8005a16:	787b      	ldrb	r3, [r7, #1]
 8005a18:	b21b      	sxth	r3, r3
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	b21b      	sxth	r3, r3
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a26:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005a88 <Read_MPU_Accl+0xa0>
 8005a2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a2e:	4b17      	ldr	r3, [pc, #92]	; (8005a8c <Read_MPU_Accl+0xa4>)
 8005a30:	edc3 7a00 	vstr	s15, [r3]
	accel[1] = (int16_t)((data[2]<<8) | data[3]) - ACCEL_Y_OFFSET;
 8005a34:	78bb      	ldrb	r3, [r7, #2]
 8005a36:	021b      	lsls	r3, r3, #8
 8005a38:	b21a      	sxth	r2, r3
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	b21b      	sxth	r3, r3
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	b21b      	sxth	r3, r3
 8005a42:	ee07 3a90 	vmov	s15, r3
 8005a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a4a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005a90 <Read_MPU_Accl+0xa8>
 8005a4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a52:	4b0e      	ldr	r3, [pc, #56]	; (8005a8c <Read_MPU_Accl+0xa4>)
 8005a54:	edc3 7a01 	vstr	s15, [r3, #4]
	accel[2] = (int16_t)((data[4]<<8) | data[5]) - ACCEL_Z_OFFSET;
 8005a58:	793b      	ldrb	r3, [r7, #4]
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	b21a      	sxth	r2, r3
 8005a5e:	797b      	ldrb	r3, [r7, #5]
 8005a60:	b21b      	sxth	r3, r3
 8005a62:	4313      	orrs	r3, r2
 8005a64:	b21b      	sxth	r3, r3
 8005a66:	ee07 3a90 	vmov	s15, r3
 8005a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a6e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005a94 <Read_MPU_Accl+0xac>
 8005a72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a76:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <Read_MPU_Accl+0xa4>)
 8005a78:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8005a7c:	bf00      	nop
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	20007ef8 	.word	0x20007ef8
 8005a88:	433e8000 	.word	0x433e8000
 8005a8c:	20011cf8 	.word	0x20011cf8
 8005a90:	42a00000 	.word	0x42a00000
 8005a94:	4473e000 	.word	0x4473e000

08005a98 <Exchange>:
void Exchange(){
 8005a98:	b598      	push	{r3, r4, r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
	lacceleration_g[0] = acceleration_g[0];
 8005a9c:	4b3a      	ldr	r3, [pc, #232]	; (8005b88 <Exchange+0xf0>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a3a      	ldr	r2, [pc, #232]	; (8005b8c <Exchange+0xf4>)
 8005aa2:	6013      	str	r3, [r2, #0]
	lacceleration_g[1] = acceleration_g[1];
 8005aa4:	4b38      	ldr	r3, [pc, #224]	; (8005b88 <Exchange+0xf0>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4a38      	ldr	r2, [pc, #224]	; (8005b8c <Exchange+0xf4>)
 8005aaa:	6053      	str	r3, [r2, #4]
	lacceleration_g[2] = acceleration_g[2];
 8005aac:	4b36      	ldr	r3, [pc, #216]	; (8005b88 <Exchange+0xf0>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	4a36      	ldr	r2, [pc, #216]	; (8005b8c <Exchange+0xf4>)
 8005ab2:	6093      	str	r3, [r2, #8]
	langular_rate_dps[0] = angular_rate_dps[0];
 8005ab4:	4b36      	ldr	r3, [pc, #216]	; (8005b90 <Exchange+0xf8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a36      	ldr	r2, [pc, #216]	; (8005b94 <Exchange+0xfc>)
 8005aba:	6013      	str	r3, [r2, #0]
	langular_rate_dps[1] = angular_rate_dps[1];
 8005abc:	4b34      	ldr	r3, [pc, #208]	; (8005b90 <Exchange+0xf8>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	4a34      	ldr	r2, [pc, #208]	; (8005b94 <Exchange+0xfc>)
 8005ac2:	6053      	str	r3, [r2, #4]
	langular_rate_dps[2] = angular_rate_dps[2];
 8005ac4:	4b32      	ldr	r3, [pc, #200]	; (8005b90 <Exchange+0xf8>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	4a32      	ldr	r2, [pc, #200]	; (8005b94 <Exchange+0xfc>)
 8005aca:	6093      	str	r3, [r2, #8]

	acceleration_g[0] = (accel[0] / 8192) ;
 8005acc:	4b32      	ldr	r3, [pc, #200]	; (8005b98 <Exchange+0x100>)
 8005ace:	ed93 7a00 	vldr	s14, [r3]
 8005ad2:	eddf 6a32 	vldr	s13, [pc, #200]	; 8005b9c <Exchange+0x104>
 8005ad6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ada:	4b2b      	ldr	r3, [pc, #172]	; (8005b88 <Exchange+0xf0>)
 8005adc:	edc3 7a00 	vstr	s15, [r3]
	acceleration_g[1] = (accel[1] / 8192) ;
 8005ae0:	4b2d      	ldr	r3, [pc, #180]	; (8005b98 <Exchange+0x100>)
 8005ae2:	ed93 7a01 	vldr	s14, [r3, #4]
 8005ae6:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8005b9c <Exchange+0x104>
 8005aea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005aee:	4b26      	ldr	r3, [pc, #152]	; (8005b88 <Exchange+0xf0>)
 8005af0:	edc3 7a01 	vstr	s15, [r3, #4]
	acceleration_g[2] = (accel[2] / 8192) ;
 8005af4:	4b28      	ldr	r3, [pc, #160]	; (8005b98 <Exchange+0x100>)
 8005af6:	ed93 7a02 	vldr	s14, [r3, #8]
 8005afa:	eddf 6a28 	vldr	s13, [pc, #160]	; 8005b9c <Exchange+0x104>
 8005afe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b02:	4b21      	ldr	r3, [pc, #132]	; (8005b88 <Exchange+0xf0>)
 8005b04:	edc3 7a02 	vstr	s15, [r3, #8]

	angular_rate_dps[0] = (gyro[0] /16.4);
 8005b08:	4b25      	ldr	r3, [pc, #148]	; (8005ba0 <Exchange+0x108>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fa fcbf 	bl	8000490 <__aeabi_f2d>
 8005b12:	a31b      	add	r3, pc, #108	; (adr r3, 8005b80 <Exchange+0xe8>)
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	f7fa fe38 	bl	800078c <__aeabi_ddiv>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	460c      	mov	r4, r1
 8005b20:	4618      	mov	r0, r3
 8005b22:	4621      	mov	r1, r4
 8005b24:	f7fa ffe0 	bl	8000ae8 <__aeabi_d2f>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	4b19      	ldr	r3, [pc, #100]	; (8005b90 <Exchange+0xf8>)
 8005b2c:	601a      	str	r2, [r3, #0]
	angular_rate_dps[1] = (gyro[1] /16.4);
 8005b2e:	4b1c      	ldr	r3, [pc, #112]	; (8005ba0 <Exchange+0x108>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fa fcac 	bl	8000490 <__aeabi_f2d>
 8005b38:	a311      	add	r3, pc, #68	; (adr r3, 8005b80 <Exchange+0xe8>)
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	f7fa fe25 	bl	800078c <__aeabi_ddiv>
 8005b42:	4603      	mov	r3, r0
 8005b44:	460c      	mov	r4, r1
 8005b46:	4618      	mov	r0, r3
 8005b48:	4621      	mov	r1, r4
 8005b4a:	f7fa ffcd 	bl	8000ae8 <__aeabi_d2f>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	4b0f      	ldr	r3, [pc, #60]	; (8005b90 <Exchange+0xf8>)
 8005b52:	605a      	str	r2, [r3, #4]
	angular_rate_dps[2] = (gyro[2] /16.4);
 8005b54:	4b12      	ldr	r3, [pc, #72]	; (8005ba0 <Exchange+0x108>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fa fc99 	bl	8000490 <__aeabi_f2d>
 8005b5e:	a308      	add	r3, pc, #32	; (adr r3, 8005b80 <Exchange+0xe8>)
 8005b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b64:	f7fa fe12 	bl	800078c <__aeabi_ddiv>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	4621      	mov	r1, r4
 8005b70:	f7fa ffba 	bl	8000ae8 <__aeabi_d2f>
 8005b74:	4602      	mov	r2, r0
 8005b76:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <Exchange+0xf8>)
 8005b78:	609a      	str	r2, [r3, #8]
}
 8005b7a:	bf00      	nop
 8005b7c:	bd98      	pop	{r3, r4, r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	66666666 	.word	0x66666666
 8005b84:	40306666 	.word	0x40306666
 8005b88:	20013eb8 	.word	0x20013eb8
 8005b8c:	2000fce4 	.word	0x2000fce4
 8005b90:	20013ea8 	.word	0x20013ea8
 8005b94:	20013df0 	.word	0x20013df0
 8005b98:	20011cf8 	.word	0x20011cf8
 8005b9c:	46000000 	.word	0x46000000
 8005ba0:	20013d98 	.word	0x20013d98
 8005ba4:	00000000 	.word	0x00000000

08005ba8 <Filter>:
void Filter(){
 8005ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bac:	af00      	add	r7, sp, #0

	laccRoll = accRoll;
 8005bae:	4bc2      	ldr	r3, [pc, #776]	; (8005eb8 <Filter+0x310>)
 8005bb0:	cb18      	ldmia	r3, {r3, r4}
 8005bb2:	4ac2      	ldr	r2, [pc, #776]	; (8005ebc <Filter+0x314>)
 8005bb4:	e882 0018 	stmia.w	r2, {r3, r4}
	laccPitch = accPitch;
 8005bb8:	4bc1      	ldr	r3, [pc, #772]	; (8005ec0 <Filter+0x318>)
 8005bba:	cb18      	ldmia	r3, {r3, r4}
 8005bbc:	4ac1      	ldr	r2, [pc, #772]	; (8005ec4 <Filter+0x31c>)
 8005bbe:	e882 0018 	stmia.w	r2, {r3, r4}
	//laccYaw = accYaw;
	accRoll = (1-alpha) * TO_DEG(atan2(acceleration_g[0],sqrt(acceleration_g[0] * acceleration_g[0] + acceleration_g[1] * acceleration_g[1] + acceleration_g[2] * acceleration_g[2]))) + alpha * laccRoll;
 8005bc2:	4bc1      	ldr	r3, [pc, #772]	; (8005ec8 <Filter+0x320>)
 8005bc4:	cb18      	ldmia	r3, {r3, r4}
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	4623      	mov	r3, r4
 8005bca:	f04f 0000 	mov.w	r0, #0
 8005bce:	49bf      	ldr	r1, [pc, #764]	; (8005ecc <Filter+0x324>)
 8005bd0:	f7fa fafe 	bl	80001d0 <__aeabi_dsub>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	4625      	mov	r5, r4
 8005bda:	461c      	mov	r4, r3
 8005bdc:	4bbc      	ldr	r3, [pc, #752]	; (8005ed0 <Filter+0x328>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fa fc55 	bl	8000490 <__aeabi_f2d>
 8005be6:	4680      	mov	r8, r0
 8005be8:	4689      	mov	r9, r1
 8005bea:	4bb9      	ldr	r3, [pc, #740]	; (8005ed0 <Filter+0x328>)
 8005bec:	ed93 7a00 	vldr	s14, [r3]
 8005bf0:	4bb7      	ldr	r3, [pc, #732]	; (8005ed0 <Filter+0x328>)
 8005bf2:	edd3 7a00 	vldr	s15, [r3]
 8005bf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bfa:	4bb5      	ldr	r3, [pc, #724]	; (8005ed0 <Filter+0x328>)
 8005bfc:	edd3 6a01 	vldr	s13, [r3, #4]
 8005c00:	4bb3      	ldr	r3, [pc, #716]	; (8005ed0 <Filter+0x328>)
 8005c02:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c0e:	4bb0      	ldr	r3, [pc, #704]	; (8005ed0 <Filter+0x328>)
 8005c10:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c14:	4bae      	ldr	r3, [pc, #696]	; (8005ed0 <Filter+0x328>)
 8005c16:	edd3 7a02 	vldr	s15, [r3, #8]
 8005c1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c22:	ee17 0a90 	vmov	r0, s15
 8005c26:	f7fa fc33 	bl	8000490 <__aeabi_f2d>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	ec43 2b10 	vmov	d0, r2, r3
 8005c32:	f001 f8cf 	bl	8006dd4 <sqrt>
 8005c36:	eeb0 7a40 	vmov.f32	s14, s0
 8005c3a:	eef0 7a60 	vmov.f32	s15, s1
 8005c3e:	eeb0 1a47 	vmov.f32	s2, s14
 8005c42:	eef0 1a67 	vmov.f32	s3, s15
 8005c46:	ec49 8b10 	vmov	d0, r8, r9
 8005c4a:	f001 f8c1 	bl	8006dd0 <atan2>
 8005c4e:	ec51 0b10 	vmov	r0, r1, d0
 8005c52:	a397      	add	r3, pc, #604	; (adr r3, 8005eb0 <Filter+0x308>)
 8005c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c58:	f7fa fc6e 	bl	8000538 <__aeabi_dmul>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4620      	mov	r0, r4
 8005c62:	4629      	mov	r1, r5
 8005c64:	f7fa fc68 	bl	8000538 <__aeabi_dmul>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	461d      	mov	r5, r3
 8005c6e:	4626      	mov	r6, r4
 8005c70:	4b95      	ldr	r3, [pc, #596]	; (8005ec8 <Filter+0x320>)
 8005c72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c76:	4b91      	ldr	r3, [pc, #580]	; (8005ebc <Filter+0x314>)
 8005c78:	cb18      	ldmia	r3, {r3, r4}
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	4623      	mov	r3, r4
 8005c7e:	f7fa fc5b 	bl	8000538 <__aeabi_dmul>
 8005c82:	4603      	mov	r3, r0
 8005c84:	460c      	mov	r4, r1
 8005c86:	461a      	mov	r2, r3
 8005c88:	4623      	mov	r3, r4
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	4631      	mov	r1, r6
 8005c8e:	f7fa faa1 	bl	80001d4 <__adddf3>
 8005c92:	4603      	mov	r3, r0
 8005c94:	460c      	mov	r4, r1
 8005c96:	4a88      	ldr	r2, [pc, #544]	; (8005eb8 <Filter+0x310>)
 8005c98:	e882 0018 	stmia.w	r2, {r3, r4}
	accPitch = (1-alpha) * TO_DEG(atan2(acceleration_g[1],sqrt(acceleration_g[0] * acceleration_g[0] + acceleration_g[1] * acceleration_g[1] + acceleration_g[2] * acceleration_g[2]))) + alpha * laccPitch;
 8005c9c:	4b8a      	ldr	r3, [pc, #552]	; (8005ec8 <Filter+0x320>)
 8005c9e:	cb18      	ldmia	r3, {r3, r4}
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4623      	mov	r3, r4
 8005ca4:	f04f 0000 	mov.w	r0, #0
 8005ca8:	4988      	ldr	r1, [pc, #544]	; (8005ecc <Filter+0x324>)
 8005caa:	f7fa fa91 	bl	80001d0 <__aeabi_dsub>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	4625      	mov	r5, r4
 8005cb4:	461c      	mov	r4, r3
 8005cb6:	4b86      	ldr	r3, [pc, #536]	; (8005ed0 <Filter+0x328>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fa fbe8 	bl	8000490 <__aeabi_f2d>
 8005cc0:	4680      	mov	r8, r0
 8005cc2:	4689      	mov	r9, r1
 8005cc4:	4b82      	ldr	r3, [pc, #520]	; (8005ed0 <Filter+0x328>)
 8005cc6:	ed93 7a00 	vldr	s14, [r3]
 8005cca:	4b81      	ldr	r3, [pc, #516]	; (8005ed0 <Filter+0x328>)
 8005ccc:	edd3 7a00 	vldr	s15, [r3]
 8005cd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cd4:	4b7e      	ldr	r3, [pc, #504]	; (8005ed0 <Filter+0x328>)
 8005cd6:	edd3 6a01 	vldr	s13, [r3, #4]
 8005cda:	4b7d      	ldr	r3, [pc, #500]	; (8005ed0 <Filter+0x328>)
 8005cdc:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ce8:	4b79      	ldr	r3, [pc, #484]	; (8005ed0 <Filter+0x328>)
 8005cea:	edd3 6a02 	vldr	s13, [r3, #8]
 8005cee:	4b78      	ldr	r3, [pc, #480]	; (8005ed0 <Filter+0x328>)
 8005cf0:	edd3 7a02 	vldr	s15, [r3, #8]
 8005cf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cfc:	ee17 0a90 	vmov	r0, s15
 8005d00:	f7fa fbc6 	bl	8000490 <__aeabi_f2d>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	ec43 2b10 	vmov	d0, r2, r3
 8005d0c:	f001 f862 	bl	8006dd4 <sqrt>
 8005d10:	eeb0 7a40 	vmov.f32	s14, s0
 8005d14:	eef0 7a60 	vmov.f32	s15, s1
 8005d18:	eeb0 1a47 	vmov.f32	s2, s14
 8005d1c:	eef0 1a67 	vmov.f32	s3, s15
 8005d20:	ec49 8b10 	vmov	d0, r8, r9
 8005d24:	f001 f854 	bl	8006dd0 <atan2>
 8005d28:	ec51 0b10 	vmov	r0, r1, d0
 8005d2c:	a360      	add	r3, pc, #384	; (adr r3, 8005eb0 <Filter+0x308>)
 8005d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d32:	f7fa fc01 	bl	8000538 <__aeabi_dmul>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	f7fa fbfb 	bl	8000538 <__aeabi_dmul>
 8005d42:	4603      	mov	r3, r0
 8005d44:	460c      	mov	r4, r1
 8005d46:	461d      	mov	r5, r3
 8005d48:	4626      	mov	r6, r4
 8005d4a:	4b5f      	ldr	r3, [pc, #380]	; (8005ec8 <Filter+0x320>)
 8005d4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d50:	4b5c      	ldr	r3, [pc, #368]	; (8005ec4 <Filter+0x31c>)
 8005d52:	cb18      	ldmia	r3, {r3, r4}
 8005d54:	461a      	mov	r2, r3
 8005d56:	4623      	mov	r3, r4
 8005d58:	f7fa fbee 	bl	8000538 <__aeabi_dmul>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	460c      	mov	r4, r1
 8005d60:	461a      	mov	r2, r3
 8005d62:	4623      	mov	r3, r4
 8005d64:	4628      	mov	r0, r5
 8005d66:	4631      	mov	r1, r6
 8005d68:	f7fa fa34 	bl	80001d4 <__adddf3>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	4a53      	ldr	r2, [pc, #332]	; (8005ec0 <Filter+0x318>)
 8005d72:	e882 0018 	stmia.w	r2, {r3, r4}
	//accYaw = (1-alpha) * TO_DEG(atan2(acceleration_g[2],sqrt(acceleration_g[0] * acceleration_g[0] + acceleration_g[1] * acceleration_g[1] + acceleration_g[2] * acceleration_g[2]))) + alpha * laccYaw;

	lgyroRoll = gyroRoll;
 8005d76:	4b57      	ldr	r3, [pc, #348]	; (8005ed4 <Filter+0x32c>)
 8005d78:	cb18      	ldmia	r3, {r3, r4}
 8005d7a:	4a57      	ldr	r2, [pc, #348]	; (8005ed8 <Filter+0x330>)
 8005d7c:	e882 0018 	stmia.w	r2, {r3, r4}
	lgyroPitch = gyroPitch;
 8005d80:	4b56      	ldr	r3, [pc, #344]	; (8005edc <Filter+0x334>)
 8005d82:	cb18      	ldmia	r3, {r3, r4}
 8005d84:	4a56      	ldr	r2, [pc, #344]	; (8005ee0 <Filter+0x338>)
 8005d86:	e882 0018 	stmia.w	r2, {r3, r4}
	//lgyroYaw = gyroYaw;
	gyroRoll = (1-alpha) * lgyroRoll + (1-alpha)*(angular_rate_dps[0]-langular_rate_dps[0]);
 8005d8a:	4b4f      	ldr	r3, [pc, #316]	; (8005ec8 <Filter+0x320>)
 8005d8c:	cb18      	ldmia	r3, {r3, r4}
 8005d8e:	461a      	mov	r2, r3
 8005d90:	4623      	mov	r3, r4
 8005d92:	f04f 0000 	mov.w	r0, #0
 8005d96:	494d      	ldr	r1, [pc, #308]	; (8005ecc <Filter+0x324>)
 8005d98:	f7fa fa1a 	bl	80001d0 <__aeabi_dsub>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	460c      	mov	r4, r1
 8005da0:	4618      	mov	r0, r3
 8005da2:	4621      	mov	r1, r4
 8005da4:	4b4c      	ldr	r3, [pc, #304]	; (8005ed8 <Filter+0x330>)
 8005da6:	cb18      	ldmia	r3, {r3, r4}
 8005da8:	461a      	mov	r2, r3
 8005daa:	4623      	mov	r3, r4
 8005dac:	f7fa fbc4 	bl	8000538 <__aeabi_dmul>
 8005db0:	4603      	mov	r3, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	461d      	mov	r5, r3
 8005db6:	4626      	mov	r6, r4
 8005db8:	4b43      	ldr	r3, [pc, #268]	; (8005ec8 <Filter+0x320>)
 8005dba:	cb18      	ldmia	r3, {r3, r4}
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	4623      	mov	r3, r4
 8005dc0:	f04f 0000 	mov.w	r0, #0
 8005dc4:	4941      	ldr	r1, [pc, #260]	; (8005ecc <Filter+0x324>)
 8005dc6:	f7fa fa03 	bl	80001d0 <__aeabi_dsub>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	460c      	mov	r4, r1
 8005dce:	4698      	mov	r8, r3
 8005dd0:	46a1      	mov	r9, r4
 8005dd2:	4b44      	ldr	r3, [pc, #272]	; (8005ee4 <Filter+0x33c>)
 8005dd4:	ed93 7a00 	vldr	s14, [r3]
 8005dd8:	4b43      	ldr	r3, [pc, #268]	; (8005ee8 <Filter+0x340>)
 8005dda:	edd3 7a00 	vldr	s15, [r3]
 8005dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005de2:	ee17 0a90 	vmov	r0, s15
 8005de6:	f7fa fb53 	bl	8000490 <__aeabi_f2d>
 8005dea:	4603      	mov	r3, r0
 8005dec:	460c      	mov	r4, r1
 8005dee:	461a      	mov	r2, r3
 8005df0:	4623      	mov	r3, r4
 8005df2:	4640      	mov	r0, r8
 8005df4:	4649      	mov	r1, r9
 8005df6:	f7fa fb9f 	bl	8000538 <__aeabi_dmul>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	461a      	mov	r2, r3
 8005e00:	4623      	mov	r3, r4
 8005e02:	4628      	mov	r0, r5
 8005e04:	4631      	mov	r1, r6
 8005e06:	f7fa f9e5 	bl	80001d4 <__adddf3>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	4a31      	ldr	r2, [pc, #196]	; (8005ed4 <Filter+0x32c>)
 8005e10:	e882 0018 	stmia.w	r2, {r3, r4}
	gyroPitch =(1-alpha) * lgyroPitch + (1-alpha)*(angular_rate_dps[1]-langular_rate_dps[1]);
 8005e14:	4b2c      	ldr	r3, [pc, #176]	; (8005ec8 <Filter+0x320>)
 8005e16:	cb18      	ldmia	r3, {r3, r4}
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4623      	mov	r3, r4
 8005e1c:	f04f 0000 	mov.w	r0, #0
 8005e20:	492a      	ldr	r1, [pc, #168]	; (8005ecc <Filter+0x324>)
 8005e22:	f7fa f9d5 	bl	80001d0 <__aeabi_dsub>
 8005e26:	4603      	mov	r3, r0
 8005e28:	460c      	mov	r4, r1
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	4b2c      	ldr	r3, [pc, #176]	; (8005ee0 <Filter+0x338>)
 8005e30:	cb18      	ldmia	r3, {r3, r4}
 8005e32:	461a      	mov	r2, r3
 8005e34:	4623      	mov	r3, r4
 8005e36:	f7fa fb7f 	bl	8000538 <__aeabi_dmul>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	461d      	mov	r5, r3
 8005e40:	4626      	mov	r6, r4
 8005e42:	4b21      	ldr	r3, [pc, #132]	; (8005ec8 <Filter+0x320>)
 8005e44:	cb18      	ldmia	r3, {r3, r4}
 8005e46:	461a      	mov	r2, r3
 8005e48:	4623      	mov	r3, r4
 8005e4a:	f04f 0000 	mov.w	r0, #0
 8005e4e:	491f      	ldr	r1, [pc, #124]	; (8005ecc <Filter+0x324>)
 8005e50:	f7fa f9be 	bl	80001d0 <__aeabi_dsub>
 8005e54:	4603      	mov	r3, r0
 8005e56:	460c      	mov	r4, r1
 8005e58:	4698      	mov	r8, r3
 8005e5a:	46a1      	mov	r9, r4
 8005e5c:	4b21      	ldr	r3, [pc, #132]	; (8005ee4 <Filter+0x33c>)
 8005e5e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005e62:	4b21      	ldr	r3, [pc, #132]	; (8005ee8 <Filter+0x340>)
 8005e64:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e6c:	ee17 0a90 	vmov	r0, s15
 8005e70:	f7fa fb0e 	bl	8000490 <__aeabi_f2d>
 8005e74:	4603      	mov	r3, r0
 8005e76:	460c      	mov	r4, r1
 8005e78:	461a      	mov	r2, r3
 8005e7a:	4623      	mov	r3, r4
 8005e7c:	4640      	mov	r0, r8
 8005e7e:	4649      	mov	r1, r9
 8005e80:	f7fa fb5a 	bl	8000538 <__aeabi_dmul>
 8005e84:	4603      	mov	r3, r0
 8005e86:	460c      	mov	r4, r1
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4623      	mov	r3, r4
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	4631      	mov	r1, r6
 8005e90:	f7fa f9a0 	bl	80001d4 <__adddf3>
 8005e94:	4603      	mov	r3, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	4a10      	ldr	r2, [pc, #64]	; (8005edc <Filter+0x334>)
 8005e9a:	e882 0018 	stmia.w	r2, {r3, r4}
	//gyroPitch =(1-alpha) * lgyroYaw + (1-alpha)*(angular_rate_dps[2]-langular_rate_dps[2]);


	timeElapsed = HAL_GetTick() - lastMeasurment;
 8005e9e:	f7fb fc39 	bl	8001714 <HAL_GetTick>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fa fad1 	bl	800044c <__aeabi_ui2d>
 8005eaa:	4b10      	ldr	r3, [pc, #64]	; (8005eec <Filter+0x344>)
 8005eac:	e020      	b.n	8005ef0 <Filter+0x348>
 8005eae:	bf00      	nop
 8005eb0:	1a63cbb0 	.word	0x1a63cbb0
 8005eb4:	404ca5dc 	.word	0x404ca5dc
 8005eb8:	20007f80 	.word	0x20007f80
 8005ebc:	20007f68 	.word	0x20007f68
 8005ec0:	20007f98 	.word	0x20007f98
 8005ec4:	20007fa0 	.word	0x20007fa0
 8005ec8:	20013ee0 	.word	0x20013ee0
 8005ecc:	3ff00000 	.word	0x3ff00000
 8005ed0:	20013eb8 	.word	0x20013eb8
 8005ed4:	20007f48 	.word	0x20007f48
 8005ed8:	20007f78 	.word	0x20007f78
 8005edc:	20007f58 	.word	0x20007f58
 8005ee0:	20007f88 	.word	0x20007f88
 8005ee4:	20013ea8 	.word	0x20013ea8
 8005ee8:	20013df0 	.word	0x20013df0
 8005eec:	20013e58 	.word	0x20013e58
 8005ef0:	cb18      	ldmia	r3, {r3, r4}
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	4623      	mov	r3, r4
 8005ef6:	f7fa f96b 	bl	80001d0 <__aeabi_dsub>
 8005efa:	4603      	mov	r3, r0
 8005efc:	460c      	mov	r4, r1
 8005efe:	4a60      	ldr	r2, [pc, #384]	; (8006080 <Filter+0x4d8>)
 8005f00:	e882 0018 	stmia.w	r2, {r3, r4}
	lastMeasurment = HAL_GetTick();
 8005f04:	f7fb fc06 	bl	8001714 <HAL_GetTick>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fa fa9e 	bl	800044c <__aeabi_ui2d>
 8005f10:	4603      	mov	r3, r0
 8005f12:	460c      	mov	r4, r1
 8005f14:	4a5b      	ldr	r2, [pc, #364]	; (8006084 <Filter+0x4dc>)
 8005f16:	e882 0018 	stmia.w	r2, {r3, r4}

	roll_tmp = ((1 - alpha) * (roll_tmp + gyroRoll * timeElapsed / 1000.0) + alpha * accRoll);
 8005f1a:	4b5b      	ldr	r3, [pc, #364]	; (8006088 <Filter+0x4e0>)
 8005f1c:	cb18      	ldmia	r3, {r3, r4}
 8005f1e:	461a      	mov	r2, r3
 8005f20:	4623      	mov	r3, r4
 8005f22:	f04f 0000 	mov.w	r0, #0
 8005f26:	4959      	ldr	r1, [pc, #356]	; (800608c <Filter+0x4e4>)
 8005f28:	f7fa f952 	bl	80001d0 <__aeabi_dsub>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	461d      	mov	r5, r3
 8005f32:	4626      	mov	r6, r4
 8005f34:	4b56      	ldr	r3, [pc, #344]	; (8006090 <Filter+0x4e8>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fa faa9 	bl	8000490 <__aeabi_f2d>
 8005f3e:	4680      	mov	r8, r0
 8005f40:	4689      	mov	r9, r1
 8005f42:	4b54      	ldr	r3, [pc, #336]	; (8006094 <Filter+0x4ec>)
 8005f44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f48:	4b4d      	ldr	r3, [pc, #308]	; (8006080 <Filter+0x4d8>)
 8005f4a:	cb18      	ldmia	r3, {r3, r4}
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4623      	mov	r3, r4
 8005f50:	f7fa faf2 	bl	8000538 <__aeabi_dmul>
 8005f54:	4603      	mov	r3, r0
 8005f56:	460c      	mov	r4, r1
 8005f58:	4618      	mov	r0, r3
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	f04f 0200 	mov.w	r2, #0
 8005f60:	4b4d      	ldr	r3, [pc, #308]	; (8006098 <Filter+0x4f0>)
 8005f62:	f7fa fc13 	bl	800078c <__aeabi_ddiv>
 8005f66:	4603      	mov	r3, r0
 8005f68:	460c      	mov	r4, r1
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	4623      	mov	r3, r4
 8005f6e:	4640      	mov	r0, r8
 8005f70:	4649      	mov	r1, r9
 8005f72:	f7fa f92f 	bl	80001d4 <__adddf3>
 8005f76:	4603      	mov	r3, r0
 8005f78:	460c      	mov	r4, r1
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	4623      	mov	r3, r4
 8005f7e:	4628      	mov	r0, r5
 8005f80:	4631      	mov	r1, r6
 8005f82:	f7fa fad9 	bl	8000538 <__aeabi_dmul>
 8005f86:	4603      	mov	r3, r0
 8005f88:	460c      	mov	r4, r1
 8005f8a:	461d      	mov	r5, r3
 8005f8c:	4626      	mov	r6, r4
 8005f8e:	4b3e      	ldr	r3, [pc, #248]	; (8006088 <Filter+0x4e0>)
 8005f90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f94:	4b41      	ldr	r3, [pc, #260]	; (800609c <Filter+0x4f4>)
 8005f96:	cb18      	ldmia	r3, {r3, r4}
 8005f98:	461a      	mov	r2, r3
 8005f9a:	4623      	mov	r3, r4
 8005f9c:	f7fa facc 	bl	8000538 <__aeabi_dmul>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4623      	mov	r3, r4
 8005fa8:	4628      	mov	r0, r5
 8005faa:	4631      	mov	r1, r6
 8005fac:	f7fa f912 	bl	80001d4 <__adddf3>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	f7fa fd96 	bl	8000ae8 <__aeabi_d2f>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	4b34      	ldr	r3, [pc, #208]	; (8006090 <Filter+0x4e8>)
 8005fc0:	601a      	str	r2, [r3, #0]
	pitch_tmp = ((1 - alpha) * (pitch_tmp + gyroPitch * timeElapsed / 1000.0) + alpha * accPitch);
 8005fc2:	4b31      	ldr	r3, [pc, #196]	; (8006088 <Filter+0x4e0>)
 8005fc4:	cb18      	ldmia	r3, {r3, r4}
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	4623      	mov	r3, r4
 8005fca:	f04f 0000 	mov.w	r0, #0
 8005fce:	492f      	ldr	r1, [pc, #188]	; (800608c <Filter+0x4e4>)
 8005fd0:	f7fa f8fe 	bl	80001d0 <__aeabi_dsub>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	461d      	mov	r5, r3
 8005fda:	4626      	mov	r6, r4
 8005fdc:	4b30      	ldr	r3, [pc, #192]	; (80060a0 <Filter+0x4f8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fa fa55 	bl	8000490 <__aeabi_f2d>
 8005fe6:	4680      	mov	r8, r0
 8005fe8:	4689      	mov	r9, r1
 8005fea:	4b2e      	ldr	r3, [pc, #184]	; (80060a4 <Filter+0x4fc>)
 8005fec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ff0:	4b23      	ldr	r3, [pc, #140]	; (8006080 <Filter+0x4d8>)
 8005ff2:	cb18      	ldmia	r3, {r3, r4}
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	4623      	mov	r3, r4
 8005ff8:	f7fa fa9e 	bl	8000538 <__aeabi_dmul>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	460c      	mov	r4, r1
 8006000:	4618      	mov	r0, r3
 8006002:	4621      	mov	r1, r4
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	4b23      	ldr	r3, [pc, #140]	; (8006098 <Filter+0x4f0>)
 800600a:	f7fa fbbf 	bl	800078c <__aeabi_ddiv>
 800600e:	4603      	mov	r3, r0
 8006010:	460c      	mov	r4, r1
 8006012:	461a      	mov	r2, r3
 8006014:	4623      	mov	r3, r4
 8006016:	4640      	mov	r0, r8
 8006018:	4649      	mov	r1, r9
 800601a:	f7fa f8db 	bl	80001d4 <__adddf3>
 800601e:	4603      	mov	r3, r0
 8006020:	460c      	mov	r4, r1
 8006022:	461a      	mov	r2, r3
 8006024:	4623      	mov	r3, r4
 8006026:	4628      	mov	r0, r5
 8006028:	4631      	mov	r1, r6
 800602a:	f7fa fa85 	bl	8000538 <__aeabi_dmul>
 800602e:	4603      	mov	r3, r0
 8006030:	460c      	mov	r4, r1
 8006032:	461d      	mov	r5, r3
 8006034:	4626      	mov	r6, r4
 8006036:	4b14      	ldr	r3, [pc, #80]	; (8006088 <Filter+0x4e0>)
 8006038:	e9d3 0100 	ldrd	r0, r1, [r3]
 800603c:	4b1a      	ldr	r3, [pc, #104]	; (80060a8 <Filter+0x500>)
 800603e:	cb18      	ldmia	r3, {r3, r4}
 8006040:	461a      	mov	r2, r3
 8006042:	4623      	mov	r3, r4
 8006044:	f7fa fa78 	bl	8000538 <__aeabi_dmul>
 8006048:	4603      	mov	r3, r0
 800604a:	460c      	mov	r4, r1
 800604c:	461a      	mov	r2, r3
 800604e:	4623      	mov	r3, r4
 8006050:	4628      	mov	r0, r5
 8006052:	4631      	mov	r1, r6
 8006054:	f7fa f8be 	bl	80001d4 <__adddf3>
 8006058:	4603      	mov	r3, r0
 800605a:	460c      	mov	r4, r1
 800605c:	4618      	mov	r0, r3
 800605e:	4621      	mov	r1, r4
 8006060:	f7fa fd42 	bl	8000ae8 <__aeabi_d2f>
 8006064:	4602      	mov	r2, r0
 8006066:	4b0e      	ldr	r3, [pc, #56]	; (80060a0 <Filter+0x4f8>)
 8006068:	601a      	str	r2, [r3, #0]
	//yaw = ((1 - alpha) * (yaw + gyroYaw * timeElapsed / 1000.0) + alpha * accYaw);

	roll = roll_tmp;
 800606a:	4b09      	ldr	r3, [pc, #36]	; (8006090 <Filter+0x4e8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a0f      	ldr	r2, [pc, #60]	; (80060ac <Filter+0x504>)
 8006070:	6013      	str	r3, [r2, #0]
	pitch = pitch_tmp;
 8006072:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <Filter+0x4f8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a0e      	ldr	r2, [pc, #56]	; (80060b0 <Filter+0x508>)
 8006078:	6013      	str	r3, [r2, #0]
}
 800607a:	bf00      	nop
 800607c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006080:	20013ed8 	.word	0x20013ed8
 8006084:	20013e58 	.word	0x20013e58
 8006088:	20013ee0 	.word	0x20013ee0
 800608c:	3ff00000 	.word	0x3ff00000
 8006090:	2000fca8 	.word	0x2000fca8
 8006094:	20007f48 	.word	0x20007f48
 8006098:	408f4000 	.word	0x408f4000
 800609c:	20007f80 	.word	0x20007f80
 80060a0:	20013e50 	.word	0x20013e50
 80060a4:	20007f58 	.word	0x20007f58
 80060a8:	20007f98 	.word	0x20007f98
 80060ac:	20013ecc 	.word	0x20013ecc
 80060b0:	20013ec8 	.word	0x20013ec8

080060b4 <SineWave_generate>:
	hsin->amp = 1.0;
	hsin->freq = 1000;
}

void SineWave_generate(SineWaveHandler hsin, float freq, float amp)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	ed2d 8b02 	vpush	{d8}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80060c4:	edc7 0a01 	vstr	s1, [r7, #4]
	hsin->freq = freq;
 80060c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80060cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060d0:	edc7 7a00 	vstr	s15, [r7]
 80060d4:	883b      	ldrh	r3, [r7, #0]
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	809a      	strh	r2, [r3, #4]
	hsin->amp = amp;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	601a      	str	r2, [r3, #0]
	//hsin->sampleNum = hsin->freq;
	float32_t step = 2.0*PI/12000;
 80060e2:	4b2b      	ldr	r3, [pc, #172]	; (8006190 <SineWave_generate+0xdc>)
 80060e4:	617b      	str	r3, [r7, #20]
	hsin->sampleNum = 12000;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80060ec:	60da      	str	r2, [r3, #12]
	float32_t pos = 0;
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	61fb      	str	r3, [r7, #28]
	float32_t sample;
	for(uint32_t i=0; i<hsin->sampleNum; i+=2)
 80060f4:	2300      	movs	r3, #0
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	e03b      	b.n	8006172 <SineWave_generate+0xbe>
	{
		sample = hsin->amp*((arm_sin_f32(hsin->freq*pos))*(INT16_MAX));
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	ed93 8a00 	vldr	s16, [r3]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	889b      	ldrh	r3, [r3, #4]
 8006104:	ee07 3a90 	vmov	s15, r3
 8006108:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800610c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006114:	eeb0 0a67 	vmov.f32	s0, s15
 8006118:	f000 fd94 	bl	8006c44 <arm_sin_f32>
 800611c:	eeb0 7a40 	vmov.f32	s14, s0
 8006120:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8006194 <SineWave_generate+0xe0>
 8006124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006128:	ee68 7a27 	vmul.f32	s15, s16, s15
 800612c:	edc7 7a04 	vstr	s15, [r7, #16]
		prepare[i]= (uint16_t)sample;
 8006130:	edd7 7a04 	vldr	s15, [r7, #16]
 8006134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006138:	edc7 7a00 	vstr	s15, [r7]
 800613c:	883b      	ldrh	r3, [r7, #0]
 800613e:	b29b      	uxth	r3, r3
 8006140:	b219      	sxth	r1, r3
 8006142:	4a15      	ldr	r2, [pc, #84]	; (8006198 <SineWave_generate+0xe4>)
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		prepare[i+1] = prepare[i];
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	3301      	adds	r3, #1
 800614e:	4912      	ldr	r1, [pc, #72]	; (8006198 <SineWave_generate+0xe4>)
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8006156:	4a10      	ldr	r2, [pc, #64]	; (8006198 <SineWave_generate+0xe4>)
 8006158:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		//sampleShow = lookup[i];
		pos+=step;
 800615c:	ed97 7a07 	vldr	s14, [r7, #28]
 8006160:	edd7 7a05 	vldr	s15, [r7, #20]
 8006164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006168:	edc7 7a07 	vstr	s15, [r7, #28]
	for(uint32_t i=0; i<hsin->sampleNum; i+=2)
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	3302      	adds	r3, #2
 8006170:	61bb      	str	r3, [r7, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	429a      	cmp	r2, r3
 800617a:	d8be      	bhi.n	80060fa <SineWave_generate+0x46>
	}
	hsin->data = prepare;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4a06      	ldr	r2, [pc, #24]	; (8006198 <SineWave_generate+0xe4>)
 8006180:	609a      	str	r2, [r3, #8]
}
 8006182:	bf00      	nop
 8006184:	3720      	adds	r7, #32
 8006186:	46bd      	mov	sp, r7
 8006188:	ecbd 8b02 	vpop	{d8}
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	3a09421f 	.word	0x3a09421f
 8006194:	46fffe00 	.word	0x46fffe00
 8006198:	200001a0 	.word	0x200001a0

0800619c <MX_GPIO_Init>:
void SystemClock_Config(void);
static void DFSDM_Init(void);
static void Playback_Init(void);
/* Private functions ---------------------------------------------------------*/
static void MX_GPIO_Init(void)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061a2:	1d3b      	adds	r3, r7, #4
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	605a      	str	r2, [r3, #4]
 80061aa:	609a      	str	r2, [r3, #8]
 80061ac:	60da      	str	r2, [r3, #12]
 80061ae:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061b0:	4a11      	ldr	r2, [pc, #68]	; (80061f8 <MX_GPIO_Init+0x5c>)
 80061b2:	4b11      	ldr	r3, [pc, #68]	; (80061f8 <MX_GPIO_Init+0x5c>)
 80061b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b6:	f043 0301 	orr.w	r3, r3, #1
 80061ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061bc:	4b0e      	ldr	r3, [pc, #56]	; (80061f8 <MX_GPIO_Init+0x5c>)
 80061be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	603b      	str	r3, [r7, #0]
 80061c6:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XSHUT_GPIO_Port, XSHUT_Pin, GPIO_PIN_RESET);
 80061c8:	2200      	movs	r2, #0
 80061ca:	2101      	movs	r1, #1
 80061cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061d0:	f7fc fbce 	bl	8002970 <HAL_GPIO_WritePin>


  /*Configure GPIO pin : XSHUT_Pin */
  GPIO_InitStruct.Pin = XSHUT_Pin;
 80061d4:	2301      	movs	r3, #1
 80061d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061d8:	2301      	movs	r3, #1
 80061da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061dc:	2300      	movs	r3, #0
 80061de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061e0:	2300      	movs	r3, #0
 80061e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(XSHUT_GPIO_Port, &GPIO_InitStruct);
 80061e4:	1d3b      	adds	r3, r7, #4
 80061e6:	4619      	mov	r1, r3
 80061e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061ec:	f7fc f924 	bl	8002438 <HAL_GPIO_Init>

}
 80061f0:	bf00      	nop
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40021000 	.word	0x40021000
 80061fc:	00000000 	.word	0x00000000

08006200 <main>:
int main(void)
{
 8006200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
	HAL_Init();
 8006208:	f7fb fa3a 	bl	8001680 <HAL_Init>

	SystemClock_Config();
 800620c:	f000 f918 	bl	8006440 <SystemClock_Config>
	MX_GPIO_Init();
 8006210:	f7ff ffc4 	bl	800619c <MX_GPIO_Init>
	DFSDM_Init();
 8006214:	f000 f974 	bl	8006500 <DFSDM_Init>
	Playback_Init();
 8006218:	f000 f9f0 	bl	80065fc <Playback_Init>
	alpha=0.5;
 800621c:	4a78      	ldr	r2, [pc, #480]	; (8006400 <main+0x200>)
 800621e:	f04f 0300 	mov.w	r3, #0
 8006222:	4c78      	ldr	r4, [pc, #480]	; (8006404 <main+0x204>)
 8006224:	e882 0018 	stmia.w	r2, {r3, r4}
	Init_MPU();
 8006228:	f7ff fb5a 	bl	80058e0 <Init_MPU>

	if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&DfsdmFilterHandle, RecBuff, 2048))
 800622c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006230:	4975      	ldr	r1, [pc, #468]	; (8006408 <main+0x208>)
 8006232:	4876      	ldr	r0, [pc, #472]	; (800640c <main+0x20c>)
 8006234:	f7fb fdac 	bl	8001d90 <HAL_DFSDM_FilterRegularStart_DMA>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <main+0x42>
	{
		Error_Handler();
 800623e:	f000 fa6b 	bl	8006718 <Error_Handler>
	}


	SineWave_generate(hsin, 100, 1);
 8006242:	4b73      	ldr	r3, [pc, #460]	; (8006410 <main+0x210>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800624a:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8006414 <main+0x214>
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff ff30 	bl	80060b4 <SineWave_generate>
	audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *) hsin->data, hsin->sampleNum);
 8006254:	4b70      	ldr	r3, [pc, #448]	; (8006418 <main+0x218>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	4a6d      	ldr	r2, [pc, #436]	; (8006410 <main+0x210>)
 800625c:	6812      	ldr	r2, [r2, #0]
 800625e:	6891      	ldr	r1, [r2, #8]
 8006260:	4a6b      	ldr	r2, [pc, #428]	; (8006410 <main+0x210>)
 8006262:	6812      	ldr	r2, [r2, #0]
 8006264:	68d2      	ldr	r2, [r2, #12]
 8006266:	b292      	uxth	r2, r2
 8006268:	2094      	movs	r0, #148	; 0x94
 800626a:	4798      	blx	r3
	HAL_SAI_Transmit_DMA(&SaiHandle, (uint8_t *) hsin->data,  hsin->sampleNum);
 800626c:	4b68      	ldr	r3, [pc, #416]	; (8006410 <main+0x210>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6899      	ldr	r1, [r3, #8]
 8006272:	4b67      	ldr	r3, [pc, #412]	; (8006410 <main+0x210>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	b29b      	uxth	r3, r3
 800627a:	461a      	mov	r2, r3
 800627c:	4867      	ldr	r0, [pc, #412]	; (800641c <main+0x21c>)
 800627e:	f7ff f9ad 	bl	80055dc <HAL_SAI_Transmit_DMA>
	timestamp=HAL_GetTick();
 8006282:	f7fb fa47 	bl	8001714 <HAL_GetTick>
 8006286:	4603      	mov	r3, r0
 8006288:	4618      	mov	r0, r3
 800628a:	f7fa f8df 	bl	800044c <__aeabi_ui2d>
 800628e:	4603      	mov	r3, r0
 8006290:	460c      	mov	r4, r1
 8006292:	4a63      	ldr	r2, [pc, #396]	; (8006420 <main+0x220>)
 8006294:	e882 0018 	stmia.w	r2, {r3, r4}
	while(1)
	{
		if(timestamp+20<HAL_GetTick()){
 8006298:	4b61      	ldr	r3, [pc, #388]	; (8006420 <main+0x220>)
 800629a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	4b60      	ldr	r3, [pc, #384]	; (8006424 <main+0x224>)
 80062a4:	f7f9 ff96 	bl	80001d4 <__adddf3>
 80062a8:	4603      	mov	r3, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	4698      	mov	r8, r3
 80062ae:	46a1      	mov	r9, r4
 80062b0:	f7fb fa30 	bl	8001714 <HAL_GetTick>
 80062b4:	4603      	mov	r3, r0
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fa f8c8 	bl	800044c <__aeabi_ui2d>
 80062bc:	4603      	mov	r3, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	461a      	mov	r2, r3
 80062c2:	4623      	mov	r3, r4
 80062c4:	4640      	mov	r0, r8
 80062c6:	4649      	mov	r1, r9
 80062c8:	f7fa fba8 	bl	8000a1c <__aeabi_dcmplt>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0e2      	beq.n	8006298 <main+0x98>
			Read_MPU_Gyro();
 80062d2:	f7ff fb43 	bl	800595c <Read_MPU_Gyro>
			Read_MPU_Accl();
 80062d6:	f7ff fb87 	bl	80059e8 <Read_MPU_Accl>
			Exchange();
 80062da:	f7ff fbdd 	bl	8005a98 <Exchange>
			Filter();
 80062de:	f7ff fc63 	bl	8005ba8 <Filter>
			hsin->amp=debug_volume= fabs(sin(TO_RAD(roll)));
 80062e2:	4b4b      	ldr	r3, [pc, #300]	; (8006410 <main+0x210>)
 80062e4:	681c      	ldr	r4, [r3, #0]
 80062e6:	4b50      	ldr	r3, [pc, #320]	; (8006428 <main+0x228>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fa f8d0 	bl	8000490 <__aeabi_f2d>
 80062f0:	a33f      	add	r3, pc, #252	; (adr r3, 80063f0 <main+0x1f0>)
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	f7fa f91f 	bl	8000538 <__aeabi_dmul>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	ec43 2b17 	vmov	d7, r2, r3
 8006302:	eeb0 0a47 	vmov.f32	s0, s14
 8006306:	eef0 0a67 	vmov.f32	s1, s15
 800630a:	f000 fd19 	bl	8006d40 <sin>
 800630e:	ec53 2b10 	vmov	r2, r3, d0
 8006312:	4610      	mov	r0, r2
 8006314:	4619      	mov	r1, r3
 8006316:	f7fa fbe7 	bl	8000ae8 <__aeabi_d2f>
 800631a:	ee07 0a90 	vmov	s15, r0
 800631e:	eef0 7ae7 	vabs.f32	s15, s15
 8006322:	4b42      	ldr	r3, [pc, #264]	; (800642c <main+0x22c>)
 8006324:	edc3 7a00 	vstr	s15, [r3]
 8006328:	4b40      	ldr	r3, [pc, #256]	; (800642c <main+0x22c>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6023      	str	r3, [r4, #0]
			real_freq=500.0f+3000.0f*fabs(sin(TO_RAD(pitch)));
 800632e:	4b40      	ldr	r3, [pc, #256]	; (8006430 <main+0x230>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4618      	mov	r0, r3
 8006334:	f7fa f8ac 	bl	8000490 <__aeabi_f2d>
 8006338:	a32d      	add	r3, pc, #180	; (adr r3, 80063f0 <main+0x1f0>)
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	f7fa f8fb 	bl	8000538 <__aeabi_dmul>
 8006342:	4603      	mov	r3, r0
 8006344:	460c      	mov	r4, r1
 8006346:	ec44 3b17 	vmov	d7, r3, r4
 800634a:	eeb0 0a47 	vmov.f32	s0, s14
 800634e:	eef0 0a67 	vmov.f32	s1, s15
 8006352:	f000 fcf5 	bl	8006d40 <sin>
 8006356:	ec54 3b10 	vmov	r3, r4, d0
 800635a:	461d      	mov	r5, r3
 800635c:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 8006360:	a325      	add	r3, pc, #148	; (adr r3, 80063f8 <main+0x1f8>)
 8006362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006366:	4628      	mov	r0, r5
 8006368:	4631      	mov	r1, r6
 800636a:	f7fa f8e5 	bl	8000538 <__aeabi_dmul>
 800636e:	4603      	mov	r3, r0
 8006370:	460c      	mov	r4, r1
 8006372:	4618      	mov	r0, r3
 8006374:	4621      	mov	r1, r4
 8006376:	f04f 0200 	mov.w	r2, #0
 800637a:	4b2e      	ldr	r3, [pc, #184]	; (8006434 <main+0x234>)
 800637c:	f7f9 ff2a 	bl	80001d4 <__adddf3>
 8006380:	4603      	mov	r3, r0
 8006382:	460c      	mov	r4, r1
 8006384:	4618      	mov	r0, r3
 8006386:	4621      	mov	r1, r4
 8006388:	f7fa fbae 	bl	8000ae8 <__aeabi_d2f>
 800638c:	4602      	mov	r2, r0
 800638e:	4b2a      	ldr	r3, [pc, #168]	; (8006438 <main+0x238>)
 8006390:	601a      	str	r2, [r3, #0]
			debug_freq=hsin->freq =real_freq;
 8006392:	4b1f      	ldr	r3, [pc, #124]	; (8006410 <main+0x210>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a28      	ldr	r2, [pc, #160]	; (8006438 <main+0x238>)
 8006398:	edd2 7a00 	vldr	s15, [r2]
 800639c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063a0:	edc7 7a01 	vstr	s15, [r7, #4]
 80063a4:	88ba      	ldrh	r2, [r7, #4]
 80063a6:	b292      	uxth	r2, r2
 80063a8:	809a      	strh	r2, [r3, #4]
 80063aa:	889b      	ldrh	r3, [r3, #4]
 80063ac:	ee07 3a90 	vmov	s15, r3
 80063b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b4:	4b21      	ldr	r3, [pc, #132]	; (800643c <main+0x23c>)
 80063b6:	edc3 7a00 	vstr	s15, [r3]
			SineWave_generate(hsin, real_freq, debug_volume);
 80063ba:	4b15      	ldr	r3, [pc, #84]	; (8006410 <main+0x210>)
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	4b1e      	ldr	r3, [pc, #120]	; (8006438 <main+0x238>)
 80063c0:	edd3 7a00 	vldr	s15, [r3]
 80063c4:	4b19      	ldr	r3, [pc, #100]	; (800642c <main+0x22c>)
 80063c6:	ed93 7a00 	vldr	s14, [r3]
 80063ca:	eef0 0a47 	vmov.f32	s1, s14
 80063ce:	eeb0 0a67 	vmov.f32	s0, s15
 80063d2:	4610      	mov	r0, r2
 80063d4:	f7ff fe6e 	bl	80060b4 <SineWave_generate>
			timestamp=HAL_GetTick();
 80063d8:	f7fb f99c 	bl	8001714 <HAL_GetTick>
 80063dc:	4603      	mov	r3, r0
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fa f834 	bl	800044c <__aeabi_ui2d>
 80063e4:	4603      	mov	r3, r0
 80063e6:	460c      	mov	r4, r1
 80063e8:	4a0d      	ldr	r2, [pc, #52]	; (8006420 <main+0x220>)
 80063ea:	e882 0018 	stmia.w	r2, {r3, r4}
		if(timestamp+20<HAL_GetTick()){
 80063ee:	e753      	b.n	8006298 <main+0x98>
 80063f0:	a252dd11 	.word	0xa252dd11
 80063f4:	3f91df46 	.word	0x3f91df46
 80063f8:	00000000 	.word	0x00000000
 80063fc:	40a77000 	.word	0x40a77000
 8006400:	20013ee0 	.word	0x20013ee0
 8006404:	3fe00000 	.word	0x3fe00000
 8006408:	2000fcf8 	.word	0x2000fcf8
 800640c:	20013dfc 	.word	0x20013dfc
 8006410:	20000038 	.word	0x20000038
 8006414:	42c80000 	.word	0x42c80000
 8006418:	20013dec 	.word	0x20013dec
 800641c:	20013d04 	.word	0x20013d04
 8006420:	2000fcf0 	.word	0x2000fcf0
 8006424:	40340000 	.word	0x40340000
 8006428:	20013ecc 	.word	0x20013ecc
 800642c:	20013ed0 	.word	0x20013ed0
 8006430:	20013ec8 	.word	0x20013ec8
 8006434:	407f4000 	.word	0x407f4000
 8006438:	20007ea8 	.word	0x20007ea8
 800643c:	20013eb4 	.word	0x20013eb4

08006440 <SystemClock_Config>:
 *            Flash Latency(WS)              = 4
 * @param  None
 * @retval None
 */
void SystemClock_Config(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b0b8      	sub	sp, #224	; 0xe0
 8006444:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006446:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	605a      	str	r2, [r3, #4]
 8006450:	609a      	str	r2, [r3, #8]
 8006452:	60da      	str	r2, [r3, #12]
 8006454:	611a      	str	r2, [r3, #16]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006456:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800645a:	2244      	movs	r2, #68	; 0x44
 800645c:	2100      	movs	r1, #0
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fc63 	bl	8006d2a <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006464:	463b      	mov	r3, r7
 8006466:	2288      	movs	r2, #136	; 0x88
 8006468:	2100      	movs	r1, #0
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fc5d 	bl	8006d2a <memset>

	/* MSI is enabled after System reset, activate PLL with MSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8006470:	2310      	movs	r3, #16
 8006472:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006476:	2301      	movs	r3, #1
 8006478:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800647c:	2360      	movs	r3, #96	; 0x60
 800647e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8006482:	2300      	movs	r3, #0
 8006484:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006488:	2302      	movs	r3, #2
 800648a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800648e:	2301      	movs	r3, #1
 8006490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLM = 1;
 8006494:	2301      	movs	r3, #1
 8006496:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLN = 40;
 800649a:	2328      	movs	r3, #40	; 0x28
 800649c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLR = 2;
 80064a0:	2302      	movs	r3, #2
 80064a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLP = 7;
 80064a6:	2307      	movs	r3, #7
 80064a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80064ac:	2304      	movs	r3, #4
 80064ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80064b2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fc ffb4 	bl	8003424 <HAL_RCC_OscConfig>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d000      	beq.n	80064c4 <SystemClock_Config+0x84>
	{
		/* Initialization Error */
		while(1);
 80064c2:	e7fe      	b.n	80064c2 <SystemClock_Config+0x82>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80064c4:	230f      	movs	r3, #15
 80064c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80064ca:	2303      	movs	r3, #3
 80064cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80064d0:	2300      	movs	r3, #0
 80064d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80064d6:	2300      	movs	r3, #0
 80064d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80064dc:	2300      	movs	r3, #0
 80064de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80064e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80064e6:	2104      	movs	r1, #4
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fd faff 	bl	8003aec <HAL_RCC_ClockConfig>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d000      	beq.n	80064f6 <SystemClock_Config+0xb6>
	{
		/* Initialization Error */
		while(1);
 80064f4:	e7fe      	b.n	80064f4 <SystemClock_Config+0xb4>
	}
}
 80064f6:	bf00      	nop
 80064f8:	37e0      	adds	r7, #224	; 0xe0
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <DFSDM_Init>:
 * @brief  DFSDM channels and filter initialization
 * @param  None
 * @retval None
 */
static void DFSDM_Init(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
	/* Initialize channel 2 */
	__HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&DfsdmChannelHandle);
 8006504:	4b38      	ldr	r3, [pc, #224]	; (80065e8 <DFSDM_Init+0xe8>)
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	DfsdmChannelHandle.Instance                      = DFSDM1_Channel2;
 800650c:	4b36      	ldr	r3, [pc, #216]	; (80065e8 <DFSDM_Init+0xe8>)
 800650e:	4a37      	ldr	r2, [pc, #220]	; (80065ec <DFSDM_Init+0xec>)
 8006510:	601a      	str	r2, [r3, #0]
	DfsdmChannelHandle.Init.OutputClock.Activation   = ENABLE;
 8006512:	4b35      	ldr	r3, [pc, #212]	; (80065e8 <DFSDM_Init+0xe8>)
 8006514:	2201      	movs	r2, #1
 8006516:	711a      	strb	r2, [r3, #4]
	DfsdmChannelHandle.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8006518:	4b33      	ldr	r3, [pc, #204]	; (80065e8 <DFSDM_Init+0xe8>)
 800651a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800651e:	609a      	str	r2, [r3, #8]
	DfsdmChannelHandle.Init.OutputClock.Divider      = 4; /* 11.294MHz/4 = 2.82MHz */
 8006520:	4b31      	ldr	r3, [pc, #196]	; (80065e8 <DFSDM_Init+0xe8>)
 8006522:	2204      	movs	r2, #4
 8006524:	60da      	str	r2, [r3, #12]
	DfsdmChannelHandle.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8006526:	4b30      	ldr	r3, [pc, #192]	; (80065e8 <DFSDM_Init+0xe8>)
 8006528:	2200      	movs	r2, #0
 800652a:	611a      	str	r2, [r3, #16]
	DfsdmChannelHandle.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE; /* N.U. */
 800652c:	4b2e      	ldr	r3, [pc, #184]	; (80065e8 <DFSDM_Init+0xe8>)
 800652e:	2200      	movs	r2, #0
 8006530:	615a      	str	r2, [r3, #20]
	DfsdmChannelHandle.Init.Input.Pins               = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8006532:	4b2d      	ldr	r3, [pc, #180]	; (80065e8 <DFSDM_Init+0xe8>)
 8006534:	2200      	movs	r2, #0
 8006536:	619a      	str	r2, [r3, #24]
	DfsdmChannelHandle.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_RISING;
 8006538:	4b2b      	ldr	r3, [pc, #172]	; (80065e8 <DFSDM_Init+0xe8>)
 800653a:	2200      	movs	r2, #0
 800653c:	61da      	str	r2, [r3, #28]
	DfsdmChannelHandle.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800653e:	4b2a      	ldr	r3, [pc, #168]	; (80065e8 <DFSDM_Init+0xe8>)
 8006540:	2204      	movs	r2, #4
 8006542:	621a      	str	r2, [r3, #32]
	DfsdmChannelHandle.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER; /* N.U. */
 8006544:	4b28      	ldr	r3, [pc, #160]	; (80065e8 <DFSDM_Init+0xe8>)
 8006546:	2200      	movs	r2, #0
 8006548:	625a      	str	r2, [r3, #36]	; 0x24
	DfsdmChannelHandle.Init.Awd.Oversampling         = 10; /* N.U. */
 800654a:	4b27      	ldr	r3, [pc, #156]	; (80065e8 <DFSDM_Init+0xe8>)
 800654c:	220a      	movs	r2, #10
 800654e:	629a      	str	r2, [r3, #40]	; 0x28
	DfsdmChannelHandle.Init.Offset                   = 0;
 8006550:	4b25      	ldr	r3, [pc, #148]	; (80065e8 <DFSDM_Init+0xe8>)
 8006552:	2200      	movs	r2, #0
 8006554:	62da      	str	r2, [r3, #44]	; 0x2c
	DfsdmChannelHandle.Init.RightBitShift            = 2;
 8006556:	4b24      	ldr	r3, [pc, #144]	; (80065e8 <DFSDM_Init+0xe8>)
 8006558:	2202      	movs	r2, #2
 800655a:	631a      	str	r2, [r3, #48]	; 0x30
	if(HAL_OK != HAL_DFSDM_ChannelInit(&DfsdmChannelHandle))
 800655c:	4822      	ldr	r0, [pc, #136]	; (80065e8 <DFSDM_Init+0xe8>)
 800655e:	f7fb fa37 	bl	80019d0 <HAL_DFSDM_ChannelInit>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <DFSDM_Init+0x6c>
	{
		Error_Handler();
 8006568:	f000 f8d6 	bl	8006718 <Error_Handler>
	}

	/* Initialize filter 0 */
	__HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&DfsdmFilterHandle);
 800656c:	4b20      	ldr	r3, [pc, #128]	; (80065f0 <DFSDM_Init+0xf0>)
 800656e:	2200      	movs	r2, #0
 8006570:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DfsdmFilterHandle.Instance                          = DFSDM1_Filter0;
 8006574:	4b1e      	ldr	r3, [pc, #120]	; (80065f0 <DFSDM_Init+0xf0>)
 8006576:	4a1f      	ldr	r2, [pc, #124]	; (80065f4 <DFSDM_Init+0xf4>)
 8006578:	601a      	str	r2, [r3, #0]
	DfsdmFilterHandle.Init.RegularParam.Trigger         = DFSDM_FILTER_SW_TRIGGER;
 800657a:	4b1d      	ldr	r3, [pc, #116]	; (80065f0 <DFSDM_Init+0xf0>)
 800657c:	2200      	movs	r2, #0
 800657e:	605a      	str	r2, [r3, #4]
	DfsdmFilterHandle.Init.RegularParam.FastMode        = ENABLE;
 8006580:	4b1b      	ldr	r3, [pc, #108]	; (80065f0 <DFSDM_Init+0xf0>)
 8006582:	2201      	movs	r2, #1
 8006584:	721a      	strb	r2, [r3, #8]
	DfsdmFilterHandle.Init.RegularParam.DmaMode         = ENABLE;
 8006586:	4b1a      	ldr	r3, [pc, #104]	; (80065f0 <DFSDM_Init+0xf0>)
 8006588:	2201      	movs	r2, #1
 800658a:	725a      	strb	r2, [r3, #9]
	DfsdmFilterHandle.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER; /* N.U. */
 800658c:	4b18      	ldr	r3, [pc, #96]	; (80065f0 <DFSDM_Init+0xf0>)
 800658e:	2200      	movs	r2, #0
 8006590:	60da      	str	r2, [r3, #12]
	DfsdmFilterHandle.Init.InjectedParam.ScanMode       = ENABLE; /* N.U. */
 8006592:	4b17      	ldr	r3, [pc, #92]	; (80065f0 <DFSDM_Init+0xf0>)
 8006594:	2201      	movs	r2, #1
 8006596:	741a      	strb	r2, [r3, #16]
	DfsdmFilterHandle.Init.InjectedParam.DmaMode        = DISABLE; /* N.U. */
 8006598:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <DFSDM_Init+0xf0>)
 800659a:	2200      	movs	r2, #0
 800659c:	745a      	strb	r2, [r3, #17]
	DfsdmFilterHandle.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO; /* N.U. */
 800659e:	4b14      	ldr	r3, [pc, #80]	; (80065f0 <DFSDM_Init+0xf0>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	615a      	str	r2, [r3, #20]
	DfsdmFilterHandle.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE; /* N.U. */
 80065a4:	4b12      	ldr	r3, [pc, #72]	; (80065f0 <DFSDM_Init+0xf0>)
 80065a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065aa:	619a      	str	r2, [r3, #24]
	DfsdmFilterHandle.Init.FilterParam.SincOrder        = DFSDM_FILTER_SINC3_ORDER;
 80065ac:	4b10      	ldr	r3, [pc, #64]	; (80065f0 <DFSDM_Init+0xf0>)
 80065ae:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80065b2:	61da      	str	r2, [r3, #28]
	DfsdmFilterHandle.Init.FilterParam.Oversampling     = 64; /* 11.294MHz/(4*64) = 44.1KHz */
 80065b4:	4b0e      	ldr	r3, [pc, #56]	; (80065f0 <DFSDM_Init+0xf0>)
 80065b6:	2240      	movs	r2, #64	; 0x40
 80065b8:	621a      	str	r2, [r3, #32]
	//DfsdmFilterHandle.Init.FilterParam.Oversampling     = 256; /* 11.294MHz/(4*64) = 44.1KHz */
	DfsdmFilterHandle.Init.FilterParam.IntOversampling  = 1;
 80065ba:	4b0d      	ldr	r3, [pc, #52]	; (80065f0 <DFSDM_Init+0xf0>)
 80065bc:	2201      	movs	r2, #1
 80065be:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_OK != HAL_DFSDM_FilterInit(&DfsdmFilterHandle))
 80065c0:	480b      	ldr	r0, [pc, #44]	; (80065f0 <DFSDM_Init+0xf0>)
 80065c2:	f7fb fac5 	bl	8001b50 <HAL_DFSDM_FilterInit>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <DFSDM_Init+0xd0>
	{
		Error_Handler();
 80065cc:	f000 f8a4 	bl	8006718 <Error_Handler>
	}

	/* Configure regular channel and continuous mode for filter 0 */
	if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&DfsdmFilterHandle, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON))
 80065d0:	2201      	movs	r2, #1
 80065d2:	4909      	ldr	r1, [pc, #36]	; (80065f8 <DFSDM_Init+0xf8>)
 80065d4:	4806      	ldr	r0, [pc, #24]	; (80065f0 <DFSDM_Init+0xf0>)
 80065d6:	f7fb fb95 	bl	8001d04 <HAL_DFSDM_FilterConfigRegChannel>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <DFSDM_Init+0xe4>
	{
		Error_Handler();
 80065e0:	f000 f89a 	bl	8006718 <Error_Handler>
	}
}
 80065e4:	bf00      	nop
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	2000fcac 	.word	0x2000fcac
 80065ec:	40016040 	.word	0x40016040
 80065f0:	20013dfc 	.word	0x20013dfc
 80065f4:	40016100 	.word	0x40016100
 80065f8:	00020004 	.word	0x00020004

080065fc <Playback_Init>:
 * @brief  Playback initialization
 * @param  None
 * @retval None
 */
static void Playback_Init(void)
{
 80065fc:	b598      	push	{r3, r4, r7, lr}
 80065fe:	af00      	add	r7, sp, #0
	/* Initialize SAI */
	__HAL_SAI_RESET_HANDLE_STATE(&SaiHandle);
 8006600:	4b41      	ldr	r3, [pc, #260]	; (8006708 <Playback_Init+0x10c>)
 8006602:	2200      	movs	r2, #0
 8006604:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	SaiHandle.Instance = SAI1_Block_A;
 8006608:	4b3f      	ldr	r3, [pc, #252]	; (8006708 <Playback_Init+0x10c>)
 800660a:	4a40      	ldr	r2, [pc, #256]	; (800670c <Playback_Init+0x110>)
 800660c:	601a      	str	r2, [r3, #0]

	SaiHandle.Init.AudioMode      = SAI_MODEMASTER_TX;
 800660e:	4b3e      	ldr	r3, [pc, #248]	; (8006708 <Playback_Init+0x10c>)
 8006610:	2200      	movs	r2, #0
 8006612:	605a      	str	r2, [r3, #4]
	SaiHandle.Init.Synchro        = SAI_ASYNCHRONOUS;
 8006614:	4b3c      	ldr	r3, [pc, #240]	; (8006708 <Playback_Init+0x10c>)
 8006616:	2200      	movs	r2, #0
 8006618:	609a      	str	r2, [r3, #8]
	SaiHandle.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800661a:	4b3b      	ldr	r3, [pc, #236]	; (8006708 <Playback_Init+0x10c>)
 800661c:	2200      	movs	r2, #0
 800661e:	60da      	str	r2, [r3, #12]
	SaiHandle.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 8006620:	4b39      	ldr	r3, [pc, #228]	; (8006708 <Playback_Init+0x10c>)
 8006622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006626:	611a      	str	r2, [r3, #16]
	SaiHandle.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8006628:	4b37      	ldr	r3, [pc, #220]	; (8006708 <Playback_Init+0x10c>)
 800662a:	2200      	movs	r2, #0
 800662c:	615a      	str	r2, [r3, #20]
	SaiHandle.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 800662e:	4b36      	ldr	r3, [pc, #216]	; (8006708 <Playback_Init+0x10c>)
 8006630:	2201      	movs	r2, #1
 8006632:	619a      	str	r2, [r3, #24]
	//SaiHandle.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
	SaiHandle.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8006634:	4b34      	ldr	r3, [pc, #208]	; (8006708 <Playback_Init+0x10c>)
 8006636:	f64a 4244 	movw	r2, #44100	; 0xac44
 800663a:	61da      	str	r2, [r3, #28]
	SaiHandle.Init.Mckdiv         = 0; /* N.U */
 800663c:	4b32      	ldr	r3, [pc, #200]	; (8006708 <Playback_Init+0x10c>)
 800663e:	2200      	movs	r2, #0
 8006640:	621a      	str	r2, [r3, #32]
	SaiHandle.Init.MonoStereoMode = SAI_STEREOMODE;
 8006642:	4b31      	ldr	r3, [pc, #196]	; (8006708 <Playback_Init+0x10c>)
 8006644:	2200      	movs	r2, #0
 8006646:	625a      	str	r2, [r3, #36]	; 0x24
	SaiHandle.Init.CompandingMode = SAI_NOCOMPANDING;
 8006648:	4b2f      	ldr	r3, [pc, #188]	; (8006708 <Playback_Init+0x10c>)
 800664a:	2200      	movs	r2, #0
 800664c:	629a      	str	r2, [r3, #40]	; 0x28
	SaiHandle.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 800664e:	4b2e      	ldr	r3, [pc, #184]	; (8006708 <Playback_Init+0x10c>)
 8006650:	2200      	movs	r2, #0
 8006652:	62da      	str	r2, [r3, #44]	; 0x2c
	SaiHandle.Init.Protocol       = SAI_FREE_PROTOCOL;
 8006654:	4b2c      	ldr	r3, [pc, #176]	; (8006708 <Playback_Init+0x10c>)
 8006656:	2200      	movs	r2, #0
 8006658:	631a      	str	r2, [r3, #48]	; 0x30
	SaiHandle.Init.DataSize       = SAI_DATASIZE_16;
 800665a:	4b2b      	ldr	r3, [pc, #172]	; (8006708 <Playback_Init+0x10c>)
 800665c:	2280      	movs	r2, #128	; 0x80
 800665e:	635a      	str	r2, [r3, #52]	; 0x34
	SaiHandle.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8006660:	4b29      	ldr	r3, [pc, #164]	; (8006708 <Playback_Init+0x10c>)
 8006662:	2200      	movs	r2, #0
 8006664:	639a      	str	r2, [r3, #56]	; 0x38
	SaiHandle.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006666:	4b28      	ldr	r3, [pc, #160]	; (8006708 <Playback_Init+0x10c>)
 8006668:	2200      	movs	r2, #0
 800666a:	63da      	str	r2, [r3, #60]	; 0x3c

	SaiHandle.FrameInit.FrameLength       = 32;
 800666c:	4b26      	ldr	r3, [pc, #152]	; (8006708 <Playback_Init+0x10c>)
 800666e:	2220      	movs	r2, #32
 8006670:	641a      	str	r2, [r3, #64]	; 0x40
	SaiHandle.FrameInit.ActiveFrameLength = 16;
 8006672:	4b25      	ldr	r3, [pc, #148]	; (8006708 <Playback_Init+0x10c>)
 8006674:	2210      	movs	r2, #16
 8006676:	645a      	str	r2, [r3, #68]	; 0x44
	SaiHandle.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8006678:	4b23      	ldr	r3, [pc, #140]	; (8006708 <Playback_Init+0x10c>)
 800667a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800667e:	649a      	str	r2, [r3, #72]	; 0x48
	SaiHandle.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8006680:	4b21      	ldr	r3, [pc, #132]	; (8006708 <Playback_Init+0x10c>)
 8006682:	2200      	movs	r2, #0
 8006684:	64da      	str	r2, [r3, #76]	; 0x4c
	SaiHandle.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8006686:	4b20      	ldr	r3, [pc, #128]	; (8006708 <Playback_Init+0x10c>)
 8006688:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800668c:	651a      	str	r2, [r3, #80]	; 0x50

	SaiHandle.SlotInit.FirstBitOffset = 0;
 800668e:	4b1e      	ldr	r3, [pc, #120]	; (8006708 <Playback_Init+0x10c>)
 8006690:	2200      	movs	r2, #0
 8006692:	655a      	str	r2, [r3, #84]	; 0x54
	SaiHandle.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 8006694:	4b1c      	ldr	r3, [pc, #112]	; (8006708 <Playback_Init+0x10c>)
 8006696:	2200      	movs	r2, #0
 8006698:	659a      	str	r2, [r3, #88]	; 0x58
	SaiHandle.SlotInit.SlotNumber     = 2;
 800669a:	4b1b      	ldr	r3, [pc, #108]	; (8006708 <Playback_Init+0x10c>)
 800669c:	2202      	movs	r2, #2
 800669e:	65da      	str	r2, [r3, #92]	; 0x5c
	SaiHandle.SlotInit.SlotActive     = (SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1);
 80066a0:	4b19      	ldr	r3, [pc, #100]	; (8006708 <Playback_Init+0x10c>)
 80066a2:	2203      	movs	r2, #3
 80066a4:	661a      	str	r2, [r3, #96]	; 0x60

	if(HAL_OK != HAL_SAI_Init(&SaiHandle))
 80066a6:	4818      	ldr	r0, [pc, #96]	; (8006708 <Playback_Init+0x10c>)
 80066a8:	f7fe fe32 	bl	8005310 <HAL_SAI_Init>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <Playback_Init+0xba>
	{
		Error_Handler();
 80066b2:	f000 f831 	bl	8006718 <Error_Handler>
	}

	/* Enable SAI to generate clock used by audio driver */
	__HAL_SAI_ENABLE(&SaiHandle);
 80066b6:	4b14      	ldr	r3, [pc, #80]	; (8006708 <Playback_Init+0x10c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a13      	ldr	r2, [pc, #76]	; (8006708 <Playback_Init+0x10c>)
 80066bc:	6812      	ldr	r2, [r2, #0]
 80066be:	6812      	ldr	r2, [r2, #0]
 80066c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80066c4:	601a      	str	r2, [r3, #0]

	/* Initialize audio driver */
	if(CS43L22_ID != cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS))
 80066c6:	4b12      	ldr	r3, [pc, #72]	; (8006710 <Playback_Init+0x114>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	2094      	movs	r0, #148	; 0x94
 80066cc:	4798      	blx	r3
 80066ce:	4603      	mov	r3, r0
 80066d0:	2be0      	cmp	r3, #224	; 0xe0
 80066d2:	d001      	beq.n	80066d8 <Playback_Init+0xdc>
	{
		Error_Handler();
 80066d4:	f000 f820 	bl	8006718 <Error_Handler>
	}
	audio_drv = &cs43l22_drv;
 80066d8:	4b0e      	ldr	r3, [pc, #56]	; (8006714 <Playback_Init+0x118>)
 80066da:	4a0d      	ldr	r2, [pc, #52]	; (8006710 <Playback_Init+0x114>)
 80066dc:	601a      	str	r2, [r3, #0]
	audio_drv->Reset(AUDIO_I2C_ADDRESS);
 80066de:	4b0d      	ldr	r3, [pc, #52]	; (8006714 <Playback_Init+0x118>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	2094      	movs	r0, #148	; 0x94
 80066e6:	4798      	blx	r3
	if(0 != audio_drv->Init(AUDIO_I2C_ADDRESS, OUTPUT_DEVICE_HEADPHONE, 60, AUDIO_FREQUENCY_44K))
 80066e8:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <Playback_Init+0x118>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681c      	ldr	r4, [r3, #0]
 80066ee:	f64a 4344 	movw	r3, #44100	; 0xac44
 80066f2:	223c      	movs	r2, #60	; 0x3c
 80066f4:	2102      	movs	r1, #2
 80066f6:	2094      	movs	r0, #148	; 0x94
 80066f8:	47a0      	blx	r4
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <Playback_Init+0x108>
	{
		Error_Handler();
 8006700:	f000 f80a 	bl	8006718 <Error_Handler>
	}
}
 8006704:	bf00      	nop
 8006706:	bd98      	pop	{r3, r4, r7, pc}
 8006708:	20013d04 	.word	0x20013d04
 800670c:	40015404 	.word	0x40015404
 8006710:	20000000 	.word	0x20000000
 8006714:	20013dec 	.word	0x20013dec

08006718 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
	while (1)
	{
		/* Toggle LED4 with a period of one second */
		//BSP_LED_Toggle(LED4);
		//	HAL_GPIO_TogglePin(LD_Green_GPIO_Port, LD_Green_Pin);
		HAL_Delay(1000);
 800671c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006720:	f7fb f804 	bl	800172c <HAL_Delay>
 8006724:	e7fa      	b.n	800671c <Error_Handler+0x4>
	...

08006728 <HAL_DFSDM_ChannelMspInit>:
 * @brief  Initializes the DFSDM channel MSP.
 * @param  hdfsdm_channel : DFSDM channel handle.
 * @retval None
 */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b0ac      	sub	sp, #176	; 0xb0
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
	/* Init of clock, gpio and PLLSAI1 clock */
	GPIO_InitTypeDef GPIO_Init;
	RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;

	/* Enable DFSDM clock */
	__HAL_RCC_DFSDM1_CLK_ENABLE();
 8006730:	4a2a      	ldr	r2, [pc, #168]	; (80067dc <HAL_DFSDM_ChannelMspInit+0xb4>)
 8006732:	4b2a      	ldr	r3, [pc, #168]	; (80067dc <HAL_DFSDM_ChannelMspInit+0xb4>)
 8006734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800673a:	6613      	str	r3, [r2, #96]	; 0x60
 800673c:	4b27      	ldr	r3, [pc, #156]	; (80067dc <HAL_DFSDM_ChannelMspInit+0xb4>)
 800673e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006744:	613b      	str	r3, [r7, #16]
 8006746:	693b      	ldr	r3, [r7, #16]

	/* Configure PE9 for DFSDM_CKOUT and PE7 for DFSDM_DATIN2 */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8006748:	4a24      	ldr	r2, [pc, #144]	; (80067dc <HAL_DFSDM_ChannelMspInit+0xb4>)
 800674a:	4b24      	ldr	r3, [pc, #144]	; (80067dc <HAL_DFSDM_ChannelMspInit+0xb4>)
 800674c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674e:	f043 0310 	orr.w	r3, r3, #16
 8006752:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006754:	4b21      	ldr	r3, [pc, #132]	; (80067dc <HAL_DFSDM_ChannelMspInit+0xb4>)
 8006756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006758:	f003 0310 	and.w	r3, r3, #16
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	68fb      	ldr	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8006760:	2302      	movs	r3, #2
 8006762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	GPIO_Init.Pull      = GPIO_PULLDOWN;
 8006766:	2302      	movs	r3, #2
 8006768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800676c:	2303      	movs	r3, #3
 800676e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	GPIO_Init.Alternate = GPIO_AF6_DFSDM1;
 8006772:	2306      	movs	r3, #6
 8006774:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_Init.Pin = GPIO_PIN_9;
 8006778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800677c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_GPIO_Init(GPIOE, &GPIO_Init);
 8006780:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006784:	4619      	mov	r1, r3
 8006786:	4816      	ldr	r0, [pc, #88]	; (80067e0 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8006788:	f7fb fe56 	bl	8002438 <HAL_GPIO_Init>
	GPIO_Init.Pin = GPIO_PIN_7;
 800678c:	2380      	movs	r3, #128	; 0x80
 800678e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_GPIO_Init(GPIOE, &GPIO_Init);
 8006792:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006796:	4619      	mov	r1, r3
 8006798:	4811      	ldr	r0, [pc, #68]	; (80067e0 <HAL_DFSDM_ChannelMspInit+0xb8>)
 800679a:	f7fb fe4d 	bl	8002438 <HAL_GPIO_Init>

	/* Configure and enable PLLSAI1 clock to generate 11.294MHz */
	RCC_PeriphCLKInitStruct.PeriphClockSelection    = RCC_PERIPHCLK_SAI1;
 800679e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80067a2:	617b      	str	r3, [r7, #20]
	RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1Source   = RCC_PLLSOURCE_MSI;
 80067a4:	2301      	movs	r3, #1
 80067a6:	61bb      	str	r3, [r7, #24]
	RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1M        = 1;
 80067a8:	2301      	movs	r3, #1
 80067aa:	61fb      	str	r3, [r7, #28]
	RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1N        = 48;
 80067ac:	2330      	movs	r3, #48	; 0x30
 80067ae:	623b      	str	r3, [r7, #32]

	//RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1N        = 44;

	RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1P        = 17;
 80067b0:	2311      	movs	r3, #17
 80067b2:	627b      	str	r3, [r7, #36]	; 0x24

	//RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1P        = 17;

	RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80067b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067b8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_PeriphCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI1;
 80067ba:	2300      	movs	r3, #0
 80067bc:	67bb      	str	r3, [r7, #120]	; 0x78
	if(HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
 80067be:	f107 0314 	add.w	r3, r7, #20
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fd fba4 	bl	8003f10 <HAL_RCCEx_PeriphCLKConfig>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <HAL_DFSDM_ChannelMspInit+0xaa>
	{
		Error_Handler();
 80067ce:	f7ff ffa3 	bl	8006718 <Error_Handler>
	}
}
 80067d2:	bf00      	nop
 80067d4:	37b0      	adds	r7, #176	; 0xb0
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	40021000 	.word	0x40021000
 80067e0:	48001000 	.word	0x48001000

080067e4 <HAL_DFSDM_FilterMspInit>:
 * @brief  Initializes the DFSDM filter MSP.
 * @param  hdfsdm_filter : DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
	/* Configure DMA1_Channel4 */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80067ec:	4a21      	ldr	r2, [pc, #132]	; (8006874 <HAL_DFSDM_FilterMspInit+0x90>)
 80067ee:	4b21      	ldr	r3, [pc, #132]	; (8006874 <HAL_DFSDM_FilterMspInit+0x90>)
 80067f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067f2:	f043 0301 	orr.w	r3, r3, #1
 80067f6:	6493      	str	r3, [r2, #72]	; 0x48
 80067f8:	4b1e      	ldr	r3, [pc, #120]	; (8006874 <HAL_DFSDM_FilterMspInit+0x90>)
 80067fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	68fb      	ldr	r3, [r7, #12]
	hDfsdmDma.Init.Request             = DMA_REQUEST_0;
 8006804:	4b1c      	ldr	r3, [pc, #112]	; (8006878 <HAL_DFSDM_FilterMspInit+0x94>)
 8006806:	2200      	movs	r2, #0
 8006808:	605a      	str	r2, [r3, #4]
	hDfsdmDma.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800680a:	4b1b      	ldr	r3, [pc, #108]	; (8006878 <HAL_DFSDM_FilterMspInit+0x94>)
 800680c:	2200      	movs	r2, #0
 800680e:	609a      	str	r2, [r3, #8]
	hDfsdmDma.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006810:	4b19      	ldr	r3, [pc, #100]	; (8006878 <HAL_DFSDM_FilterMspInit+0x94>)
 8006812:	2200      	movs	r2, #0
 8006814:	60da      	str	r2, [r3, #12]
	hDfsdmDma.Init.MemInc              = DMA_MINC_ENABLE;
 8006816:	4b18      	ldr	r3, [pc, #96]	; (8006878 <HAL_DFSDM_FilterMspInit+0x94>)
 8006818:	2280      	movs	r2, #128	; 0x80
 800681a:	611a      	str	r2, [r3, #16]
	hDfsdmDma.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800681c:	4b16      	ldr	r3, [pc, #88]	; (8006878 <HAL_DFSDM_FilterMspInit+0x94>)
 800681e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006822:	615a      	str	r2, [r3, #20]
	hDfsdmDma.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006824:	4b14      	ldr	r3, [pc, #80]	; (8006878 <HAL_DFSDM_FilterMspInit+0x94>)
 8006826:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800682a:	619a      	str	r2, [r3, #24]
	hDfsdmDma.Init.Mode                = DMA_CIRCULAR;
 800682c:	4b12      	ldr	r3, [pc, #72]	; (8006878 <HAL_DFSDM_FilterMspInit+0x94>)
 800682e:	2220      	movs	r2, #32
 8006830:	61da      	str	r2, [r3, #28]
	hDfsdmDma.Init.Priority            = DMA_PRIORITY_HIGH;
 8006832:	4b11      	ldr	r3, [pc, #68]	; (8006878 <HAL_DFSDM_FilterMspInit+0x94>)
 8006834:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006838:	621a      	str	r2, [r3, #32]
	hDfsdmDma.Instance                 = DMA1_Channel4;
 800683a:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <HAL_DFSDM_FilterMspInit+0x94>)
 800683c:	4a0f      	ldr	r2, [pc, #60]	; (800687c <HAL_DFSDM_FilterMspInit+0x98>)
 800683e:	601a      	str	r2, [r3, #0]
	__HAL_LINKDMA(hdfsdm_filter, hdmaReg, hDfsdmDma);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a0d      	ldr	r2, [pc, #52]	; (8006878 <HAL_DFSDM_FilterMspInit+0x94>)
 8006844:	629a      	str	r2, [r3, #40]	; 0x28
 8006846:	4a0c      	ldr	r2, [pc, #48]	; (8006878 <HAL_DFSDM_FilterMspInit+0x94>)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6293      	str	r3, [r2, #40]	; 0x28
	if (HAL_OK != HAL_DMA_Init(&hDfsdmDma))
 800684c:	480a      	ldr	r0, [pc, #40]	; (8006878 <HAL_DFSDM_FilterMspInit+0x94>)
 800684e:	f7fb fbfb 	bl	8002048 <HAL_DMA_Init>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <HAL_DFSDM_FilterMspInit+0x78>
	{
		Error_Handler();
 8006858:	f7ff ff5e 	bl	8006718 <Error_Handler>
	}
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0x01, 0);
 800685c:	2200      	movs	r2, #0
 800685e:	2101      	movs	r1, #1
 8006860:	200e      	movs	r0, #14
 8006862:	f7fb f870 	bl	8001946 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8006866:	200e      	movs	r0, #14
 8006868:	f7fb f889 	bl	800197e <HAL_NVIC_EnableIRQ>
}
 800686c:	bf00      	nop
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	40021000 	.word	0x40021000
 8006878:	20013e60 	.word	0x20013e60
 800687c:	40020044 	.word	0x40020044

08006880 <HAL_SAI_MspInit>:
 * @param  hsai : pointer to a SAI_HandleTypeDef structure that contains
 *                the configuration information for SAI module.
 * @retval None
 */
void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08a      	sub	sp, #40	; 0x28
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef  GPIO_Init;

	/* Enable SAI1 clock */
	__HAL_RCC_SAI1_CLK_ENABLE();
 8006888:	4a35      	ldr	r2, [pc, #212]	; (8006960 <HAL_SAI_MspInit+0xe0>)
 800688a:	4b35      	ldr	r3, [pc, #212]	; (8006960 <HAL_SAI_MspInit+0xe0>)
 800688c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800688e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006892:	6613      	str	r3, [r2, #96]	; 0x60
 8006894:	4b32      	ldr	r3, [pc, #200]	; (8006960 <HAL_SAI_MspInit+0xe0>)
 8006896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	693b      	ldr	r3, [r7, #16]

	/* Configure GPIOs used for SAI1 */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80068a0:	4a2f      	ldr	r2, [pc, #188]	; (8006960 <HAL_SAI_MspInit+0xe0>)
 80068a2:	4b2f      	ldr	r3, [pc, #188]	; (8006960 <HAL_SAI_MspInit+0xe0>)
 80068a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a6:	f043 0310 	orr.w	r3, r3, #16
 80068aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068ac:	4b2c      	ldr	r3, [pc, #176]	; (8006960 <HAL_SAI_MspInit+0xe0>)
 80068ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b0:	f003 0310 	and.w	r3, r3, #16
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	68fb      	ldr	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80068b8:	2302      	movs	r3, #2
 80068ba:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Pull      = GPIO_NOPULL;
 80068bc:	2300      	movs	r3, #0
 80068be:	61fb      	str	r3, [r7, #28]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80068c0:	2303      	movs	r3, #3
 80068c2:	623b      	str	r3, [r7, #32]
	GPIO_Init.Alternate = GPIO_AF13_SAI1;
 80068c4:	230d      	movs	r3, #13
 80068c6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_Init.Pin       = (GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 80068c8:	2374      	movs	r3, #116	; 0x74
 80068ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOE, &GPIO_Init);
 80068cc:	f107 0314 	add.w	r3, r7, #20
 80068d0:	4619      	mov	r1, r3
 80068d2:	4824      	ldr	r0, [pc, #144]	; (8006964 <HAL_SAI_MspInit+0xe4>)
 80068d4:	f7fb fdb0 	bl	8002438 <HAL_GPIO_Init>

	/* Configure DMA used for SAI1 */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80068d8:	4a21      	ldr	r2, [pc, #132]	; (8006960 <HAL_SAI_MspInit+0xe0>)
 80068da:	4b21      	ldr	r3, [pc, #132]	; (8006960 <HAL_SAI_MspInit+0xe0>)
 80068dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068de:	f043 0302 	orr.w	r3, r3, #2
 80068e2:	6493      	str	r3, [r2, #72]	; 0x48
 80068e4:	4b1e      	ldr	r3, [pc, #120]	; (8006960 <HAL_SAI_MspInit+0xe0>)
 80068e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	60bb      	str	r3, [r7, #8]
 80068ee:	68bb      	ldr	r3, [r7, #8]
	hSaiDma.Init.Request             = DMA_REQUEST_1;
 80068f0:	4b1d      	ldr	r3, [pc, #116]	; (8006968 <HAL_SAI_MspInit+0xe8>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	605a      	str	r2, [r3, #4]
	hSaiDma.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80068f6:	4b1c      	ldr	r3, [pc, #112]	; (8006968 <HAL_SAI_MspInit+0xe8>)
 80068f8:	2210      	movs	r2, #16
 80068fa:	609a      	str	r2, [r3, #8]
	hSaiDma.Init.PeriphInc           = DMA_PINC_DISABLE;
 80068fc:	4b1a      	ldr	r3, [pc, #104]	; (8006968 <HAL_SAI_MspInit+0xe8>)
 80068fe:	2200      	movs	r2, #0
 8006900:	60da      	str	r2, [r3, #12]
	hSaiDma.Init.MemInc              = DMA_MINC_ENABLE;
 8006902:	4b19      	ldr	r3, [pc, #100]	; (8006968 <HAL_SAI_MspInit+0xe8>)
 8006904:	2280      	movs	r2, #128	; 0x80
 8006906:	611a      	str	r2, [r3, #16]
	hSaiDma.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006908:	4b17      	ldr	r3, [pc, #92]	; (8006968 <HAL_SAI_MspInit+0xe8>)
 800690a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800690e:	615a      	str	r2, [r3, #20]
	hSaiDma.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8006910:	4b15      	ldr	r3, [pc, #84]	; (8006968 <HAL_SAI_MspInit+0xe8>)
 8006912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006916:	619a      	str	r2, [r3, #24]
	hSaiDma.Init.Mode                = DMA_CIRCULAR;
 8006918:	4b13      	ldr	r3, [pc, #76]	; (8006968 <HAL_SAI_MspInit+0xe8>)
 800691a:	2220      	movs	r2, #32
 800691c:	61da      	str	r2, [r3, #28]
	hSaiDma.Init.Priority            = DMA_PRIORITY_HIGH;
 800691e:	4b12      	ldr	r3, [pc, #72]	; (8006968 <HAL_SAI_MspInit+0xe8>)
 8006920:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006924:	621a      	str	r2, [r3, #32]
	hSaiDma.Instance                 = DMA2_Channel1;
 8006926:	4b10      	ldr	r3, [pc, #64]	; (8006968 <HAL_SAI_MspInit+0xe8>)
 8006928:	4a10      	ldr	r2, [pc, #64]	; (800696c <HAL_SAI_MspInit+0xec>)
 800692a:	601a      	str	r2, [r3, #0]
	__HAL_LINKDMA(hsai, hdmatx, hSaiDma);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a0e      	ldr	r2, [pc, #56]	; (8006968 <HAL_SAI_MspInit+0xe8>)
 8006930:	66da      	str	r2, [r3, #108]	; 0x6c
 8006932:	4a0d      	ldr	r2, [pc, #52]	; (8006968 <HAL_SAI_MspInit+0xe8>)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6293      	str	r3, [r2, #40]	; 0x28
	if (HAL_OK != HAL_DMA_Init(&hSaiDma))
 8006938:	480b      	ldr	r0, [pc, #44]	; (8006968 <HAL_SAI_MspInit+0xe8>)
 800693a:	f7fb fb85 	bl	8002048 <HAL_DMA_Init>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <HAL_SAI_MspInit+0xc8>
	{
		Error_Handler();
 8006944:	f7ff fee8 	bl	8006718 <Error_Handler>
	}
	HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0x01, 0);
 8006948:	2200      	movs	r2, #0
 800694a:	2101      	movs	r1, #1
 800694c:	2038      	movs	r0, #56	; 0x38
 800694e:	f7fa fffa 	bl	8001946 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8006952:	2038      	movs	r0, #56	; 0x38
 8006954:	f7fb f813 	bl	800197e <HAL_NVIC_EnableIRQ>
}
 8006958:	bf00      	nop
 800695a:	3728      	adds	r7, #40	; 0x28
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	40021000 	.word	0x40021000
 8006964:	48001000 	.word	0x48001000
 8006968:	20013da4 	.word	0x20013da4
 800696c:	40020408 	.word	0x40020408

08006970 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
 * @brief  Half regular conversion complete callback.
 * @param  hdfsdm_filter : DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	DmaRecHalfBuffCplt = 1;
 8006978:	4b04      	ldr	r3, [pc, #16]	; (800698c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 800697a:	2201      	movs	r2, #1
 800697c:	601a      	str	r2, [r3, #0]
}
 800697e:	bf00      	nop
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	20007ea0 	.word	0x20007ea0

08006990 <HAL_DFSDM_FilterRegConvCpltCallback>:
            using HAL_DFSDM_FilterGetRegularValue.
 * @param  hdfsdm_filter : DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
	DmaRecBuffCplt = 1;
 8006998:	4b04      	ldr	r3, [pc, #16]	; (80069ac <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 800699a:	2201      	movs	r2, #1
 800699c:	601a      	str	r2, [r3, #0]
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	20007ea4 	.word	0x20007ea4

080069b0 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
	memcpy(lookup, prepare, 2*hsin->sampleNum);
 80069b8:	4b0a      	ldr	r3, [pc, #40]	; (80069e4 <HAL_SAI_TxCpltCallback+0x34>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	461a      	mov	r2, r3
 80069c2:	4909      	ldr	r1, [pc, #36]	; (80069e8 <HAL_SAI_TxCpltCallback+0x38>)
 80069c4:	4809      	ldr	r0, [pc, #36]	; (80069ec <HAL_SAI_TxCpltCallback+0x3c>)
 80069c6:	f000 f9a5 	bl	8006d14 <memcpy>
	HAL_SAI_Transmit_DMA(hsai, (uint8_t*)&lookup[0], hsin->sampleNum);
 80069ca:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <HAL_SAI_TxCpltCallback+0x34>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	461a      	mov	r2, r3
 80069d4:	4905      	ldr	r1, [pc, #20]	; (80069ec <HAL_SAI_TxCpltCallback+0x3c>)
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7fe fe00 	bl	80055dc <HAL_SAI_Transmit_DMA>
}
 80069dc:	bf00      	nop
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	20000038 	.word	0x20000038
 80069e8:	200001a0 	.word	0x200001a0
 80069ec:	20007fa8 	.word	0x20007fa8

080069f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069f6:	4a0f      	ldr	r2, [pc, #60]	; (8006a34 <HAL_MspInit+0x44>)
 80069f8:	4b0e      	ldr	r3, [pc, #56]	; (8006a34 <HAL_MspInit+0x44>)
 80069fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069fc:	f043 0301 	orr.w	r3, r3, #1
 8006a00:	6613      	str	r3, [r2, #96]	; 0x60
 8006a02:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <HAL_MspInit+0x44>)
 8006a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	607b      	str	r3, [r7, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a0e:	4a09      	ldr	r2, [pc, #36]	; (8006a34 <HAL_MspInit+0x44>)
 8006a10:	4b08      	ldr	r3, [pc, #32]	; (8006a34 <HAL_MspInit+0x44>)
 8006a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a18:	6593      	str	r3, [r2, #88]	; 0x58
 8006a1a:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <HAL_MspInit+0x44>)
 8006a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40021000 	.word	0x40021000

08006a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08a      	sub	sp, #40	; 0x28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a40:	f107 0314 	add.w	r3, r7, #20
 8006a44:	2200      	movs	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	605a      	str	r2, [r3, #4]
 8006a4a:	609a      	str	r2, [r3, #8]
 8006a4c:	60da      	str	r2, [r3, #12]
 8006a4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a17      	ldr	r2, [pc, #92]	; (8006ab4 <HAL_I2C_MspInit+0x7c>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d127      	bne.n	8006aaa <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a5a:	4a17      	ldr	r2, [pc, #92]	; (8006ab8 <HAL_I2C_MspInit+0x80>)
 8006a5c:	4b16      	ldr	r3, [pc, #88]	; (8006ab8 <HAL_I2C_MspInit+0x80>)
 8006a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a60:	f043 0302 	orr.w	r3, r3, #2
 8006a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a66:	4b14      	ldr	r3, [pc, #80]	; (8006ab8 <HAL_I2C_MspInit+0x80>)
 8006a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	613b      	str	r3, [r7, #16]
 8006a70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006a72:	23c0      	movs	r3, #192	; 0xc0
 8006a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a76:	2312      	movs	r3, #18
 8006a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006a82:	2304      	movs	r3, #4
 8006a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a86:	f107 0314 	add.w	r3, r7, #20
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	480b      	ldr	r0, [pc, #44]	; (8006abc <HAL_I2C_MspInit+0x84>)
 8006a8e:	f7fb fcd3 	bl	8002438 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006a92:	4a09      	ldr	r2, [pc, #36]	; (8006ab8 <HAL_I2C_MspInit+0x80>)
 8006a94:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <HAL_I2C_MspInit+0x80>)
 8006a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8006a9e:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <HAL_I2C_MspInit+0x80>)
 8006aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006aaa:	bf00      	nop
 8006aac:	3728      	adds	r7, #40	; 0x28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	40005400 	.word	0x40005400
 8006ab8:	40021000 	.word	0x40021000
 8006abc:	48000400 	.word	0x48000400

08006ac0 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]

  if(hi2c->Instance==I2C1)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a08      	ldr	r2, [pc, #32]	; (8006af0 <HAL_I2C_MspDeInit+0x30>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d109      	bne.n	8006ae6 <HAL_I2C_MspDeInit+0x26>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006ad2:	4a08      	ldr	r2, [pc, #32]	; (8006af4 <HAL_I2C_MspDeInit+0x34>)
 8006ad4:	4b07      	ldr	r3, [pc, #28]	; (8006af4 <HAL_I2C_MspDeInit+0x34>)
 8006ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006adc:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8006ade:	21c0      	movs	r1, #192	; 0xc0
 8006ae0:	4805      	ldr	r0, [pc, #20]	; (8006af8 <HAL_I2C_MspDeInit+0x38>)
 8006ae2:	f7fb fe51 	bl	8002788 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	40005400 	.word	0x40005400
 8006af4:	40021000 	.word	0x40021000
 8006af8:	48000400 	.word	0x48000400

08006afc <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
}
 8006b00:	bf00      	nop
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006b0e:	e7fe      	b.n	8006b0e <HardFault_Handler+0x4>

08006b10 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8006b10:	b480      	push	{r7}
 8006b12:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8006b14:	e7fe      	b.n	8006b14 <MemManage_Handler+0x4>

08006b16 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8006b16:	b480      	push	{r7}
 8006b18:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8006b1a:	e7fe      	b.n	8006b1a <BusFault_Handler+0x4>

08006b1c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8006b20:	e7fe      	b.n	8006b20 <UsageFault_Handler+0x4>

08006b22 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8006b22:	b480      	push	{r7}
 8006b24:	af00      	add	r7, sp, #0
}
 8006b26:	bf00      	nop
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
}
 8006b34:	bf00      	nop
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	af00      	add	r7, sp, #0
}
 8006b42:	bf00      	nop
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8006b50:	f7fa fdd2 	bl	80016f8 <HAL_IncTick>
}
 8006b54:	bf00      	nop
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <DMA1_Channel4_IRQHandler>:
  * @brief  This function handles DMA1_Channel4 interrupt request.
  * @param  None
  * @retval None
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hDfsdmDma);
 8006b5c:	4802      	ldr	r0, [pc, #8]	; (8006b68 <DMA1_Channel4_IRQHandler+0x10>)
 8006b5e:	f7fb fb8b 	bl	8002278 <HAL_DMA_IRQHandler>
}
 8006b62:	bf00      	nop
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	20013e60 	.word	0x20013e60

08006b6c <DMA2_Channel1_IRQHandler>:
  * @brief  This function handles SAI DMA interrupt request.
  * @param  None
  * @retval None
  */
void DMA2_Channel1_IRQHandler(void)
{ 
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(SaiHandle.hdmatx);
 8006b70:	4b03      	ldr	r3, [pc, #12]	; (8006b80 <DMA2_Channel1_IRQHandler+0x14>)
 8006b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fb fb7f 	bl	8002278 <HAL_DMA_IRQHandler>
}
 8006b7a:	bf00      	nop
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20013d04 	.word	0x20013d04

08006b84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b88:	4a17      	ldr	r2, [pc, #92]	; (8006be8 <SystemInit+0x64>)
 8006b8a:	4b17      	ldr	r3, [pc, #92]	; (8006be8 <SystemInit+0x64>)
 8006b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006b98:	4a14      	ldr	r2, [pc, #80]	; (8006bec <SystemInit+0x68>)
 8006b9a:	4b14      	ldr	r3, [pc, #80]	; (8006bec <SystemInit+0x68>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f043 0301 	orr.w	r3, r3, #1
 8006ba2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006ba4:	4b11      	ldr	r3, [pc, #68]	; (8006bec <SystemInit+0x68>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8006baa:	4a10      	ldr	r2, [pc, #64]	; (8006bec <SystemInit+0x68>)
 8006bac:	4b0f      	ldr	r3, [pc, #60]	; (8006bec <SystemInit+0x68>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006bb4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006bb8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8006bba:	4b0c      	ldr	r3, [pc, #48]	; (8006bec <SystemInit+0x68>)
 8006bbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006bc0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006bc2:	4a0a      	ldr	r2, [pc, #40]	; (8006bec <SystemInit+0x68>)
 8006bc4:	4b09      	ldr	r3, [pc, #36]	; (8006bec <SystemInit+0x68>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bcc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006bce:	4b07      	ldr	r3, [pc, #28]	; (8006bec <SystemInit+0x68>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006bd4:	4b04      	ldr	r3, [pc, #16]	; (8006be8 <SystemInit+0x64>)
 8006bd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006bda:	609a      	str	r2, [r3, #8]
#endif
}
 8006bdc:	bf00      	nop
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	e000ed00 	.word	0xe000ed00
 8006bec:	40021000 	.word	0x40021000

08006bf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006c28 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006bf4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006bf6:	e003      	b.n	8006c00 <LoopCopyDataInit>

08006bf8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006bf8:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006bfa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006bfc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006bfe:	3104      	adds	r1, #4

08006c00 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006c00:	480b      	ldr	r0, [pc, #44]	; (8006c30 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006c02:	4b0c      	ldr	r3, [pc, #48]	; (8006c34 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006c04:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006c06:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006c08:	d3f6      	bcc.n	8006bf8 <CopyDataInit>
	ldr	r2, =_sbss
 8006c0a:	4a0b      	ldr	r2, [pc, #44]	; (8006c38 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006c0c:	e002      	b.n	8006c14 <LoopFillZerobss>

08006c0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006c0e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006c10:	f842 3b04 	str.w	r3, [r2], #4

08006c14 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006c14:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <LoopForever+0x16>)
	cmp	r2, r3
 8006c16:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006c18:	d3f9      	bcc.n	8006c0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006c1a:	f7ff ffb3 	bl	8006b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006c1e:	f000 f855 	bl	8006ccc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006c22:	f7ff faed 	bl	8006200 <main>

08006c26 <LoopForever>:

LoopForever:
    b LoopForever
 8006c26:	e7fe      	b.n	8006c26 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006c28:	20017fff 	.word	0x20017fff
	ldr	r3, =_sidata
 8006c2c:	08008f90 	.word	0x08008f90
	ldr	r0, =_sdata
 8006c30:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006c34:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 8006c38:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 8006c3c:	20013ee8 	.word	0x20013ee8

08006c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006c40:	e7fe      	b.n	8006c40 <ADC1_2_IRQHandler>
	...

08006c44 <arm_sin_f32>:
 8006c44:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006cc0 <arm_sin_f32+0x7c>
 8006c48:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c4c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c54:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8006c58:	d42c      	bmi.n	8006cb4 <arm_sin_f32+0x70>
 8006c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c5e:	eddf 6a19 	vldr	s13, [pc, #100]	; 8006cc4 <arm_sin_f32+0x80>
 8006c62:	4a19      	ldr	r2, [pc, #100]	; (8006cc8 <arm_sin_f32+0x84>)
 8006c64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c68:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006c6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006c70:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c78:	bfa8      	it	ge
 8006c7a:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 8006c7e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8006c82:	ee17 3a10 	vmov	r3, s14
 8006c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8a:	ee07 3a10 	vmov	s14, r3
 8006c8e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006c92:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8006c96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c9a:	edd1 6a01 	vldr	s13, [r1, #4]
 8006c9e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006ca2:	ed91 0a00 	vldr	s0, [r1]
 8006ca6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006caa:	ee27 0a00 	vmul.f32	s0, s14, s0
 8006cae:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006cb2:	4770      	bx	lr
 8006cb4:	ee17 3a90 	vmov	r3, s15
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	e7cc      	b.n	8006c5a <arm_sin_f32+0x16>
 8006cc0:	3e22f983 	.word	0x3e22f983
 8006cc4:	44000000 	.word	0x44000000
 8006cc8:	08008564 	.word	0x08008564

08006ccc <__libc_init_array>:
 8006ccc:	b570      	push	{r4, r5, r6, lr}
 8006cce:	4e0d      	ldr	r6, [pc, #52]	; (8006d04 <__libc_init_array+0x38>)
 8006cd0:	4c0d      	ldr	r4, [pc, #52]	; (8006d08 <__libc_init_array+0x3c>)
 8006cd2:	1ba4      	subs	r4, r4, r6
 8006cd4:	10a4      	asrs	r4, r4, #2
 8006cd6:	2500      	movs	r5, #0
 8006cd8:	42a5      	cmp	r5, r4
 8006cda:	d109      	bne.n	8006cf0 <__libc_init_array+0x24>
 8006cdc:	4e0b      	ldr	r6, [pc, #44]	; (8006d0c <__libc_init_array+0x40>)
 8006cde:	4c0c      	ldr	r4, [pc, #48]	; (8006d10 <__libc_init_array+0x44>)
 8006ce0:	f001 fc0c 	bl	80084fc <_init>
 8006ce4:	1ba4      	subs	r4, r4, r6
 8006ce6:	10a4      	asrs	r4, r4, #2
 8006ce8:	2500      	movs	r5, #0
 8006cea:	42a5      	cmp	r5, r4
 8006cec:	d105      	bne.n	8006cfa <__libc_init_array+0x2e>
 8006cee:	bd70      	pop	{r4, r5, r6, pc}
 8006cf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cf4:	4798      	blx	r3
 8006cf6:	3501      	adds	r5, #1
 8006cf8:	e7ee      	b.n	8006cd8 <__libc_init_array+0xc>
 8006cfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cfe:	4798      	blx	r3
 8006d00:	3501      	adds	r5, #1
 8006d02:	e7f2      	b.n	8006cea <__libc_init_array+0x1e>
 8006d04:	08008f88 	.word	0x08008f88
 8006d08:	08008f88 	.word	0x08008f88
 8006d0c:	08008f88 	.word	0x08008f88
 8006d10:	08008f8c 	.word	0x08008f8c

08006d14 <memcpy>:
 8006d14:	b510      	push	{r4, lr}
 8006d16:	1e43      	subs	r3, r0, #1
 8006d18:	440a      	add	r2, r1
 8006d1a:	4291      	cmp	r1, r2
 8006d1c:	d100      	bne.n	8006d20 <memcpy+0xc>
 8006d1e:	bd10      	pop	{r4, pc}
 8006d20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d28:	e7f7      	b.n	8006d1a <memcpy+0x6>

08006d2a <memset>:
 8006d2a:	4402      	add	r2, r0
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d100      	bne.n	8006d34 <memset+0xa>
 8006d32:	4770      	bx	lr
 8006d34:	f803 1b01 	strb.w	r1, [r3], #1
 8006d38:	e7f9      	b.n	8006d2e <memset+0x4>
 8006d3a:	0000      	movs	r0, r0
 8006d3c:	0000      	movs	r0, r0
	...

08006d40 <sin>:
 8006d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d42:	ec51 0b10 	vmov	r0, r1, d0
 8006d46:	4a20      	ldr	r2, [pc, #128]	; (8006dc8 <sin+0x88>)
 8006d48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	dc07      	bgt.n	8006d60 <sin+0x20>
 8006d50:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8006dc0 <sin+0x80>
 8006d54:	2000      	movs	r0, #0
 8006d56:	f001 f84f 	bl	8007df8 <__kernel_sin>
 8006d5a:	ec51 0b10 	vmov	r0, r1, d0
 8006d5e:	e007      	b.n	8006d70 <sin+0x30>
 8006d60:	4a1a      	ldr	r2, [pc, #104]	; (8006dcc <sin+0x8c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	dd09      	ble.n	8006d7a <sin+0x3a>
 8006d66:	ee10 2a10 	vmov	r2, s0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	f7f9 fa30 	bl	80001d0 <__aeabi_dsub>
 8006d70:	ec41 0b10 	vmov	d0, r0, r1
 8006d74:	b005      	add	sp, #20
 8006d76:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d7a:	4668      	mov	r0, sp
 8006d7c:	f000 f960 	bl	8007040 <__ieee754_rem_pio2>
 8006d80:	f000 0003 	and.w	r0, r0, #3
 8006d84:	2801      	cmp	r0, #1
 8006d86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d8a:	ed9d 0b00 	vldr	d0, [sp]
 8006d8e:	d004      	beq.n	8006d9a <sin+0x5a>
 8006d90:	2802      	cmp	r0, #2
 8006d92:	d005      	beq.n	8006da0 <sin+0x60>
 8006d94:	b970      	cbnz	r0, 8006db4 <sin+0x74>
 8006d96:	2001      	movs	r0, #1
 8006d98:	e7dd      	b.n	8006d56 <sin+0x16>
 8006d9a:	f000 fbf5 	bl	8007588 <__kernel_cos>
 8006d9e:	e7dc      	b.n	8006d5a <sin+0x1a>
 8006da0:	2001      	movs	r0, #1
 8006da2:	f001 f829 	bl	8007df8 <__kernel_sin>
 8006da6:	ec53 2b10 	vmov	r2, r3, d0
 8006daa:	ee10 0a10 	vmov	r0, s0
 8006dae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006db2:	e7dd      	b.n	8006d70 <sin+0x30>
 8006db4:	f000 fbe8 	bl	8007588 <__kernel_cos>
 8006db8:	e7f5      	b.n	8006da6 <sin+0x66>
 8006dba:	bf00      	nop
 8006dbc:	f3af 8000 	nop.w
	...
 8006dc8:	3fe921fb 	.word	0x3fe921fb
 8006dcc:	7fefffff 	.word	0x7fefffff

08006dd0 <atan2>:
 8006dd0:	f000 b85a 	b.w	8006e88 <__ieee754_atan2>

08006dd4 <sqrt>:
 8006dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dd8:	ed2d 8b02 	vpush	{d8}
 8006ddc:	b08b      	sub	sp, #44	; 0x2c
 8006dde:	ec55 4b10 	vmov	r4, r5, d0
 8006de2:	f000 fb1f 	bl	8007424 <__ieee754_sqrt>
 8006de6:	4b26      	ldr	r3, [pc, #152]	; (8006e80 <sqrt+0xac>)
 8006de8:	eeb0 8a40 	vmov.f32	s16, s0
 8006dec:	eef0 8a60 	vmov.f32	s17, s1
 8006df0:	f993 6000 	ldrsb.w	r6, [r3]
 8006df4:	1c73      	adds	r3, r6, #1
 8006df6:	d02a      	beq.n	8006e4e <sqrt+0x7a>
 8006df8:	4622      	mov	r2, r4
 8006dfa:	462b      	mov	r3, r5
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	4629      	mov	r1, r5
 8006e00:	f7f9 fe34 	bl	8000a6c <__aeabi_dcmpun>
 8006e04:	4607      	mov	r7, r0
 8006e06:	bb10      	cbnz	r0, 8006e4e <sqrt+0x7a>
 8006e08:	f04f 0800 	mov.w	r8, #0
 8006e0c:	f04f 0900 	mov.w	r9, #0
 8006e10:	4642      	mov	r2, r8
 8006e12:	464b      	mov	r3, r9
 8006e14:	4620      	mov	r0, r4
 8006e16:	4629      	mov	r1, r5
 8006e18:	f7f9 fe00 	bl	8000a1c <__aeabi_dcmplt>
 8006e1c:	b1b8      	cbz	r0, 8006e4e <sqrt+0x7a>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	4b18      	ldr	r3, [pc, #96]	; (8006e84 <sqrt+0xb0>)
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	9708      	str	r7, [sp, #32]
 8006e28:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006e2c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006e30:	b9b6      	cbnz	r6, 8006e60 <sqrt+0x8c>
 8006e32:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006e36:	4668      	mov	r0, sp
 8006e38:	f001 face 	bl	80083d8 <matherr>
 8006e3c:	b1d0      	cbz	r0, 8006e74 <sqrt+0xa0>
 8006e3e:	9b08      	ldr	r3, [sp, #32]
 8006e40:	b11b      	cbz	r3, 8006e4a <sqrt+0x76>
 8006e42:	f001 fb55 	bl	80084f0 <__errno>
 8006e46:	9b08      	ldr	r3, [sp, #32]
 8006e48:	6003      	str	r3, [r0, #0]
 8006e4a:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006e4e:	eeb0 0a48 	vmov.f32	s0, s16
 8006e52:	eef0 0a68 	vmov.f32	s1, s17
 8006e56:	b00b      	add	sp, #44	; 0x2c
 8006e58:	ecbd 8b02 	vpop	{d8}
 8006e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e60:	4642      	mov	r2, r8
 8006e62:	464b      	mov	r3, r9
 8006e64:	4640      	mov	r0, r8
 8006e66:	4649      	mov	r1, r9
 8006e68:	f7f9 fc90 	bl	800078c <__aeabi_ddiv>
 8006e6c:	2e02      	cmp	r6, #2
 8006e6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e72:	d1e0      	bne.n	8006e36 <sqrt+0x62>
 8006e74:	f001 fb3c 	bl	80084f0 <__errno>
 8006e78:	2321      	movs	r3, #33	; 0x21
 8006e7a:	6003      	str	r3, [r0, #0]
 8006e7c:	e7df      	b.n	8006e3e <sqrt+0x6a>
 8006e7e:	bf00      	nop
 8006e80:	200000a4 	.word	0x200000a4
 8006e84:	08008d68 	.word	0x08008d68

08006e88 <__ieee754_atan2>:
 8006e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e8c:	ec57 6b11 	vmov	r6, r7, d1
 8006e90:	4273      	negs	r3, r6
 8006e92:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006e96:	4333      	orrs	r3, r6
 8006e98:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8007038 <__ieee754_atan2+0x1b0>
 8006e9c:	ec51 0b10 	vmov	r0, r1, d0
 8006ea0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006ea4:	4563      	cmp	r3, ip
 8006ea6:	ee11 8a10 	vmov	r8, s2
 8006eaa:	ee10 9a10 	vmov	r9, s0
 8006eae:	468e      	mov	lr, r1
 8006eb0:	d807      	bhi.n	8006ec2 <__ieee754_atan2+0x3a>
 8006eb2:	4244      	negs	r4, r0
 8006eb4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006eb8:	4304      	orrs	r4, r0
 8006eba:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006ebe:	4564      	cmp	r4, ip
 8006ec0:	d907      	bls.n	8006ed2 <__ieee754_atan2+0x4a>
 8006ec2:	4632      	mov	r2, r6
 8006ec4:	463b      	mov	r3, r7
 8006ec6:	f7f9 f985 	bl	80001d4 <__adddf3>
 8006eca:	ec41 0b10 	vmov	d0, r0, r1
 8006ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ed2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006ed6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006eda:	4334      	orrs	r4, r6
 8006edc:	d103      	bne.n	8006ee6 <__ieee754_atan2+0x5e>
 8006ede:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee2:	f001 b845 	b.w	8007f70 <atan>
 8006ee6:	17bc      	asrs	r4, r7, #30
 8006ee8:	f004 0402 	and.w	r4, r4, #2
 8006eec:	ea59 0903 	orrs.w	r9, r9, r3
 8006ef0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006ef4:	d107      	bne.n	8006f06 <__ieee754_atan2+0x7e>
 8006ef6:	2c02      	cmp	r4, #2
 8006ef8:	d030      	beq.n	8006f5c <__ieee754_atan2+0xd4>
 8006efa:	2c03      	cmp	r4, #3
 8006efc:	d1e5      	bne.n	8006eca <__ieee754_atan2+0x42>
 8006efe:	a13c      	add	r1, pc, #240	; (adr r1, 8006ff0 <__ieee754_atan2+0x168>)
 8006f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f04:	e7e1      	b.n	8006eca <__ieee754_atan2+0x42>
 8006f06:	ea58 0802 	orrs.w	r8, r8, r2
 8006f0a:	d106      	bne.n	8006f1a <__ieee754_atan2+0x92>
 8006f0c:	f1be 0f00 	cmp.w	lr, #0
 8006f10:	da6a      	bge.n	8006fe8 <__ieee754_atan2+0x160>
 8006f12:	a139      	add	r1, pc, #228	; (adr r1, 8006ff8 <__ieee754_atan2+0x170>)
 8006f14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f18:	e7d7      	b.n	8006eca <__ieee754_atan2+0x42>
 8006f1a:	4562      	cmp	r2, ip
 8006f1c:	d122      	bne.n	8006f64 <__ieee754_atan2+0xdc>
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d111      	bne.n	8006f46 <__ieee754_atan2+0xbe>
 8006f22:	2c02      	cmp	r4, #2
 8006f24:	d007      	beq.n	8006f36 <__ieee754_atan2+0xae>
 8006f26:	2c03      	cmp	r4, #3
 8006f28:	d009      	beq.n	8006f3e <__ieee754_atan2+0xb6>
 8006f2a:	2c01      	cmp	r4, #1
 8006f2c:	d156      	bne.n	8006fdc <__ieee754_atan2+0x154>
 8006f2e:	a134      	add	r1, pc, #208	; (adr r1, 8007000 <__ieee754_atan2+0x178>)
 8006f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f34:	e7c9      	b.n	8006eca <__ieee754_atan2+0x42>
 8006f36:	a134      	add	r1, pc, #208	; (adr r1, 8007008 <__ieee754_atan2+0x180>)
 8006f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f3c:	e7c5      	b.n	8006eca <__ieee754_atan2+0x42>
 8006f3e:	a134      	add	r1, pc, #208	; (adr r1, 8007010 <__ieee754_atan2+0x188>)
 8006f40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f44:	e7c1      	b.n	8006eca <__ieee754_atan2+0x42>
 8006f46:	2c02      	cmp	r4, #2
 8006f48:	d008      	beq.n	8006f5c <__ieee754_atan2+0xd4>
 8006f4a:	2c03      	cmp	r4, #3
 8006f4c:	d0d7      	beq.n	8006efe <__ieee754_atan2+0x76>
 8006f4e:	2c01      	cmp	r4, #1
 8006f50:	f04f 0000 	mov.w	r0, #0
 8006f54:	d146      	bne.n	8006fe4 <__ieee754_atan2+0x15c>
 8006f56:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006f5a:	e7b6      	b.n	8006eca <__ieee754_atan2+0x42>
 8006f5c:	a12e      	add	r1, pc, #184	; (adr r1, 8007018 <__ieee754_atan2+0x190>)
 8006f5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f62:	e7b2      	b.n	8006eca <__ieee754_atan2+0x42>
 8006f64:	4563      	cmp	r3, ip
 8006f66:	d0d1      	beq.n	8006f0c <__ieee754_atan2+0x84>
 8006f68:	1a9b      	subs	r3, r3, r2
 8006f6a:	151b      	asrs	r3, r3, #20
 8006f6c:	2b3c      	cmp	r3, #60	; 0x3c
 8006f6e:	dc1e      	bgt.n	8006fae <__ieee754_atan2+0x126>
 8006f70:	2f00      	cmp	r7, #0
 8006f72:	da01      	bge.n	8006f78 <__ieee754_atan2+0xf0>
 8006f74:	333c      	adds	r3, #60	; 0x3c
 8006f76:	db1e      	blt.n	8006fb6 <__ieee754_atan2+0x12e>
 8006f78:	4632      	mov	r2, r6
 8006f7a:	463b      	mov	r3, r7
 8006f7c:	f7f9 fc06 	bl	800078c <__aeabi_ddiv>
 8006f80:	ec41 0b10 	vmov	d0, r0, r1
 8006f84:	f001 f99c 	bl	80082c0 <fabs>
 8006f88:	f000 fff2 	bl	8007f70 <atan>
 8006f8c:	ec51 0b10 	vmov	r0, r1, d0
 8006f90:	2c01      	cmp	r4, #1
 8006f92:	d013      	beq.n	8006fbc <__ieee754_atan2+0x134>
 8006f94:	2c02      	cmp	r4, #2
 8006f96:	d014      	beq.n	8006fc2 <__ieee754_atan2+0x13a>
 8006f98:	2c00      	cmp	r4, #0
 8006f9a:	d096      	beq.n	8006eca <__ieee754_atan2+0x42>
 8006f9c:	a320      	add	r3, pc, #128	; (adr r3, 8007020 <__ieee754_atan2+0x198>)
 8006f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa2:	f7f9 f915 	bl	80001d0 <__aeabi_dsub>
 8006fa6:	a31c      	add	r3, pc, #112	; (adr r3, 8007018 <__ieee754_atan2+0x190>)
 8006fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fac:	e013      	b.n	8006fd6 <__ieee754_atan2+0x14e>
 8006fae:	a11e      	add	r1, pc, #120	; (adr r1, 8007028 <__ieee754_atan2+0x1a0>)
 8006fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fb4:	e7ec      	b.n	8006f90 <__ieee754_atan2+0x108>
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	2100      	movs	r1, #0
 8006fba:	e7e9      	b.n	8006f90 <__ieee754_atan2+0x108>
 8006fbc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006fc0:	e783      	b.n	8006eca <__ieee754_atan2+0x42>
 8006fc2:	a317      	add	r3, pc, #92	; (adr r3, 8007020 <__ieee754_atan2+0x198>)
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	f7f9 f902 	bl	80001d0 <__aeabi_dsub>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	a111      	add	r1, pc, #68	; (adr r1, 8007018 <__ieee754_atan2+0x190>)
 8006fd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fd6:	f7f9 f8fb 	bl	80001d0 <__aeabi_dsub>
 8006fda:	e776      	b.n	8006eca <__ieee754_atan2+0x42>
 8006fdc:	a114      	add	r1, pc, #80	; (adr r1, 8007030 <__ieee754_atan2+0x1a8>)
 8006fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fe2:	e772      	b.n	8006eca <__ieee754_atan2+0x42>
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	e770      	b.n	8006eca <__ieee754_atan2+0x42>
 8006fe8:	a10f      	add	r1, pc, #60	; (adr r1, 8007028 <__ieee754_atan2+0x1a0>)
 8006fea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fee:	e76c      	b.n	8006eca <__ieee754_atan2+0x42>
 8006ff0:	54442d18 	.word	0x54442d18
 8006ff4:	c00921fb 	.word	0xc00921fb
 8006ff8:	54442d18 	.word	0x54442d18
 8006ffc:	bff921fb 	.word	0xbff921fb
 8007000:	54442d18 	.word	0x54442d18
 8007004:	bfe921fb 	.word	0xbfe921fb
 8007008:	7f3321d2 	.word	0x7f3321d2
 800700c:	4002d97c 	.word	0x4002d97c
 8007010:	7f3321d2 	.word	0x7f3321d2
 8007014:	c002d97c 	.word	0xc002d97c
 8007018:	54442d18 	.word	0x54442d18
 800701c:	400921fb 	.word	0x400921fb
 8007020:	33145c07 	.word	0x33145c07
 8007024:	3ca1a626 	.word	0x3ca1a626
 8007028:	54442d18 	.word	0x54442d18
 800702c:	3ff921fb 	.word	0x3ff921fb
 8007030:	54442d18 	.word	0x54442d18
 8007034:	3fe921fb 	.word	0x3fe921fb
 8007038:	7ff00000 	.word	0x7ff00000
 800703c:	00000000 	.word	0x00000000

08007040 <__ieee754_rem_pio2>:
 8007040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007044:	ec57 6b10 	vmov	r6, r7, d0
 8007048:	4bc3      	ldr	r3, [pc, #780]	; (8007358 <__ieee754_rem_pio2+0x318>)
 800704a:	b08d      	sub	sp, #52	; 0x34
 800704c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007050:	4598      	cmp	r8, r3
 8007052:	4604      	mov	r4, r0
 8007054:	9704      	str	r7, [sp, #16]
 8007056:	dc07      	bgt.n	8007068 <__ieee754_rem_pio2+0x28>
 8007058:	2200      	movs	r2, #0
 800705a:	2300      	movs	r3, #0
 800705c:	ed84 0b00 	vstr	d0, [r4]
 8007060:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007064:	2500      	movs	r5, #0
 8007066:	e027      	b.n	80070b8 <__ieee754_rem_pio2+0x78>
 8007068:	4bbc      	ldr	r3, [pc, #752]	; (800735c <__ieee754_rem_pio2+0x31c>)
 800706a:	4598      	cmp	r8, r3
 800706c:	dc75      	bgt.n	800715a <__ieee754_rem_pio2+0x11a>
 800706e:	9b04      	ldr	r3, [sp, #16]
 8007070:	4dbb      	ldr	r5, [pc, #748]	; (8007360 <__ieee754_rem_pio2+0x320>)
 8007072:	2b00      	cmp	r3, #0
 8007074:	ee10 0a10 	vmov	r0, s0
 8007078:	a3a9      	add	r3, pc, #676	; (adr r3, 8007320 <__ieee754_rem_pio2+0x2e0>)
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	4639      	mov	r1, r7
 8007080:	dd36      	ble.n	80070f0 <__ieee754_rem_pio2+0xb0>
 8007082:	f7f9 f8a5 	bl	80001d0 <__aeabi_dsub>
 8007086:	45a8      	cmp	r8, r5
 8007088:	4606      	mov	r6, r0
 800708a:	460f      	mov	r7, r1
 800708c:	d018      	beq.n	80070c0 <__ieee754_rem_pio2+0x80>
 800708e:	a3a6      	add	r3, pc, #664	; (adr r3, 8007328 <__ieee754_rem_pio2+0x2e8>)
 8007090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007094:	f7f9 f89c 	bl	80001d0 <__aeabi_dsub>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	e9c4 2300 	strd	r2, r3, [r4]
 80070a0:	4630      	mov	r0, r6
 80070a2:	4639      	mov	r1, r7
 80070a4:	f7f9 f894 	bl	80001d0 <__aeabi_dsub>
 80070a8:	a39f      	add	r3, pc, #636	; (adr r3, 8007328 <__ieee754_rem_pio2+0x2e8>)
 80070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ae:	f7f9 f88f 	bl	80001d0 <__aeabi_dsub>
 80070b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80070b6:	2501      	movs	r5, #1
 80070b8:	4628      	mov	r0, r5
 80070ba:	b00d      	add	sp, #52	; 0x34
 80070bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c0:	a39b      	add	r3, pc, #620	; (adr r3, 8007330 <__ieee754_rem_pio2+0x2f0>)
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	f7f9 f883 	bl	80001d0 <__aeabi_dsub>
 80070ca:	a39b      	add	r3, pc, #620	; (adr r3, 8007338 <__ieee754_rem_pio2+0x2f8>)
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	4606      	mov	r6, r0
 80070d2:	460f      	mov	r7, r1
 80070d4:	f7f9 f87c 	bl	80001d0 <__aeabi_dsub>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	e9c4 2300 	strd	r2, r3, [r4]
 80070e0:	4630      	mov	r0, r6
 80070e2:	4639      	mov	r1, r7
 80070e4:	f7f9 f874 	bl	80001d0 <__aeabi_dsub>
 80070e8:	a393      	add	r3, pc, #588	; (adr r3, 8007338 <__ieee754_rem_pio2+0x2f8>)
 80070ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ee:	e7de      	b.n	80070ae <__ieee754_rem_pio2+0x6e>
 80070f0:	f7f9 f870 	bl	80001d4 <__adddf3>
 80070f4:	45a8      	cmp	r8, r5
 80070f6:	4606      	mov	r6, r0
 80070f8:	460f      	mov	r7, r1
 80070fa:	d016      	beq.n	800712a <__ieee754_rem_pio2+0xea>
 80070fc:	a38a      	add	r3, pc, #552	; (adr r3, 8007328 <__ieee754_rem_pio2+0x2e8>)
 80070fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007102:	f7f9 f867 	bl	80001d4 <__adddf3>
 8007106:	4602      	mov	r2, r0
 8007108:	460b      	mov	r3, r1
 800710a:	e9c4 2300 	strd	r2, r3, [r4]
 800710e:	4630      	mov	r0, r6
 8007110:	4639      	mov	r1, r7
 8007112:	f7f9 f85d 	bl	80001d0 <__aeabi_dsub>
 8007116:	a384      	add	r3, pc, #528	; (adr r3, 8007328 <__ieee754_rem_pio2+0x2e8>)
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	f7f9 f85a 	bl	80001d4 <__adddf3>
 8007120:	f04f 35ff 	mov.w	r5, #4294967295
 8007124:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007128:	e7c6      	b.n	80070b8 <__ieee754_rem_pio2+0x78>
 800712a:	a381      	add	r3, pc, #516	; (adr r3, 8007330 <__ieee754_rem_pio2+0x2f0>)
 800712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007130:	f7f9 f850 	bl	80001d4 <__adddf3>
 8007134:	a380      	add	r3, pc, #512	; (adr r3, 8007338 <__ieee754_rem_pio2+0x2f8>)
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	4606      	mov	r6, r0
 800713c:	460f      	mov	r7, r1
 800713e:	f7f9 f849 	bl	80001d4 <__adddf3>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	e9c4 2300 	strd	r2, r3, [r4]
 800714a:	4630      	mov	r0, r6
 800714c:	4639      	mov	r1, r7
 800714e:	f7f9 f83f 	bl	80001d0 <__aeabi_dsub>
 8007152:	a379      	add	r3, pc, #484	; (adr r3, 8007338 <__ieee754_rem_pio2+0x2f8>)
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	e7e0      	b.n	800711c <__ieee754_rem_pio2+0xdc>
 800715a:	4b82      	ldr	r3, [pc, #520]	; (8007364 <__ieee754_rem_pio2+0x324>)
 800715c:	4598      	cmp	r8, r3
 800715e:	f300 80d0 	bgt.w	8007302 <__ieee754_rem_pio2+0x2c2>
 8007162:	f001 f8ad 	bl	80082c0 <fabs>
 8007166:	ec57 6b10 	vmov	r6, r7, d0
 800716a:	ee10 0a10 	vmov	r0, s0
 800716e:	a374      	add	r3, pc, #464	; (adr r3, 8007340 <__ieee754_rem_pio2+0x300>)
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	4639      	mov	r1, r7
 8007176:	f7f9 f9df 	bl	8000538 <__aeabi_dmul>
 800717a:	2200      	movs	r2, #0
 800717c:	4b7a      	ldr	r3, [pc, #488]	; (8007368 <__ieee754_rem_pio2+0x328>)
 800717e:	f7f9 f829 	bl	80001d4 <__adddf3>
 8007182:	f7f9 fc89 	bl	8000a98 <__aeabi_d2iz>
 8007186:	4605      	mov	r5, r0
 8007188:	f7f9 f970 	bl	800046c <__aeabi_i2d>
 800718c:	a364      	add	r3, pc, #400	; (adr r3, 8007320 <__ieee754_rem_pio2+0x2e0>)
 800718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007192:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007196:	f7f9 f9cf 	bl	8000538 <__aeabi_dmul>
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	4630      	mov	r0, r6
 80071a0:	4639      	mov	r1, r7
 80071a2:	f7f9 f815 	bl	80001d0 <__aeabi_dsub>
 80071a6:	a360      	add	r3, pc, #384	; (adr r3, 8007328 <__ieee754_rem_pio2+0x2e8>)
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	4682      	mov	sl, r0
 80071ae:	468b      	mov	fp, r1
 80071b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071b4:	f7f9 f9c0 	bl	8000538 <__aeabi_dmul>
 80071b8:	2d1f      	cmp	r5, #31
 80071ba:	4606      	mov	r6, r0
 80071bc:	460f      	mov	r7, r1
 80071be:	dc2a      	bgt.n	8007216 <__ieee754_rem_pio2+0x1d6>
 80071c0:	1e6a      	subs	r2, r5, #1
 80071c2:	4b6a      	ldr	r3, [pc, #424]	; (800736c <__ieee754_rem_pio2+0x32c>)
 80071c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c8:	4598      	cmp	r8, r3
 80071ca:	d024      	beq.n	8007216 <__ieee754_rem_pio2+0x1d6>
 80071cc:	4632      	mov	r2, r6
 80071ce:	463b      	mov	r3, r7
 80071d0:	4650      	mov	r0, sl
 80071d2:	4659      	mov	r1, fp
 80071d4:	f7f8 fffc 	bl	80001d0 <__aeabi_dsub>
 80071d8:	e9c4 0100 	strd	r0, r1, [r4]
 80071dc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80071e0:	4650      	mov	r0, sl
 80071e2:	4642      	mov	r2, r8
 80071e4:	464b      	mov	r3, r9
 80071e6:	4659      	mov	r1, fp
 80071e8:	f7f8 fff2 	bl	80001d0 <__aeabi_dsub>
 80071ec:	463b      	mov	r3, r7
 80071ee:	4632      	mov	r2, r6
 80071f0:	f7f8 ffee 	bl	80001d0 <__aeabi_dsub>
 80071f4:	9b04      	ldr	r3, [sp, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80071fc:	f6bf af5c 	bge.w	80070b8 <__ieee754_rem_pio2+0x78>
 8007200:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007204:	6063      	str	r3, [r4, #4]
 8007206:	f8c4 8000 	str.w	r8, [r4]
 800720a:	60a0      	str	r0, [r4, #8]
 800720c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007210:	60e3      	str	r3, [r4, #12]
 8007212:	426d      	negs	r5, r5
 8007214:	e750      	b.n	80070b8 <__ieee754_rem_pio2+0x78>
 8007216:	4632      	mov	r2, r6
 8007218:	463b      	mov	r3, r7
 800721a:	4650      	mov	r0, sl
 800721c:	4659      	mov	r1, fp
 800721e:	f7f8 ffd7 	bl	80001d0 <__aeabi_dsub>
 8007222:	ea4f 5228 	mov.w	r2, r8, asr #20
 8007226:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b10      	cmp	r3, #16
 800722e:	e9c4 0100 	strd	r0, r1, [r4]
 8007232:	9205      	str	r2, [sp, #20]
 8007234:	ddd2      	ble.n	80071dc <__ieee754_rem_pio2+0x19c>
 8007236:	a33e      	add	r3, pc, #248	; (adr r3, 8007330 <__ieee754_rem_pio2+0x2f0>)
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007240:	f7f9 f97a 	bl	8000538 <__aeabi_dmul>
 8007244:	4606      	mov	r6, r0
 8007246:	460f      	mov	r7, r1
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4650      	mov	r0, sl
 800724e:	4659      	mov	r1, fp
 8007250:	f7f8 ffbe 	bl	80001d0 <__aeabi_dsub>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4680      	mov	r8, r0
 800725a:	4689      	mov	r9, r1
 800725c:	4650      	mov	r0, sl
 800725e:	4659      	mov	r1, fp
 8007260:	f7f8 ffb6 	bl	80001d0 <__aeabi_dsub>
 8007264:	4632      	mov	r2, r6
 8007266:	463b      	mov	r3, r7
 8007268:	f7f8 ffb2 	bl	80001d0 <__aeabi_dsub>
 800726c:	a332      	add	r3, pc, #200	; (adr r3, 8007338 <__ieee754_rem_pio2+0x2f8>)
 800726e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007272:	4606      	mov	r6, r0
 8007274:	460f      	mov	r7, r1
 8007276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800727a:	f7f9 f95d 	bl	8000538 <__aeabi_dmul>
 800727e:	4632      	mov	r2, r6
 8007280:	463b      	mov	r3, r7
 8007282:	f7f8 ffa5 	bl	80001d0 <__aeabi_dsub>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	4606      	mov	r6, r0
 800728c:	460f      	mov	r7, r1
 800728e:	4640      	mov	r0, r8
 8007290:	4649      	mov	r1, r9
 8007292:	f7f8 ff9d 	bl	80001d0 <__aeabi_dsub>
 8007296:	9a05      	ldr	r2, [sp, #20]
 8007298:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	2b31      	cmp	r3, #49	; 0x31
 80072a0:	e9c4 0100 	strd	r0, r1, [r4]
 80072a4:	dd2a      	ble.n	80072fc <__ieee754_rem_pio2+0x2bc>
 80072a6:	a328      	add	r3, pc, #160	; (adr r3, 8007348 <__ieee754_rem_pio2+0x308>)
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072b0:	f7f9 f942 	bl	8000538 <__aeabi_dmul>
 80072b4:	4606      	mov	r6, r0
 80072b6:	460f      	mov	r7, r1
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4640      	mov	r0, r8
 80072be:	4649      	mov	r1, r9
 80072c0:	f7f8 ff86 	bl	80001d0 <__aeabi_dsub>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4682      	mov	sl, r0
 80072ca:	468b      	mov	fp, r1
 80072cc:	4640      	mov	r0, r8
 80072ce:	4649      	mov	r1, r9
 80072d0:	f7f8 ff7e 	bl	80001d0 <__aeabi_dsub>
 80072d4:	4632      	mov	r2, r6
 80072d6:	463b      	mov	r3, r7
 80072d8:	f7f8 ff7a 	bl	80001d0 <__aeabi_dsub>
 80072dc:	a31c      	add	r3, pc, #112	; (adr r3, 8007350 <__ieee754_rem_pio2+0x310>)
 80072de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e2:	4606      	mov	r6, r0
 80072e4:	460f      	mov	r7, r1
 80072e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072ea:	f7f9 f925 	bl	8000538 <__aeabi_dmul>
 80072ee:	4632      	mov	r2, r6
 80072f0:	463b      	mov	r3, r7
 80072f2:	f7f8 ff6d 	bl	80001d0 <__aeabi_dsub>
 80072f6:	4606      	mov	r6, r0
 80072f8:	460f      	mov	r7, r1
 80072fa:	e767      	b.n	80071cc <__ieee754_rem_pio2+0x18c>
 80072fc:	46c2      	mov	sl, r8
 80072fe:	46cb      	mov	fp, r9
 8007300:	e76c      	b.n	80071dc <__ieee754_rem_pio2+0x19c>
 8007302:	4b1b      	ldr	r3, [pc, #108]	; (8007370 <__ieee754_rem_pio2+0x330>)
 8007304:	4598      	cmp	r8, r3
 8007306:	dd35      	ble.n	8007374 <__ieee754_rem_pio2+0x334>
 8007308:	ee10 2a10 	vmov	r2, s0
 800730c:	463b      	mov	r3, r7
 800730e:	4630      	mov	r0, r6
 8007310:	4639      	mov	r1, r7
 8007312:	f7f8 ff5d 	bl	80001d0 <__aeabi_dsub>
 8007316:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800731a:	e9c4 0100 	strd	r0, r1, [r4]
 800731e:	e6a1      	b.n	8007064 <__ieee754_rem_pio2+0x24>
 8007320:	54400000 	.word	0x54400000
 8007324:	3ff921fb 	.word	0x3ff921fb
 8007328:	1a626331 	.word	0x1a626331
 800732c:	3dd0b461 	.word	0x3dd0b461
 8007330:	1a600000 	.word	0x1a600000
 8007334:	3dd0b461 	.word	0x3dd0b461
 8007338:	2e037073 	.word	0x2e037073
 800733c:	3ba3198a 	.word	0x3ba3198a
 8007340:	6dc9c883 	.word	0x6dc9c883
 8007344:	3fe45f30 	.word	0x3fe45f30
 8007348:	2e000000 	.word	0x2e000000
 800734c:	3ba3198a 	.word	0x3ba3198a
 8007350:	252049c1 	.word	0x252049c1
 8007354:	397b839a 	.word	0x397b839a
 8007358:	3fe921fb 	.word	0x3fe921fb
 800735c:	4002d97b 	.word	0x4002d97b
 8007360:	3ff921fb 	.word	0x3ff921fb
 8007364:	413921fb 	.word	0x413921fb
 8007368:	3fe00000 	.word	0x3fe00000
 800736c:	08008d70 	.word	0x08008d70
 8007370:	7fefffff 	.word	0x7fefffff
 8007374:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007378:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800737c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007380:	4630      	mov	r0, r6
 8007382:	460f      	mov	r7, r1
 8007384:	f7f9 fb88 	bl	8000a98 <__aeabi_d2iz>
 8007388:	f7f9 f870 	bl	800046c <__aeabi_i2d>
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	4630      	mov	r0, r6
 8007392:	4639      	mov	r1, r7
 8007394:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007398:	f7f8 ff1a 	bl	80001d0 <__aeabi_dsub>
 800739c:	2200      	movs	r2, #0
 800739e:	4b1f      	ldr	r3, [pc, #124]	; (800741c <__ieee754_rem_pio2+0x3dc>)
 80073a0:	f7f9 f8ca 	bl	8000538 <__aeabi_dmul>
 80073a4:	460f      	mov	r7, r1
 80073a6:	4606      	mov	r6, r0
 80073a8:	f7f9 fb76 	bl	8000a98 <__aeabi_d2iz>
 80073ac:	f7f9 f85e 	bl	800046c <__aeabi_i2d>
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	4630      	mov	r0, r6
 80073b6:	4639      	mov	r1, r7
 80073b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80073bc:	f7f8 ff08 	bl	80001d0 <__aeabi_dsub>
 80073c0:	2200      	movs	r2, #0
 80073c2:	4b16      	ldr	r3, [pc, #88]	; (800741c <__ieee754_rem_pio2+0x3dc>)
 80073c4:	f7f9 f8b8 	bl	8000538 <__aeabi_dmul>
 80073c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80073cc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80073d0:	f04f 0803 	mov.w	r8, #3
 80073d4:	2600      	movs	r6, #0
 80073d6:	2700      	movs	r7, #0
 80073d8:	4632      	mov	r2, r6
 80073da:	463b      	mov	r3, r7
 80073dc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80073e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80073e4:	f7f9 fb10 	bl	8000a08 <__aeabi_dcmpeq>
 80073e8:	b9b0      	cbnz	r0, 8007418 <__ieee754_rem_pio2+0x3d8>
 80073ea:	4b0d      	ldr	r3, [pc, #52]	; (8007420 <__ieee754_rem_pio2+0x3e0>)
 80073ec:	9301      	str	r3, [sp, #4]
 80073ee:	2302      	movs	r3, #2
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	462a      	mov	r2, r5
 80073f4:	4643      	mov	r3, r8
 80073f6:	4621      	mov	r1, r4
 80073f8:	a806      	add	r0, sp, #24
 80073fa:	f000 f9ad 	bl	8007758 <__kernel_rem_pio2>
 80073fe:	9b04      	ldr	r3, [sp, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	4605      	mov	r5, r0
 8007404:	f6bf ae58 	bge.w	80070b8 <__ieee754_rem_pio2+0x78>
 8007408:	6863      	ldr	r3, [r4, #4]
 800740a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800740e:	6063      	str	r3, [r4, #4]
 8007410:	68e3      	ldr	r3, [r4, #12]
 8007412:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007416:	e6fb      	b.n	8007210 <__ieee754_rem_pio2+0x1d0>
 8007418:	46d0      	mov	r8, sl
 800741a:	e7dd      	b.n	80073d8 <__ieee754_rem_pio2+0x398>
 800741c:	41700000 	.word	0x41700000
 8007420:	08008df0 	.word	0x08008df0

08007424 <__ieee754_sqrt>:
 8007424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007428:	ec55 4b10 	vmov	r4, r5, d0
 800742c:	4e54      	ldr	r6, [pc, #336]	; (8007580 <__ieee754_sqrt+0x15c>)
 800742e:	43ae      	bics	r6, r5
 8007430:	ee10 0a10 	vmov	r0, s0
 8007434:	462b      	mov	r3, r5
 8007436:	462a      	mov	r2, r5
 8007438:	4621      	mov	r1, r4
 800743a:	d113      	bne.n	8007464 <__ieee754_sqrt+0x40>
 800743c:	ee10 2a10 	vmov	r2, s0
 8007440:	462b      	mov	r3, r5
 8007442:	ee10 0a10 	vmov	r0, s0
 8007446:	4629      	mov	r1, r5
 8007448:	f7f9 f876 	bl	8000538 <__aeabi_dmul>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	4620      	mov	r0, r4
 8007452:	4629      	mov	r1, r5
 8007454:	f7f8 febe 	bl	80001d4 <__adddf3>
 8007458:	4604      	mov	r4, r0
 800745a:	460d      	mov	r5, r1
 800745c:	ec45 4b10 	vmov	d0, r4, r5
 8007460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007464:	2d00      	cmp	r5, #0
 8007466:	dc10      	bgt.n	800748a <__ieee754_sqrt+0x66>
 8007468:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800746c:	4330      	orrs	r0, r6
 800746e:	d0f5      	beq.n	800745c <__ieee754_sqrt+0x38>
 8007470:	b15d      	cbz	r5, 800748a <__ieee754_sqrt+0x66>
 8007472:	ee10 2a10 	vmov	r2, s0
 8007476:	462b      	mov	r3, r5
 8007478:	4620      	mov	r0, r4
 800747a:	4629      	mov	r1, r5
 800747c:	f7f8 fea8 	bl	80001d0 <__aeabi_dsub>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	f7f9 f982 	bl	800078c <__aeabi_ddiv>
 8007488:	e7e6      	b.n	8007458 <__ieee754_sqrt+0x34>
 800748a:	151b      	asrs	r3, r3, #20
 800748c:	d10c      	bne.n	80074a8 <__ieee754_sqrt+0x84>
 800748e:	2a00      	cmp	r2, #0
 8007490:	d06d      	beq.n	800756e <__ieee754_sqrt+0x14a>
 8007492:	2000      	movs	r0, #0
 8007494:	02d6      	lsls	r6, r2, #11
 8007496:	d56e      	bpl.n	8007576 <__ieee754_sqrt+0x152>
 8007498:	1e44      	subs	r4, r0, #1
 800749a:	1b1b      	subs	r3, r3, r4
 800749c:	f1c0 0420 	rsb	r4, r0, #32
 80074a0:	fa21 f404 	lsr.w	r4, r1, r4
 80074a4:	4322      	orrs	r2, r4
 80074a6:	4081      	lsls	r1, r0
 80074a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80074ac:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80074b0:	07dd      	lsls	r5, r3, #31
 80074b2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80074b6:	bf42      	ittt	mi
 80074b8:	0052      	lslmi	r2, r2, #1
 80074ba:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80074be:	0049      	lslmi	r1, r1, #1
 80074c0:	1058      	asrs	r0, r3, #1
 80074c2:	2500      	movs	r5, #0
 80074c4:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80074c8:	441a      	add	r2, r3
 80074ca:	0049      	lsls	r1, r1, #1
 80074cc:	2316      	movs	r3, #22
 80074ce:	462c      	mov	r4, r5
 80074d0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80074d4:	19a7      	adds	r7, r4, r6
 80074d6:	4297      	cmp	r7, r2
 80074d8:	bfde      	ittt	le
 80074da:	1bd2      	suble	r2, r2, r7
 80074dc:	19bc      	addle	r4, r7, r6
 80074de:	19ad      	addle	r5, r5, r6
 80074e0:	0052      	lsls	r2, r2, #1
 80074e2:	3b01      	subs	r3, #1
 80074e4:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80074e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80074ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80074f0:	d1f0      	bne.n	80074d4 <__ieee754_sqrt+0xb0>
 80074f2:	f04f 0e20 	mov.w	lr, #32
 80074f6:	469c      	mov	ip, r3
 80074f8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80074fc:	42a2      	cmp	r2, r4
 80074fe:	eb06 070c 	add.w	r7, r6, ip
 8007502:	dc02      	bgt.n	800750a <__ieee754_sqrt+0xe6>
 8007504:	d112      	bne.n	800752c <__ieee754_sqrt+0x108>
 8007506:	428f      	cmp	r7, r1
 8007508:	d810      	bhi.n	800752c <__ieee754_sqrt+0x108>
 800750a:	2f00      	cmp	r7, #0
 800750c:	eb07 0c06 	add.w	ip, r7, r6
 8007510:	da34      	bge.n	800757c <__ieee754_sqrt+0x158>
 8007512:	f1bc 0f00 	cmp.w	ip, #0
 8007516:	db31      	blt.n	800757c <__ieee754_sqrt+0x158>
 8007518:	f104 0801 	add.w	r8, r4, #1
 800751c:	1b12      	subs	r2, r2, r4
 800751e:	428f      	cmp	r7, r1
 8007520:	bf88      	it	hi
 8007522:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007526:	1bc9      	subs	r1, r1, r7
 8007528:	4433      	add	r3, r6
 800752a:	4644      	mov	r4, r8
 800752c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8007530:	f1be 0e01 	subs.w	lr, lr, #1
 8007534:	443a      	add	r2, r7
 8007536:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800753a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800753e:	d1dd      	bne.n	80074fc <__ieee754_sqrt+0xd8>
 8007540:	430a      	orrs	r2, r1
 8007542:	d006      	beq.n	8007552 <__ieee754_sqrt+0x12e>
 8007544:	1c5c      	adds	r4, r3, #1
 8007546:	bf13      	iteet	ne
 8007548:	3301      	addne	r3, #1
 800754a:	3501      	addeq	r5, #1
 800754c:	4673      	moveq	r3, lr
 800754e:	f023 0301 	bicne.w	r3, r3, #1
 8007552:	106a      	asrs	r2, r5, #1
 8007554:	085b      	lsrs	r3, r3, #1
 8007556:	07e9      	lsls	r1, r5, #31
 8007558:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800755c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007560:	bf48      	it	mi
 8007562:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007566:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800756a:	461c      	mov	r4, r3
 800756c:	e776      	b.n	800745c <__ieee754_sqrt+0x38>
 800756e:	0aca      	lsrs	r2, r1, #11
 8007570:	3b15      	subs	r3, #21
 8007572:	0549      	lsls	r1, r1, #21
 8007574:	e78b      	b.n	800748e <__ieee754_sqrt+0x6a>
 8007576:	0052      	lsls	r2, r2, #1
 8007578:	3001      	adds	r0, #1
 800757a:	e78b      	b.n	8007494 <__ieee754_sqrt+0x70>
 800757c:	46a0      	mov	r8, r4
 800757e:	e7cd      	b.n	800751c <__ieee754_sqrt+0xf8>
 8007580:	7ff00000 	.word	0x7ff00000
 8007584:	00000000 	.word	0x00000000

08007588 <__kernel_cos>:
 8007588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758c:	ec59 8b10 	vmov	r8, r9, d0
 8007590:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8007594:	b085      	sub	sp, #20
 8007596:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800759a:	ed8d 1b00 	vstr	d1, [sp]
 800759e:	da07      	bge.n	80075b0 <__kernel_cos+0x28>
 80075a0:	ee10 0a10 	vmov	r0, s0
 80075a4:	4649      	mov	r1, r9
 80075a6:	f7f9 fa77 	bl	8000a98 <__aeabi_d2iz>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	f000 80aa 	beq.w	8007704 <__kernel_cos+0x17c>
 80075b0:	4642      	mov	r2, r8
 80075b2:	464b      	mov	r3, r9
 80075b4:	4640      	mov	r0, r8
 80075b6:	4649      	mov	r1, r9
 80075b8:	f7f8 ffbe 	bl	8000538 <__aeabi_dmul>
 80075bc:	a359      	add	r3, pc, #356	; (adr r3, 8007724 <__kernel_cos+0x19c>)
 80075be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c2:	4604      	mov	r4, r0
 80075c4:	460d      	mov	r5, r1
 80075c6:	f7f8 ffb7 	bl	8000538 <__aeabi_dmul>
 80075ca:	a358      	add	r3, pc, #352	; (adr r3, 800772c <__kernel_cos+0x1a4>)
 80075cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d0:	f7f8 fe00 	bl	80001d4 <__adddf3>
 80075d4:	4622      	mov	r2, r4
 80075d6:	462b      	mov	r3, r5
 80075d8:	f7f8 ffae 	bl	8000538 <__aeabi_dmul>
 80075dc:	a355      	add	r3, pc, #340	; (adr r3, 8007734 <__kernel_cos+0x1ac>)
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	f7f8 fdf5 	bl	80001d0 <__aeabi_dsub>
 80075e6:	4622      	mov	r2, r4
 80075e8:	462b      	mov	r3, r5
 80075ea:	f7f8 ffa5 	bl	8000538 <__aeabi_dmul>
 80075ee:	a353      	add	r3, pc, #332	; (adr r3, 800773c <__kernel_cos+0x1b4>)
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	f7f8 fdee 	bl	80001d4 <__adddf3>
 80075f8:	4622      	mov	r2, r4
 80075fa:	462b      	mov	r3, r5
 80075fc:	f7f8 ff9c 	bl	8000538 <__aeabi_dmul>
 8007600:	a350      	add	r3, pc, #320	; (adr r3, 8007744 <__kernel_cos+0x1bc>)
 8007602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007606:	f7f8 fde3 	bl	80001d0 <__aeabi_dsub>
 800760a:	4622      	mov	r2, r4
 800760c:	462b      	mov	r3, r5
 800760e:	f7f8 ff93 	bl	8000538 <__aeabi_dmul>
 8007612:	a34e      	add	r3, pc, #312	; (adr r3, 800774c <__kernel_cos+0x1c4>)
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	f7f8 fddc 	bl	80001d4 <__adddf3>
 800761c:	462b      	mov	r3, r5
 800761e:	4622      	mov	r2, r4
 8007620:	f7f8 ff8a 	bl	8000538 <__aeabi_dmul>
 8007624:	4b3a      	ldr	r3, [pc, #232]	; (8007710 <__kernel_cos+0x188>)
 8007626:	429f      	cmp	r7, r3
 8007628:	4682      	mov	sl, r0
 800762a:	468b      	mov	fp, r1
 800762c:	dc2c      	bgt.n	8007688 <__kernel_cos+0x100>
 800762e:	2200      	movs	r2, #0
 8007630:	4b38      	ldr	r3, [pc, #224]	; (8007714 <__kernel_cos+0x18c>)
 8007632:	4620      	mov	r0, r4
 8007634:	4629      	mov	r1, r5
 8007636:	f7f8 ff7f 	bl	8000538 <__aeabi_dmul>
 800763a:	4652      	mov	r2, sl
 800763c:	4606      	mov	r6, r0
 800763e:	460f      	mov	r7, r1
 8007640:	465b      	mov	r3, fp
 8007642:	4620      	mov	r0, r4
 8007644:	4629      	mov	r1, r5
 8007646:	f7f8 ff77 	bl	8000538 <__aeabi_dmul>
 800764a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800764e:	4604      	mov	r4, r0
 8007650:	460d      	mov	r5, r1
 8007652:	4640      	mov	r0, r8
 8007654:	4649      	mov	r1, r9
 8007656:	f7f8 ff6f 	bl	8000538 <__aeabi_dmul>
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	4620      	mov	r0, r4
 8007660:	4629      	mov	r1, r5
 8007662:	f7f8 fdb5 	bl	80001d0 <__aeabi_dsub>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	4630      	mov	r0, r6
 800766c:	4639      	mov	r1, r7
 800766e:	f7f8 fdaf 	bl	80001d0 <__aeabi_dsub>
 8007672:	460b      	mov	r3, r1
 8007674:	4928      	ldr	r1, [pc, #160]	; (8007718 <__kernel_cos+0x190>)
 8007676:	4602      	mov	r2, r0
 8007678:	2000      	movs	r0, #0
 800767a:	f7f8 fda9 	bl	80001d0 <__aeabi_dsub>
 800767e:	ec41 0b10 	vmov	d0, r0, r1
 8007682:	b005      	add	sp, #20
 8007684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007688:	4b24      	ldr	r3, [pc, #144]	; (800771c <__kernel_cos+0x194>)
 800768a:	4923      	ldr	r1, [pc, #140]	; (8007718 <__kernel_cos+0x190>)
 800768c:	429f      	cmp	r7, r3
 800768e:	bfd7      	itett	le
 8007690:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8007694:	4f22      	ldrgt	r7, [pc, #136]	; (8007720 <__kernel_cos+0x198>)
 8007696:	2200      	movle	r2, #0
 8007698:	4616      	movle	r6, r2
 800769a:	bfd4      	ite	le
 800769c:	461f      	movle	r7, r3
 800769e:	2600      	movgt	r6, #0
 80076a0:	4632      	mov	r2, r6
 80076a2:	463b      	mov	r3, r7
 80076a4:	2000      	movs	r0, #0
 80076a6:	f7f8 fd93 	bl	80001d0 <__aeabi_dsub>
 80076aa:	2200      	movs	r2, #0
 80076ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076b0:	4b18      	ldr	r3, [pc, #96]	; (8007714 <__kernel_cos+0x18c>)
 80076b2:	4620      	mov	r0, r4
 80076b4:	4629      	mov	r1, r5
 80076b6:	f7f8 ff3f 	bl	8000538 <__aeabi_dmul>
 80076ba:	4632      	mov	r2, r6
 80076bc:	463b      	mov	r3, r7
 80076be:	f7f8 fd87 	bl	80001d0 <__aeabi_dsub>
 80076c2:	4652      	mov	r2, sl
 80076c4:	4606      	mov	r6, r0
 80076c6:	460f      	mov	r7, r1
 80076c8:	465b      	mov	r3, fp
 80076ca:	4620      	mov	r0, r4
 80076cc:	4629      	mov	r1, r5
 80076ce:	f7f8 ff33 	bl	8000538 <__aeabi_dmul>
 80076d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076d6:	4604      	mov	r4, r0
 80076d8:	460d      	mov	r5, r1
 80076da:	4640      	mov	r0, r8
 80076dc:	4649      	mov	r1, r9
 80076de:	f7f8 ff2b 	bl	8000538 <__aeabi_dmul>
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	4620      	mov	r0, r4
 80076e8:	4629      	mov	r1, r5
 80076ea:	f7f8 fd71 	bl	80001d0 <__aeabi_dsub>
 80076ee:	4602      	mov	r2, r0
 80076f0:	460b      	mov	r3, r1
 80076f2:	4630      	mov	r0, r6
 80076f4:	4639      	mov	r1, r7
 80076f6:	f7f8 fd6b 	bl	80001d0 <__aeabi_dsub>
 80076fa:	4602      	mov	r2, r0
 80076fc:	460b      	mov	r3, r1
 80076fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007702:	e7ba      	b.n	800767a <__kernel_cos+0xf2>
 8007704:	2000      	movs	r0, #0
 8007706:	4904      	ldr	r1, [pc, #16]	; (8007718 <__kernel_cos+0x190>)
 8007708:	e7b9      	b.n	800767e <__kernel_cos+0xf6>
 800770a:	bf00      	nop
 800770c:	f3af 8000 	nop.w
 8007710:	3fd33332 	.word	0x3fd33332
 8007714:	3fe00000 	.word	0x3fe00000
 8007718:	3ff00000 	.word	0x3ff00000
 800771c:	3fe90000 	.word	0x3fe90000
 8007720:	3fd20000 	.word	0x3fd20000
 8007724:	be8838d4 	.word	0xbe8838d4
 8007728:	bda8fae9 	.word	0xbda8fae9
 800772c:	bdb4b1c4 	.word	0xbdb4b1c4
 8007730:	3e21ee9e 	.word	0x3e21ee9e
 8007734:	809c52ad 	.word	0x809c52ad
 8007738:	3e927e4f 	.word	0x3e927e4f
 800773c:	19cb1590 	.word	0x19cb1590
 8007740:	3efa01a0 	.word	0x3efa01a0
 8007744:	16c15177 	.word	0x16c15177
 8007748:	3f56c16c 	.word	0x3f56c16c
 800774c:	5555554c 	.word	0x5555554c
 8007750:	3fa55555 	.word	0x3fa55555
 8007754:	00000000 	.word	0x00000000

08007758 <__kernel_rem_pio2>:
 8007758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775c:	ed2d 8b02 	vpush	{d8}
 8007760:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007764:	1ed4      	subs	r4, r2, #3
 8007766:	9306      	str	r3, [sp, #24]
 8007768:	9102      	str	r1, [sp, #8]
 800776a:	4bc3      	ldr	r3, [pc, #780]	; (8007a78 <__kernel_rem_pio2+0x320>)
 800776c:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800776e:	9009      	str	r0, [sp, #36]	; 0x24
 8007770:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	9b06      	ldr	r3, [sp, #24]
 8007778:	3b01      	subs	r3, #1
 800777a:	9304      	str	r3, [sp, #16]
 800777c:	2318      	movs	r3, #24
 800777e:	fb94 f4f3 	sdiv	r4, r4, r3
 8007782:	f06f 0317 	mvn.w	r3, #23
 8007786:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800778a:	fb04 3303 	mla	r3, r4, r3, r3
 800778e:	eb03 0a02 	add.w	sl, r3, r2
 8007792:	9b00      	ldr	r3, [sp, #0]
 8007794:	9a04      	ldr	r2, [sp, #16]
 8007796:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007a68 <__kernel_rem_pio2+0x310>
 800779a:	eb03 0802 	add.w	r8, r3, r2
 800779e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80077a0:	1aa7      	subs	r7, r4, r2
 80077a2:	ae20      	add	r6, sp, #128	; 0x80
 80077a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80077a8:	2500      	movs	r5, #0
 80077aa:	4545      	cmp	r5, r8
 80077ac:	dd13      	ble.n	80077d6 <__kernel_rem_pio2+0x7e>
 80077ae:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007a68 <__kernel_rem_pio2+0x310>
 80077b2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80077b6:	2600      	movs	r6, #0
 80077b8:	9b00      	ldr	r3, [sp, #0]
 80077ba:	429e      	cmp	r6, r3
 80077bc:	dc32      	bgt.n	8007824 <__kernel_rem_pio2+0xcc>
 80077be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c0:	9303      	str	r3, [sp, #12]
 80077c2:	9b06      	ldr	r3, [sp, #24]
 80077c4:	199d      	adds	r5, r3, r6
 80077c6:	ab20      	add	r3, sp, #128	; 0x80
 80077c8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80077cc:	9308      	str	r3, [sp, #32]
 80077ce:	ec59 8b18 	vmov	r8, r9, d8
 80077d2:	2700      	movs	r7, #0
 80077d4:	e01f      	b.n	8007816 <__kernel_rem_pio2+0xbe>
 80077d6:	42ef      	cmn	r7, r5
 80077d8:	d407      	bmi.n	80077ea <__kernel_rem_pio2+0x92>
 80077da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80077de:	f7f8 fe45 	bl	800046c <__aeabi_i2d>
 80077e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80077e6:	3501      	adds	r5, #1
 80077e8:	e7df      	b.n	80077aa <__kernel_rem_pio2+0x52>
 80077ea:	ec51 0b18 	vmov	r0, r1, d8
 80077ee:	e7f8      	b.n	80077e2 <__kernel_rem_pio2+0x8a>
 80077f0:	9908      	ldr	r1, [sp, #32]
 80077f2:	9d03      	ldr	r5, [sp, #12]
 80077f4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80077f8:	9108      	str	r1, [sp, #32]
 80077fa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80077fe:	9503      	str	r5, [sp, #12]
 8007800:	f7f8 fe9a 	bl	8000538 <__aeabi_dmul>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4640      	mov	r0, r8
 800780a:	4649      	mov	r1, r9
 800780c:	f7f8 fce2 	bl	80001d4 <__adddf3>
 8007810:	3701      	adds	r7, #1
 8007812:	4680      	mov	r8, r0
 8007814:	4689      	mov	r9, r1
 8007816:	9b04      	ldr	r3, [sp, #16]
 8007818:	429f      	cmp	r7, r3
 800781a:	dde9      	ble.n	80077f0 <__kernel_rem_pio2+0x98>
 800781c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8007820:	3601      	adds	r6, #1
 8007822:	e7c9      	b.n	80077b8 <__kernel_rem_pio2+0x60>
 8007824:	9b00      	ldr	r3, [sp, #0]
 8007826:	9f00      	ldr	r7, [sp, #0]
 8007828:	aa0c      	add	r2, sp, #48	; 0x30
 800782a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800782e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007830:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007832:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007836:	930a      	str	r3, [sp, #40]	; 0x28
 8007838:	ab98      	add	r3, sp, #608	; 0x260
 800783a:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800783e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007842:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007846:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800784a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800784e:	9308      	str	r3, [sp, #32]
 8007850:	9a08      	ldr	r2, [sp, #32]
 8007852:	ab98      	add	r3, sp, #608	; 0x260
 8007854:	4413      	add	r3, r2
 8007856:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 800785a:	2600      	movs	r6, #0
 800785c:	1bbb      	subs	r3, r7, r6
 800785e:	2b00      	cmp	r3, #0
 8007860:	dc77      	bgt.n	8007952 <__kernel_rem_pio2+0x1fa>
 8007862:	ec49 8b10 	vmov	d0, r8, r9
 8007866:	4650      	mov	r0, sl
 8007868:	f000 fdba 	bl	80083e0 <scalbn>
 800786c:	ec55 4b10 	vmov	r4, r5, d0
 8007870:	2200      	movs	r2, #0
 8007872:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007876:	ee10 0a10 	vmov	r0, s0
 800787a:	4629      	mov	r1, r5
 800787c:	f7f8 fe5c 	bl	8000538 <__aeabi_dmul>
 8007880:	ec41 0b10 	vmov	d0, r0, r1
 8007884:	f000 fd24 	bl	80082d0 <floor>
 8007888:	2200      	movs	r2, #0
 800788a:	ec51 0b10 	vmov	r0, r1, d0
 800788e:	4b7b      	ldr	r3, [pc, #492]	; (8007a7c <__kernel_rem_pio2+0x324>)
 8007890:	f7f8 fe52 	bl	8000538 <__aeabi_dmul>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	4620      	mov	r0, r4
 800789a:	4629      	mov	r1, r5
 800789c:	f7f8 fc98 	bl	80001d0 <__aeabi_dsub>
 80078a0:	460d      	mov	r5, r1
 80078a2:	4604      	mov	r4, r0
 80078a4:	f7f9 f8f8 	bl	8000a98 <__aeabi_d2iz>
 80078a8:	9003      	str	r0, [sp, #12]
 80078aa:	f7f8 fddf 	bl	800046c <__aeabi_i2d>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4620      	mov	r0, r4
 80078b4:	4629      	mov	r1, r5
 80078b6:	f7f8 fc8b 	bl	80001d0 <__aeabi_dsub>
 80078ba:	f1ba 0f00 	cmp.w	sl, #0
 80078be:	4680      	mov	r8, r0
 80078c0:	4689      	mov	r9, r1
 80078c2:	dd6b      	ble.n	800799c <__kernel_rem_pio2+0x244>
 80078c4:	1e7a      	subs	r2, r7, #1
 80078c6:	ab0c      	add	r3, sp, #48	; 0x30
 80078c8:	f1ca 0118 	rsb	r1, sl, #24
 80078cc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80078d0:	9c03      	ldr	r4, [sp, #12]
 80078d2:	fa40 f301 	asr.w	r3, r0, r1
 80078d6:	441c      	add	r4, r3
 80078d8:	408b      	lsls	r3, r1
 80078da:	1ac0      	subs	r0, r0, r3
 80078dc:	ab0c      	add	r3, sp, #48	; 0x30
 80078de:	9403      	str	r4, [sp, #12]
 80078e0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80078e4:	f1ca 0317 	rsb	r3, sl, #23
 80078e8:	fa40 fb03 	asr.w	fp, r0, r3
 80078ec:	f1bb 0f00 	cmp.w	fp, #0
 80078f0:	dd62      	ble.n	80079b8 <__kernel_rem_pio2+0x260>
 80078f2:	9b03      	ldr	r3, [sp, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	3301      	adds	r3, #1
 80078f8:	9303      	str	r3, [sp, #12]
 80078fa:	4614      	mov	r4, r2
 80078fc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007900:	4297      	cmp	r7, r2
 8007902:	f300 8089 	bgt.w	8007a18 <__kernel_rem_pio2+0x2c0>
 8007906:	f1ba 0f00 	cmp.w	sl, #0
 800790a:	dd07      	ble.n	800791c <__kernel_rem_pio2+0x1c4>
 800790c:	f1ba 0f01 	cmp.w	sl, #1
 8007910:	f000 8096 	beq.w	8007a40 <__kernel_rem_pio2+0x2e8>
 8007914:	f1ba 0f02 	cmp.w	sl, #2
 8007918:	f000 809c 	beq.w	8007a54 <__kernel_rem_pio2+0x2fc>
 800791c:	f1bb 0f02 	cmp.w	fp, #2
 8007920:	d14a      	bne.n	80079b8 <__kernel_rem_pio2+0x260>
 8007922:	4642      	mov	r2, r8
 8007924:	464b      	mov	r3, r9
 8007926:	2000      	movs	r0, #0
 8007928:	4955      	ldr	r1, [pc, #340]	; (8007a80 <__kernel_rem_pio2+0x328>)
 800792a:	f7f8 fc51 	bl	80001d0 <__aeabi_dsub>
 800792e:	4680      	mov	r8, r0
 8007930:	4689      	mov	r9, r1
 8007932:	2c00      	cmp	r4, #0
 8007934:	d040      	beq.n	80079b8 <__kernel_rem_pio2+0x260>
 8007936:	4650      	mov	r0, sl
 8007938:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007a70 <__kernel_rem_pio2+0x318>
 800793c:	f000 fd50 	bl	80083e0 <scalbn>
 8007940:	4640      	mov	r0, r8
 8007942:	4649      	mov	r1, r9
 8007944:	ec53 2b10 	vmov	r2, r3, d0
 8007948:	f7f8 fc42 	bl	80001d0 <__aeabi_dsub>
 800794c:	4680      	mov	r8, r0
 800794e:	4689      	mov	r9, r1
 8007950:	e032      	b.n	80079b8 <__kernel_rem_pio2+0x260>
 8007952:	2200      	movs	r2, #0
 8007954:	4b4b      	ldr	r3, [pc, #300]	; (8007a84 <__kernel_rem_pio2+0x32c>)
 8007956:	4640      	mov	r0, r8
 8007958:	4649      	mov	r1, r9
 800795a:	f7f8 fded 	bl	8000538 <__aeabi_dmul>
 800795e:	f7f9 f89b 	bl	8000a98 <__aeabi_d2iz>
 8007962:	f7f8 fd83 	bl	800046c <__aeabi_i2d>
 8007966:	2200      	movs	r2, #0
 8007968:	4b47      	ldr	r3, [pc, #284]	; (8007a88 <__kernel_rem_pio2+0x330>)
 800796a:	4604      	mov	r4, r0
 800796c:	460d      	mov	r5, r1
 800796e:	f7f8 fde3 	bl	8000538 <__aeabi_dmul>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	4640      	mov	r0, r8
 8007978:	4649      	mov	r1, r9
 800797a:	f7f8 fc29 	bl	80001d0 <__aeabi_dsub>
 800797e:	f7f9 f88b 	bl	8000a98 <__aeabi_d2iz>
 8007982:	ab0c      	add	r3, sp, #48	; 0x30
 8007984:	4629      	mov	r1, r5
 8007986:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800798a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800798e:	4620      	mov	r0, r4
 8007990:	f7f8 fc20 	bl	80001d4 <__adddf3>
 8007994:	3601      	adds	r6, #1
 8007996:	4680      	mov	r8, r0
 8007998:	4689      	mov	r9, r1
 800799a:	e75f      	b.n	800785c <__kernel_rem_pio2+0x104>
 800799c:	d106      	bne.n	80079ac <__kernel_rem_pio2+0x254>
 800799e:	1e7b      	subs	r3, r7, #1
 80079a0:	aa0c      	add	r2, sp, #48	; 0x30
 80079a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80079a6:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80079aa:	e79f      	b.n	80078ec <__kernel_rem_pio2+0x194>
 80079ac:	2200      	movs	r2, #0
 80079ae:	4b37      	ldr	r3, [pc, #220]	; (8007a8c <__kernel_rem_pio2+0x334>)
 80079b0:	f7f9 f848 	bl	8000a44 <__aeabi_dcmpge>
 80079b4:	bb68      	cbnz	r0, 8007a12 <__kernel_rem_pio2+0x2ba>
 80079b6:	4683      	mov	fp, r0
 80079b8:	2200      	movs	r2, #0
 80079ba:	2300      	movs	r3, #0
 80079bc:	4640      	mov	r0, r8
 80079be:	4649      	mov	r1, r9
 80079c0:	f7f9 f822 	bl	8000a08 <__aeabi_dcmpeq>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	f000 80c1 	beq.w	8007b4c <__kernel_rem_pio2+0x3f4>
 80079ca:	1e7c      	subs	r4, r7, #1
 80079cc:	4623      	mov	r3, r4
 80079ce:	2200      	movs	r2, #0
 80079d0:	9900      	ldr	r1, [sp, #0]
 80079d2:	428b      	cmp	r3, r1
 80079d4:	da5c      	bge.n	8007a90 <__kernel_rem_pio2+0x338>
 80079d6:	2a00      	cmp	r2, #0
 80079d8:	f040 808b 	bne.w	8007af2 <__kernel_rem_pio2+0x39a>
 80079dc:	2401      	movs	r4, #1
 80079de:	f06f 0203 	mvn.w	r2, #3
 80079e2:	fb02 f304 	mul.w	r3, r2, r4
 80079e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079e8:	58cb      	ldr	r3, [r1, r3]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d056      	beq.n	8007a9c <__kernel_rem_pio2+0x344>
 80079ee:	9b08      	ldr	r3, [sp, #32]
 80079f0:	aa98      	add	r2, sp, #608	; 0x260
 80079f2:	4413      	add	r3, r2
 80079f4:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 80079f8:	9b06      	ldr	r3, [sp, #24]
 80079fa:	19dd      	adds	r5, r3, r7
 80079fc:	ab20      	add	r3, sp, #128	; 0x80
 80079fe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007a02:	19e3      	adds	r3, r4, r7
 8007a04:	1c7e      	adds	r6, r7, #1
 8007a06:	9303      	str	r3, [sp, #12]
 8007a08:	9b03      	ldr	r3, [sp, #12]
 8007a0a:	429e      	cmp	r6, r3
 8007a0c:	dd48      	ble.n	8007aa0 <__kernel_rem_pio2+0x348>
 8007a0e:	461f      	mov	r7, r3
 8007a10:	e712      	b.n	8007838 <__kernel_rem_pio2+0xe0>
 8007a12:	f04f 0b02 	mov.w	fp, #2
 8007a16:	e76c      	b.n	80078f2 <__kernel_rem_pio2+0x19a>
 8007a18:	ab0c      	add	r3, sp, #48	; 0x30
 8007a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1e:	b94c      	cbnz	r4, 8007a34 <__kernel_rem_pio2+0x2dc>
 8007a20:	b12b      	cbz	r3, 8007a2e <__kernel_rem_pio2+0x2d6>
 8007a22:	a80c      	add	r0, sp, #48	; 0x30
 8007a24:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007a28:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	3201      	adds	r2, #1
 8007a30:	461c      	mov	r4, r3
 8007a32:	e765      	b.n	8007900 <__kernel_rem_pio2+0x1a8>
 8007a34:	a80c      	add	r0, sp, #48	; 0x30
 8007a36:	1acb      	subs	r3, r1, r3
 8007a38:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007a3c:	4623      	mov	r3, r4
 8007a3e:	e7f6      	b.n	8007a2e <__kernel_rem_pio2+0x2d6>
 8007a40:	1e7a      	subs	r2, r7, #1
 8007a42:	ab0c      	add	r3, sp, #48	; 0x30
 8007a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a48:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007a4c:	a90c      	add	r1, sp, #48	; 0x30
 8007a4e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007a52:	e763      	b.n	800791c <__kernel_rem_pio2+0x1c4>
 8007a54:	1e7a      	subs	r2, r7, #1
 8007a56:	ab0c      	add	r3, sp, #48	; 0x30
 8007a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007a60:	e7f4      	b.n	8007a4c <__kernel_rem_pio2+0x2f4>
 8007a62:	bf00      	nop
 8007a64:	f3af 8000 	nop.w
	...
 8007a74:	3ff00000 	.word	0x3ff00000
 8007a78:	08008f38 	.word	0x08008f38
 8007a7c:	40200000 	.word	0x40200000
 8007a80:	3ff00000 	.word	0x3ff00000
 8007a84:	3e700000 	.word	0x3e700000
 8007a88:	41700000 	.word	0x41700000
 8007a8c:	3fe00000 	.word	0x3fe00000
 8007a90:	a90c      	add	r1, sp, #48	; 0x30
 8007a92:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	e799      	b.n	80079d0 <__kernel_rem_pio2+0x278>
 8007a9c:	3401      	adds	r4, #1
 8007a9e:	e7a0      	b.n	80079e2 <__kernel_rem_pio2+0x28a>
 8007aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007aa6:	f7f8 fce1 	bl	800046c <__aeabi_i2d>
 8007aaa:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab0:	9508      	str	r5, [sp, #32]
 8007ab2:	461c      	mov	r4, r3
 8007ab4:	2700      	movs	r7, #0
 8007ab6:	f04f 0800 	mov.w	r8, #0
 8007aba:	f04f 0900 	mov.w	r9, #0
 8007abe:	9b04      	ldr	r3, [sp, #16]
 8007ac0:	429f      	cmp	r7, r3
 8007ac2:	dd03      	ble.n	8007acc <__kernel_rem_pio2+0x374>
 8007ac4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8007ac8:	3601      	adds	r6, #1
 8007aca:	e79d      	b.n	8007a08 <__kernel_rem_pio2+0x2b0>
 8007acc:	9908      	ldr	r1, [sp, #32]
 8007ace:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8007ad2:	9108      	str	r1, [sp, #32]
 8007ad4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007ad8:	f7f8 fd2e 	bl	8000538 <__aeabi_dmul>
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4640      	mov	r0, r8
 8007ae2:	4649      	mov	r1, r9
 8007ae4:	f7f8 fb76 	bl	80001d4 <__adddf3>
 8007ae8:	3701      	adds	r7, #1
 8007aea:	4680      	mov	r8, r0
 8007aec:	4689      	mov	r9, r1
 8007aee:	e7e6      	b.n	8007abe <__kernel_rem_pio2+0x366>
 8007af0:	3c01      	subs	r4, #1
 8007af2:	ab0c      	add	r3, sp, #48	; 0x30
 8007af4:	f1aa 0a18 	sub.w	sl, sl, #24
 8007af8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d0f7      	beq.n	8007af0 <__kernel_rem_pio2+0x398>
 8007b00:	4650      	mov	r0, sl
 8007b02:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8007dd8 <__kernel_rem_pio2+0x680>
 8007b06:	f000 fc6b 	bl	80083e0 <scalbn>
 8007b0a:	00e5      	lsls	r5, r4, #3
 8007b0c:	ab98      	add	r3, sp, #608	; 0x260
 8007b0e:	eb03 0905 	add.w	r9, r3, r5
 8007b12:	ec57 6b10 	vmov	r6, r7, d0
 8007b16:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8007b1a:	46a0      	mov	r8, r4
 8007b1c:	f1b8 0f00 	cmp.w	r8, #0
 8007b20:	da4d      	bge.n	8007bbe <__kernel_rem_pio2+0x466>
 8007b22:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8007de0 <__kernel_rem_pio2+0x688>
 8007b26:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	9304      	str	r3, [sp, #16]
 8007b2e:	4657      	mov	r7, sl
 8007b30:	9b04      	ldr	r3, [sp, #16]
 8007b32:	ebb4 0903 	subs.w	r9, r4, r3
 8007b36:	d476      	bmi.n	8007c26 <__kernel_rem_pio2+0x4ce>
 8007b38:	4bab      	ldr	r3, [pc, #684]	; (8007de8 <__kernel_rem_pio2+0x690>)
 8007b3a:	461e      	mov	r6, r3
 8007b3c:	ab70      	add	r3, sp, #448	; 0x1c0
 8007b3e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007b42:	ed8d 8b06 	vstr	d8, [sp, #24]
 8007b46:	f04f 0800 	mov.w	r8, #0
 8007b4a:	e05e      	b.n	8007c0a <__kernel_rem_pio2+0x4b2>
 8007b4c:	f1ca 0000 	rsb	r0, sl, #0
 8007b50:	ec49 8b10 	vmov	d0, r8, r9
 8007b54:	f000 fc44 	bl	80083e0 <scalbn>
 8007b58:	ec55 4b10 	vmov	r4, r5, d0
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	4ba3      	ldr	r3, [pc, #652]	; (8007dec <__kernel_rem_pio2+0x694>)
 8007b60:	ee10 0a10 	vmov	r0, s0
 8007b64:	4629      	mov	r1, r5
 8007b66:	f7f8 ff6d 	bl	8000a44 <__aeabi_dcmpge>
 8007b6a:	b1f8      	cbz	r0, 8007bac <__kernel_rem_pio2+0x454>
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4ba0      	ldr	r3, [pc, #640]	; (8007df0 <__kernel_rem_pio2+0x698>)
 8007b70:	4620      	mov	r0, r4
 8007b72:	4629      	mov	r1, r5
 8007b74:	f7f8 fce0 	bl	8000538 <__aeabi_dmul>
 8007b78:	f7f8 ff8e 	bl	8000a98 <__aeabi_d2iz>
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	f7f8 fc75 	bl	800046c <__aeabi_i2d>
 8007b82:	2200      	movs	r2, #0
 8007b84:	4b99      	ldr	r3, [pc, #612]	; (8007dec <__kernel_rem_pio2+0x694>)
 8007b86:	f7f8 fcd7 	bl	8000538 <__aeabi_dmul>
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	4629      	mov	r1, r5
 8007b90:	4620      	mov	r0, r4
 8007b92:	f7f8 fb1d 	bl	80001d0 <__aeabi_dsub>
 8007b96:	f7f8 ff7f 	bl	8000a98 <__aeabi_d2iz>
 8007b9a:	1c7c      	adds	r4, r7, #1
 8007b9c:	ab0c      	add	r3, sp, #48	; 0x30
 8007b9e:	f10a 0a18 	add.w	sl, sl, #24
 8007ba2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8007ba6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8007baa:	e7a9      	b.n	8007b00 <__kernel_rem_pio2+0x3a8>
 8007bac:	4620      	mov	r0, r4
 8007bae:	4629      	mov	r1, r5
 8007bb0:	f7f8 ff72 	bl	8000a98 <__aeabi_d2iz>
 8007bb4:	ab0c      	add	r3, sp, #48	; 0x30
 8007bb6:	463c      	mov	r4, r7
 8007bb8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8007bbc:	e7a0      	b.n	8007b00 <__kernel_rem_pio2+0x3a8>
 8007bbe:	ab0c      	add	r3, sp, #48	; 0x30
 8007bc0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007bc4:	f7f8 fc52 	bl	800046c <__aeabi_i2d>
 8007bc8:	4632      	mov	r2, r6
 8007bca:	463b      	mov	r3, r7
 8007bcc:	f7f8 fcb4 	bl	8000538 <__aeabi_dmul>
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	e969 0102 	strd	r0, r1, [r9, #-8]!
 8007bd6:	4b86      	ldr	r3, [pc, #536]	; (8007df0 <__kernel_rem_pio2+0x698>)
 8007bd8:	4630      	mov	r0, r6
 8007bda:	4639      	mov	r1, r7
 8007bdc:	f7f8 fcac 	bl	8000538 <__aeabi_dmul>
 8007be0:	f108 38ff 	add.w	r8, r8, #4294967295
 8007be4:	4606      	mov	r6, r0
 8007be6:	460f      	mov	r7, r1
 8007be8:	e798      	b.n	8007b1c <__kernel_rem_pio2+0x3c4>
 8007bea:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007bee:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8007bf2:	f7f8 fca1 	bl	8000538 <__aeabi_dmul>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bfe:	f7f8 fae9 	bl	80001d4 <__adddf3>
 8007c02:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c06:	f108 0801 	add.w	r8, r8, #1
 8007c0a:	9b00      	ldr	r3, [sp, #0]
 8007c0c:	4598      	cmp	r8, r3
 8007c0e:	dc02      	bgt.n	8007c16 <__kernel_rem_pio2+0x4be>
 8007c10:	9b04      	ldr	r3, [sp, #16]
 8007c12:	4598      	cmp	r8, r3
 8007c14:	dde9      	ble.n	8007bea <__kernel_rem_pio2+0x492>
 8007c16:	9b04      	ldr	r3, [sp, #16]
 8007c18:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	ecaa 7b02 	vstmia	sl!, {d7}
 8007c22:	9304      	str	r3, [sp, #16]
 8007c24:	e784      	b.n	8007b30 <__kernel_rem_pio2+0x3d8>
 8007c26:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d85d      	bhi.n	8007ce8 <__kernel_rem_pio2+0x590>
 8007c2c:	e8df f003 	tbb	[pc, r3]
 8007c30:	0226264b 	.word	0x0226264b
 8007c34:	ab98      	add	r3, sp, #608	; 0x260
 8007c36:	441d      	add	r5, r3
 8007c38:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8007c3c:	462e      	mov	r6, r5
 8007c3e:	46a2      	mov	sl, r4
 8007c40:	f1ba 0f00 	cmp.w	sl, #0
 8007c44:	dc6e      	bgt.n	8007d24 <__kernel_rem_pio2+0x5cc>
 8007c46:	462e      	mov	r6, r5
 8007c48:	46a2      	mov	sl, r4
 8007c4a:	f1ba 0f01 	cmp.w	sl, #1
 8007c4e:	f300 808a 	bgt.w	8007d66 <__kernel_rem_pio2+0x60e>
 8007c52:	2000      	movs	r0, #0
 8007c54:	2100      	movs	r1, #0
 8007c56:	2c01      	cmp	r4, #1
 8007c58:	f300 80a6 	bgt.w	8007da8 <__kernel_rem_pio2+0x650>
 8007c5c:	f1bb 0f00 	cmp.w	fp, #0
 8007c60:	f040 80a8 	bne.w	8007db4 <__kernel_rem_pio2+0x65c>
 8007c64:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8007c68:	9c02      	ldr	r4, [sp, #8]
 8007c6a:	e9c4 2300 	strd	r2, r3, [r4]
 8007c6e:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8007c72:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8007c76:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007c7a:	e035      	b.n	8007ce8 <__kernel_rem_pio2+0x590>
 8007c7c:	3508      	adds	r5, #8
 8007c7e:	ab48      	add	r3, sp, #288	; 0x120
 8007c80:	441d      	add	r5, r3
 8007c82:	4626      	mov	r6, r4
 8007c84:	2000      	movs	r0, #0
 8007c86:	2100      	movs	r1, #0
 8007c88:	2e00      	cmp	r6, #0
 8007c8a:	da3c      	bge.n	8007d06 <__kernel_rem_pio2+0x5ae>
 8007c8c:	f1bb 0f00 	cmp.w	fp, #0
 8007c90:	d03f      	beq.n	8007d12 <__kernel_rem_pio2+0x5ba>
 8007c92:	4602      	mov	r2, r0
 8007c94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c98:	9d02      	ldr	r5, [sp, #8]
 8007c9a:	e9c5 2300 	strd	r2, r3, [r5]
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007ca6:	f7f8 fa93 	bl	80001d0 <__aeabi_dsub>
 8007caa:	ae4a      	add	r6, sp, #296	; 0x128
 8007cac:	2501      	movs	r5, #1
 8007cae:	42ac      	cmp	r4, r5
 8007cb0:	da32      	bge.n	8007d18 <__kernel_rem_pio2+0x5c0>
 8007cb2:	f1bb 0f00 	cmp.w	fp, #0
 8007cb6:	d002      	beq.n	8007cbe <__kernel_rem_pio2+0x566>
 8007cb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	9b02      	ldr	r3, [sp, #8]
 8007cc0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007cc4:	e010      	b.n	8007ce8 <__kernel_rem_pio2+0x590>
 8007cc6:	ab98      	add	r3, sp, #608	; 0x260
 8007cc8:	441d      	add	r5, r3
 8007cca:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8007cce:	2000      	movs	r0, #0
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	2c00      	cmp	r4, #0
 8007cd4:	da11      	bge.n	8007cfa <__kernel_rem_pio2+0x5a2>
 8007cd6:	f1bb 0f00 	cmp.w	fp, #0
 8007cda:	d002      	beq.n	8007ce2 <__kernel_rem_pio2+0x58a>
 8007cdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	9b02      	ldr	r3, [sp, #8]
 8007ce4:	e9c3 0100 	strd	r0, r1, [r3]
 8007ce8:	9b03      	ldr	r3, [sp, #12]
 8007cea:	f003 0007 	and.w	r0, r3, #7
 8007cee:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007cf2:	ecbd 8b02 	vpop	{d8}
 8007cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfa:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007cfe:	f7f8 fa69 	bl	80001d4 <__adddf3>
 8007d02:	3c01      	subs	r4, #1
 8007d04:	e7e5      	b.n	8007cd2 <__kernel_rem_pio2+0x57a>
 8007d06:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007d0a:	f7f8 fa63 	bl	80001d4 <__adddf3>
 8007d0e:	3e01      	subs	r6, #1
 8007d10:	e7ba      	b.n	8007c88 <__kernel_rem_pio2+0x530>
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	e7bf      	b.n	8007c98 <__kernel_rem_pio2+0x540>
 8007d18:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007d1c:	f7f8 fa5a 	bl	80001d4 <__adddf3>
 8007d20:	3501      	adds	r5, #1
 8007d22:	e7c4      	b.n	8007cae <__kernel_rem_pio2+0x556>
 8007d24:	ed16 7b02 	vldr	d7, [r6, #-8]
 8007d28:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8007d2c:	ec53 2b17 	vmov	r2, r3, d7
 8007d30:	4640      	mov	r0, r8
 8007d32:	4649      	mov	r1, r9
 8007d34:	ed8d 7b00 	vstr	d7, [sp]
 8007d38:	f7f8 fa4c 	bl	80001d4 <__adddf3>
 8007d3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	4640      	mov	r0, r8
 8007d46:	4649      	mov	r1, r9
 8007d48:	f7f8 fa42 	bl	80001d0 <__aeabi_dsub>
 8007d4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d50:	f7f8 fa40 	bl	80001d4 <__adddf3>
 8007d54:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007d58:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8007d5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d60:	ed06 7b02 	vstr	d7, [r6, #-8]
 8007d64:	e76c      	b.n	8007c40 <__kernel_rem_pio2+0x4e8>
 8007d66:	ed16 7b02 	vldr	d7, [r6, #-8]
 8007d6a:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8007d6e:	ec53 2b17 	vmov	r2, r3, d7
 8007d72:	4640      	mov	r0, r8
 8007d74:	4649      	mov	r1, r9
 8007d76:	ed8d 7b00 	vstr	d7, [sp]
 8007d7a:	f7f8 fa2b 	bl	80001d4 <__adddf3>
 8007d7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	4640      	mov	r0, r8
 8007d88:	4649      	mov	r1, r9
 8007d8a:	f7f8 fa21 	bl	80001d0 <__aeabi_dsub>
 8007d8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d92:	f7f8 fa1f 	bl	80001d4 <__adddf3>
 8007d96:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007d9a:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8007d9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007da2:	ed06 7b02 	vstr	d7, [r6, #-8]
 8007da6:	e750      	b.n	8007c4a <__kernel_rem_pio2+0x4f2>
 8007da8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007dac:	f7f8 fa12 	bl	80001d4 <__adddf3>
 8007db0:	3c01      	subs	r4, #1
 8007db2:	e750      	b.n	8007c56 <__kernel_rem_pio2+0x4fe>
 8007db4:	9a02      	ldr	r2, [sp, #8]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6110      	str	r0, [r2, #16]
 8007dbe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007dc2:	6053      	str	r3, [r2, #4]
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	6093      	str	r3, [r2, #8]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007dce:	60d3      	str	r3, [r2, #12]
 8007dd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dd4:	6153      	str	r3, [r2, #20]
 8007dd6:	e787      	b.n	8007ce8 <__kernel_rem_pio2+0x590>
 8007dd8:	00000000 	.word	0x00000000
 8007ddc:	3ff00000 	.word	0x3ff00000
	...
 8007de8:	08008ef8 	.word	0x08008ef8
 8007dec:	41700000 	.word	0x41700000
 8007df0:	3e700000 	.word	0x3e700000
 8007df4:	00000000 	.word	0x00000000

08007df8 <__kernel_sin>:
 8007df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfc:	ec55 4b10 	vmov	r4, r5, d0
 8007e00:	b085      	sub	sp, #20
 8007e02:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007e06:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007e0a:	ed8d 1b00 	vstr	d1, [sp]
 8007e0e:	9002      	str	r0, [sp, #8]
 8007e10:	da06      	bge.n	8007e20 <__kernel_sin+0x28>
 8007e12:	ee10 0a10 	vmov	r0, s0
 8007e16:	4629      	mov	r1, r5
 8007e18:	f7f8 fe3e 	bl	8000a98 <__aeabi_d2iz>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d051      	beq.n	8007ec4 <__kernel_sin+0xcc>
 8007e20:	4622      	mov	r2, r4
 8007e22:	462b      	mov	r3, r5
 8007e24:	4620      	mov	r0, r4
 8007e26:	4629      	mov	r1, r5
 8007e28:	f7f8 fb86 	bl	8000538 <__aeabi_dmul>
 8007e2c:	4682      	mov	sl, r0
 8007e2e:	468b      	mov	fp, r1
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	4620      	mov	r0, r4
 8007e36:	4629      	mov	r1, r5
 8007e38:	f7f8 fb7e 	bl	8000538 <__aeabi_dmul>
 8007e3c:	a341      	add	r3, pc, #260	; (adr r3, 8007f44 <__kernel_sin+0x14c>)
 8007e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e42:	4680      	mov	r8, r0
 8007e44:	4689      	mov	r9, r1
 8007e46:	4650      	mov	r0, sl
 8007e48:	4659      	mov	r1, fp
 8007e4a:	f7f8 fb75 	bl	8000538 <__aeabi_dmul>
 8007e4e:	a33f      	add	r3, pc, #252	; (adr r3, 8007f4c <__kernel_sin+0x154>)
 8007e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e54:	f7f8 f9bc 	bl	80001d0 <__aeabi_dsub>
 8007e58:	4652      	mov	r2, sl
 8007e5a:	465b      	mov	r3, fp
 8007e5c:	f7f8 fb6c 	bl	8000538 <__aeabi_dmul>
 8007e60:	a33c      	add	r3, pc, #240	; (adr r3, 8007f54 <__kernel_sin+0x15c>)
 8007e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e66:	f7f8 f9b5 	bl	80001d4 <__adddf3>
 8007e6a:	4652      	mov	r2, sl
 8007e6c:	465b      	mov	r3, fp
 8007e6e:	f7f8 fb63 	bl	8000538 <__aeabi_dmul>
 8007e72:	a33a      	add	r3, pc, #232	; (adr r3, 8007f5c <__kernel_sin+0x164>)
 8007e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e78:	f7f8 f9aa 	bl	80001d0 <__aeabi_dsub>
 8007e7c:	4652      	mov	r2, sl
 8007e7e:	465b      	mov	r3, fp
 8007e80:	f7f8 fb5a 	bl	8000538 <__aeabi_dmul>
 8007e84:	a337      	add	r3, pc, #220	; (adr r3, 8007f64 <__kernel_sin+0x16c>)
 8007e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8a:	f7f8 f9a3 	bl	80001d4 <__adddf3>
 8007e8e:	9b02      	ldr	r3, [sp, #8]
 8007e90:	4606      	mov	r6, r0
 8007e92:	460f      	mov	r7, r1
 8007e94:	b9db      	cbnz	r3, 8007ece <__kernel_sin+0xd6>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4650      	mov	r0, sl
 8007e9c:	4659      	mov	r1, fp
 8007e9e:	f7f8 fb4b 	bl	8000538 <__aeabi_dmul>
 8007ea2:	a325      	add	r3, pc, #148	; (adr r3, 8007f38 <__kernel_sin+0x140>)
 8007ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea8:	f7f8 f992 	bl	80001d0 <__aeabi_dsub>
 8007eac:	4642      	mov	r2, r8
 8007eae:	464b      	mov	r3, r9
 8007eb0:	f7f8 fb42 	bl	8000538 <__aeabi_dmul>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4620      	mov	r0, r4
 8007eba:	4629      	mov	r1, r5
 8007ebc:	f7f8 f98a 	bl	80001d4 <__adddf3>
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	460d      	mov	r5, r1
 8007ec4:	ec45 4b10 	vmov	d0, r4, r5
 8007ec8:	b005      	add	sp, #20
 8007eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ece:	2200      	movs	r2, #0
 8007ed0:	4b1b      	ldr	r3, [pc, #108]	; (8007f40 <__kernel_sin+0x148>)
 8007ed2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ed6:	f7f8 fb2f 	bl	8000538 <__aeabi_dmul>
 8007eda:	4632      	mov	r2, r6
 8007edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ee0:	463b      	mov	r3, r7
 8007ee2:	4640      	mov	r0, r8
 8007ee4:	4649      	mov	r1, r9
 8007ee6:	f7f8 fb27 	bl	8000538 <__aeabi_dmul>
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ef2:	f7f8 f96d 	bl	80001d0 <__aeabi_dsub>
 8007ef6:	4652      	mov	r2, sl
 8007ef8:	465b      	mov	r3, fp
 8007efa:	f7f8 fb1d 	bl	8000538 <__aeabi_dmul>
 8007efe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f02:	f7f8 f965 	bl	80001d0 <__aeabi_dsub>
 8007f06:	a30c      	add	r3, pc, #48	; (adr r3, 8007f38 <__kernel_sin+0x140>)
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	4606      	mov	r6, r0
 8007f0e:	460f      	mov	r7, r1
 8007f10:	4640      	mov	r0, r8
 8007f12:	4649      	mov	r1, r9
 8007f14:	f7f8 fb10 	bl	8000538 <__aeabi_dmul>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	4639      	mov	r1, r7
 8007f20:	f7f8 f958 	bl	80001d4 <__adddf3>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4620      	mov	r0, r4
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	f7f8 f950 	bl	80001d0 <__aeabi_dsub>
 8007f30:	e7c6      	b.n	8007ec0 <__kernel_sin+0xc8>
 8007f32:	bf00      	nop
 8007f34:	f3af 8000 	nop.w
 8007f38:	55555549 	.word	0x55555549
 8007f3c:	3fc55555 	.word	0x3fc55555
 8007f40:	3fe00000 	.word	0x3fe00000
 8007f44:	5acfd57c 	.word	0x5acfd57c
 8007f48:	3de5d93a 	.word	0x3de5d93a
 8007f4c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007f50:	3e5ae5e6 	.word	0x3e5ae5e6
 8007f54:	57b1fe7d 	.word	0x57b1fe7d
 8007f58:	3ec71de3 	.word	0x3ec71de3
 8007f5c:	19c161d5 	.word	0x19c161d5
 8007f60:	3f2a01a0 	.word	0x3f2a01a0
 8007f64:	1110f8a6 	.word	0x1110f8a6
 8007f68:	3f811111 	.word	0x3f811111
 8007f6c:	00000000 	.word	0x00000000

08007f70 <atan>:
 8007f70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f74:	ec55 4b10 	vmov	r4, r5, d0
 8007f78:	4bc7      	ldr	r3, [pc, #796]	; (8008298 <atan+0x328>)
 8007f7a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007f7e:	429e      	cmp	r6, r3
 8007f80:	46ab      	mov	fp, r5
 8007f82:	dd18      	ble.n	8007fb6 <atan+0x46>
 8007f84:	4ac5      	ldr	r2, [pc, #788]	; (800829c <atan+0x32c>)
 8007f86:	4296      	cmp	r6, r2
 8007f88:	dc01      	bgt.n	8007f8e <atan+0x1e>
 8007f8a:	d109      	bne.n	8007fa0 <atan+0x30>
 8007f8c:	b144      	cbz	r4, 8007fa0 <atan+0x30>
 8007f8e:	4622      	mov	r2, r4
 8007f90:	462b      	mov	r3, r5
 8007f92:	4620      	mov	r0, r4
 8007f94:	4629      	mov	r1, r5
 8007f96:	f7f8 f91d 	bl	80001d4 <__adddf3>
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	460d      	mov	r5, r1
 8007f9e:	e006      	b.n	8007fae <atan+0x3e>
 8007fa0:	f1bb 0f00 	cmp.w	fp, #0
 8007fa4:	f300 813a 	bgt.w	800821c <atan+0x2ac>
 8007fa8:	a59f      	add	r5, pc, #636	; (adr r5, 8008228 <atan+0x2b8>)
 8007faa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007fae:	ec45 4b10 	vmov	d0, r4, r5
 8007fb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb6:	4bba      	ldr	r3, [pc, #744]	; (80082a0 <atan+0x330>)
 8007fb8:	429e      	cmp	r6, r3
 8007fba:	dc14      	bgt.n	8007fe6 <atan+0x76>
 8007fbc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007fc0:	429e      	cmp	r6, r3
 8007fc2:	dc0d      	bgt.n	8007fe0 <atan+0x70>
 8007fc4:	a39a      	add	r3, pc, #616	; (adr r3, 8008230 <atan+0x2c0>)
 8007fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fca:	ee10 0a10 	vmov	r0, s0
 8007fce:	4629      	mov	r1, r5
 8007fd0:	f7f8 f900 	bl	80001d4 <__adddf3>
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	4bb3      	ldr	r3, [pc, #716]	; (80082a4 <atan+0x334>)
 8007fd8:	f7f8 fd3e 	bl	8000a58 <__aeabi_dcmpgt>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d1e6      	bne.n	8007fae <atan+0x3e>
 8007fe0:	f04f 3aff 	mov.w	sl, #4294967295
 8007fe4:	e02b      	b.n	800803e <atan+0xce>
 8007fe6:	f000 f96b 	bl	80082c0 <fabs>
 8007fea:	4baf      	ldr	r3, [pc, #700]	; (80082a8 <atan+0x338>)
 8007fec:	429e      	cmp	r6, r3
 8007fee:	ec55 4b10 	vmov	r4, r5, d0
 8007ff2:	f300 80bf 	bgt.w	8008174 <atan+0x204>
 8007ff6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007ffa:	429e      	cmp	r6, r3
 8007ffc:	f300 80a0 	bgt.w	8008140 <atan+0x1d0>
 8008000:	ee10 2a10 	vmov	r2, s0
 8008004:	ee10 0a10 	vmov	r0, s0
 8008008:	462b      	mov	r3, r5
 800800a:	4629      	mov	r1, r5
 800800c:	f7f8 f8e2 	bl	80001d4 <__adddf3>
 8008010:	2200      	movs	r2, #0
 8008012:	4ba4      	ldr	r3, [pc, #656]	; (80082a4 <atan+0x334>)
 8008014:	f7f8 f8dc 	bl	80001d0 <__aeabi_dsub>
 8008018:	2200      	movs	r2, #0
 800801a:	4606      	mov	r6, r0
 800801c:	460f      	mov	r7, r1
 800801e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008022:	4620      	mov	r0, r4
 8008024:	4629      	mov	r1, r5
 8008026:	f7f8 f8d5 	bl	80001d4 <__adddf3>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	4630      	mov	r0, r6
 8008030:	4639      	mov	r1, r7
 8008032:	f7f8 fbab 	bl	800078c <__aeabi_ddiv>
 8008036:	f04f 0a00 	mov.w	sl, #0
 800803a:	4604      	mov	r4, r0
 800803c:	460d      	mov	r5, r1
 800803e:	4622      	mov	r2, r4
 8008040:	462b      	mov	r3, r5
 8008042:	4620      	mov	r0, r4
 8008044:	4629      	mov	r1, r5
 8008046:	f7f8 fa77 	bl	8000538 <__aeabi_dmul>
 800804a:	4602      	mov	r2, r0
 800804c:	460b      	mov	r3, r1
 800804e:	4680      	mov	r8, r0
 8008050:	4689      	mov	r9, r1
 8008052:	f7f8 fa71 	bl	8000538 <__aeabi_dmul>
 8008056:	a378      	add	r3, pc, #480	; (adr r3, 8008238 <atan+0x2c8>)
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	4606      	mov	r6, r0
 800805e:	460f      	mov	r7, r1
 8008060:	f7f8 fa6a 	bl	8000538 <__aeabi_dmul>
 8008064:	a376      	add	r3, pc, #472	; (adr r3, 8008240 <atan+0x2d0>)
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	f7f8 f8b3 	bl	80001d4 <__adddf3>
 800806e:	4632      	mov	r2, r6
 8008070:	463b      	mov	r3, r7
 8008072:	f7f8 fa61 	bl	8000538 <__aeabi_dmul>
 8008076:	a374      	add	r3, pc, #464	; (adr r3, 8008248 <atan+0x2d8>)
 8008078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807c:	f7f8 f8aa 	bl	80001d4 <__adddf3>
 8008080:	4632      	mov	r2, r6
 8008082:	463b      	mov	r3, r7
 8008084:	f7f8 fa58 	bl	8000538 <__aeabi_dmul>
 8008088:	a371      	add	r3, pc, #452	; (adr r3, 8008250 <atan+0x2e0>)
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	f7f8 f8a1 	bl	80001d4 <__adddf3>
 8008092:	4632      	mov	r2, r6
 8008094:	463b      	mov	r3, r7
 8008096:	f7f8 fa4f 	bl	8000538 <__aeabi_dmul>
 800809a:	a36f      	add	r3, pc, #444	; (adr r3, 8008258 <atan+0x2e8>)
 800809c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a0:	f7f8 f898 	bl	80001d4 <__adddf3>
 80080a4:	4632      	mov	r2, r6
 80080a6:	463b      	mov	r3, r7
 80080a8:	f7f8 fa46 	bl	8000538 <__aeabi_dmul>
 80080ac:	a36c      	add	r3, pc, #432	; (adr r3, 8008260 <atan+0x2f0>)
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	f7f8 f88f 	bl	80001d4 <__adddf3>
 80080b6:	4642      	mov	r2, r8
 80080b8:	464b      	mov	r3, r9
 80080ba:	f7f8 fa3d 	bl	8000538 <__aeabi_dmul>
 80080be:	a36a      	add	r3, pc, #424	; (adr r3, 8008268 <atan+0x2f8>)
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	4680      	mov	r8, r0
 80080c6:	4689      	mov	r9, r1
 80080c8:	4630      	mov	r0, r6
 80080ca:	4639      	mov	r1, r7
 80080cc:	f7f8 fa34 	bl	8000538 <__aeabi_dmul>
 80080d0:	a367      	add	r3, pc, #412	; (adr r3, 8008270 <atan+0x300>)
 80080d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d6:	f7f8 f87b 	bl	80001d0 <__aeabi_dsub>
 80080da:	4632      	mov	r2, r6
 80080dc:	463b      	mov	r3, r7
 80080de:	f7f8 fa2b 	bl	8000538 <__aeabi_dmul>
 80080e2:	a365      	add	r3, pc, #404	; (adr r3, 8008278 <atan+0x308>)
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	f7f8 f872 	bl	80001d0 <__aeabi_dsub>
 80080ec:	4632      	mov	r2, r6
 80080ee:	463b      	mov	r3, r7
 80080f0:	f7f8 fa22 	bl	8000538 <__aeabi_dmul>
 80080f4:	a362      	add	r3, pc, #392	; (adr r3, 8008280 <atan+0x310>)
 80080f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fa:	f7f8 f869 	bl	80001d0 <__aeabi_dsub>
 80080fe:	4632      	mov	r2, r6
 8008100:	463b      	mov	r3, r7
 8008102:	f7f8 fa19 	bl	8000538 <__aeabi_dmul>
 8008106:	a360      	add	r3, pc, #384	; (adr r3, 8008288 <atan+0x318>)
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f7f8 f860 	bl	80001d0 <__aeabi_dsub>
 8008110:	4632      	mov	r2, r6
 8008112:	463b      	mov	r3, r7
 8008114:	f7f8 fa10 	bl	8000538 <__aeabi_dmul>
 8008118:	f1ba 3fff 	cmp.w	sl, #4294967295
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	d155      	bne.n	80081ce <atan+0x25e>
 8008122:	4640      	mov	r0, r8
 8008124:	4649      	mov	r1, r9
 8008126:	f7f8 f855 	bl	80001d4 <__adddf3>
 800812a:	4622      	mov	r2, r4
 800812c:	462b      	mov	r3, r5
 800812e:	f7f8 fa03 	bl	8000538 <__aeabi_dmul>
 8008132:	4602      	mov	r2, r0
 8008134:	460b      	mov	r3, r1
 8008136:	4620      	mov	r0, r4
 8008138:	4629      	mov	r1, r5
 800813a:	f7f8 f849 	bl	80001d0 <__aeabi_dsub>
 800813e:	e72c      	b.n	8007f9a <atan+0x2a>
 8008140:	ee10 0a10 	vmov	r0, s0
 8008144:	2200      	movs	r2, #0
 8008146:	4b57      	ldr	r3, [pc, #348]	; (80082a4 <atan+0x334>)
 8008148:	4629      	mov	r1, r5
 800814a:	f7f8 f841 	bl	80001d0 <__aeabi_dsub>
 800814e:	2200      	movs	r2, #0
 8008150:	4606      	mov	r6, r0
 8008152:	460f      	mov	r7, r1
 8008154:	4b53      	ldr	r3, [pc, #332]	; (80082a4 <atan+0x334>)
 8008156:	4620      	mov	r0, r4
 8008158:	4629      	mov	r1, r5
 800815a:	f7f8 f83b 	bl	80001d4 <__adddf3>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	4630      	mov	r0, r6
 8008164:	4639      	mov	r1, r7
 8008166:	f7f8 fb11 	bl	800078c <__aeabi_ddiv>
 800816a:	f04f 0a01 	mov.w	sl, #1
 800816e:	4604      	mov	r4, r0
 8008170:	460d      	mov	r5, r1
 8008172:	e764      	b.n	800803e <atan+0xce>
 8008174:	4b4d      	ldr	r3, [pc, #308]	; (80082ac <atan+0x33c>)
 8008176:	429e      	cmp	r6, r3
 8008178:	dc1d      	bgt.n	80081b6 <atan+0x246>
 800817a:	ee10 0a10 	vmov	r0, s0
 800817e:	2200      	movs	r2, #0
 8008180:	4b4b      	ldr	r3, [pc, #300]	; (80082b0 <atan+0x340>)
 8008182:	4629      	mov	r1, r5
 8008184:	f7f8 f824 	bl	80001d0 <__aeabi_dsub>
 8008188:	2200      	movs	r2, #0
 800818a:	4606      	mov	r6, r0
 800818c:	460f      	mov	r7, r1
 800818e:	4b48      	ldr	r3, [pc, #288]	; (80082b0 <atan+0x340>)
 8008190:	4620      	mov	r0, r4
 8008192:	4629      	mov	r1, r5
 8008194:	f7f8 f9d0 	bl	8000538 <__aeabi_dmul>
 8008198:	2200      	movs	r2, #0
 800819a:	4b42      	ldr	r3, [pc, #264]	; (80082a4 <atan+0x334>)
 800819c:	f7f8 f81a 	bl	80001d4 <__adddf3>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4630      	mov	r0, r6
 80081a6:	4639      	mov	r1, r7
 80081a8:	f7f8 faf0 	bl	800078c <__aeabi_ddiv>
 80081ac:	f04f 0a02 	mov.w	sl, #2
 80081b0:	4604      	mov	r4, r0
 80081b2:	460d      	mov	r5, r1
 80081b4:	e743      	b.n	800803e <atan+0xce>
 80081b6:	462b      	mov	r3, r5
 80081b8:	ee10 2a10 	vmov	r2, s0
 80081bc:	2000      	movs	r0, #0
 80081be:	493d      	ldr	r1, [pc, #244]	; (80082b4 <atan+0x344>)
 80081c0:	f7f8 fae4 	bl	800078c <__aeabi_ddiv>
 80081c4:	f04f 0a03 	mov.w	sl, #3
 80081c8:	4604      	mov	r4, r0
 80081ca:	460d      	mov	r5, r1
 80081cc:	e737      	b.n	800803e <atan+0xce>
 80081ce:	4640      	mov	r0, r8
 80081d0:	4649      	mov	r1, r9
 80081d2:	f7f7 ffff 	bl	80001d4 <__adddf3>
 80081d6:	4622      	mov	r2, r4
 80081d8:	462b      	mov	r3, r5
 80081da:	f7f8 f9ad 	bl	8000538 <__aeabi_dmul>
 80081de:	4e36      	ldr	r6, [pc, #216]	; (80082b8 <atan+0x348>)
 80081e0:	4b36      	ldr	r3, [pc, #216]	; (80082bc <atan+0x34c>)
 80081e2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80081e6:	4456      	add	r6, sl
 80081e8:	449a      	add	sl, r3
 80081ea:	e9da 2300 	ldrd	r2, r3, [sl]
 80081ee:	f7f7 ffef 	bl	80001d0 <__aeabi_dsub>
 80081f2:	4622      	mov	r2, r4
 80081f4:	462b      	mov	r3, r5
 80081f6:	f7f7 ffeb 	bl	80001d0 <__aeabi_dsub>
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008202:	f7f7 ffe5 	bl	80001d0 <__aeabi_dsub>
 8008206:	f1bb 0f00 	cmp.w	fp, #0
 800820a:	4604      	mov	r4, r0
 800820c:	460d      	mov	r5, r1
 800820e:	f6bf aece 	bge.w	8007fae <atan+0x3e>
 8008212:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008216:	4604      	mov	r4, r0
 8008218:	461d      	mov	r5, r3
 800821a:	e6c8      	b.n	8007fae <atan+0x3e>
 800821c:	a51c      	add	r5, pc, #112	; (adr r5, 8008290 <atan+0x320>)
 800821e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008222:	e6c4      	b.n	8007fae <atan+0x3e>
 8008224:	f3af 8000 	nop.w
 8008228:	54442d18 	.word	0x54442d18
 800822c:	bff921fb 	.word	0xbff921fb
 8008230:	8800759c 	.word	0x8800759c
 8008234:	7e37e43c 	.word	0x7e37e43c
 8008238:	e322da11 	.word	0xe322da11
 800823c:	3f90ad3a 	.word	0x3f90ad3a
 8008240:	24760deb 	.word	0x24760deb
 8008244:	3fa97b4b 	.word	0x3fa97b4b
 8008248:	a0d03d51 	.word	0xa0d03d51
 800824c:	3fb10d66 	.word	0x3fb10d66
 8008250:	c54c206e 	.word	0xc54c206e
 8008254:	3fb745cd 	.word	0x3fb745cd
 8008258:	920083ff 	.word	0x920083ff
 800825c:	3fc24924 	.word	0x3fc24924
 8008260:	5555550d 	.word	0x5555550d
 8008264:	3fd55555 	.word	0x3fd55555
 8008268:	2c6a6c2f 	.word	0x2c6a6c2f
 800826c:	bfa2b444 	.word	0xbfa2b444
 8008270:	52defd9a 	.word	0x52defd9a
 8008274:	3fadde2d 	.word	0x3fadde2d
 8008278:	af749a6d 	.word	0xaf749a6d
 800827c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008280:	fe231671 	.word	0xfe231671
 8008284:	3fbc71c6 	.word	0x3fbc71c6
 8008288:	9998ebc4 	.word	0x9998ebc4
 800828c:	3fc99999 	.word	0x3fc99999
 8008290:	54442d18 	.word	0x54442d18
 8008294:	3ff921fb 	.word	0x3ff921fb
 8008298:	440fffff 	.word	0x440fffff
 800829c:	7ff00000 	.word	0x7ff00000
 80082a0:	3fdbffff 	.word	0x3fdbffff
 80082a4:	3ff00000 	.word	0x3ff00000
 80082a8:	3ff2ffff 	.word	0x3ff2ffff
 80082ac:	40037fff 	.word	0x40037fff
 80082b0:	3ff80000 	.word	0x3ff80000
 80082b4:	bff00000 	.word	0xbff00000
 80082b8:	08008f48 	.word	0x08008f48
 80082bc:	08008f68 	.word	0x08008f68

080082c0 <fabs>:
 80082c0:	ec53 2b10 	vmov	r2, r3, d0
 80082c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082c8:	ec43 2b10 	vmov	d0, r2, r3
 80082cc:	4770      	bx	lr
	...

080082d0 <floor>:
 80082d0:	ec51 0b10 	vmov	r0, r1, d0
 80082d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80082dc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80082e0:	2e13      	cmp	r6, #19
 80082e2:	ee10 8a10 	vmov	r8, s0
 80082e6:	460c      	mov	r4, r1
 80082e8:	ee10 5a10 	vmov	r5, s0
 80082ec:	dc35      	bgt.n	800835a <floor+0x8a>
 80082ee:	2e00      	cmp	r6, #0
 80082f0:	da17      	bge.n	8008322 <floor+0x52>
 80082f2:	a335      	add	r3, pc, #212	; (adr r3, 80083c8 <floor+0xf8>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f7f7 ff6c 	bl	80001d4 <__adddf3>
 80082fc:	2200      	movs	r2, #0
 80082fe:	2300      	movs	r3, #0
 8008300:	f7f8 fbaa 	bl	8000a58 <__aeabi_dcmpgt>
 8008304:	b150      	cbz	r0, 800831c <floor+0x4c>
 8008306:	2c00      	cmp	r4, #0
 8008308:	da5a      	bge.n	80083c0 <floor+0xf0>
 800830a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800830e:	ea53 0308 	orrs.w	r3, r3, r8
 8008312:	4b2f      	ldr	r3, [pc, #188]	; (80083d0 <floor+0x100>)
 8008314:	f04f 0500 	mov.w	r5, #0
 8008318:	bf18      	it	ne
 800831a:	461c      	movne	r4, r3
 800831c:	4621      	mov	r1, r4
 800831e:	4628      	mov	r0, r5
 8008320:	e025      	b.n	800836e <floor+0x9e>
 8008322:	4f2c      	ldr	r7, [pc, #176]	; (80083d4 <floor+0x104>)
 8008324:	4137      	asrs	r7, r6
 8008326:	ea01 0307 	and.w	r3, r1, r7
 800832a:	4303      	orrs	r3, r0
 800832c:	d01f      	beq.n	800836e <floor+0x9e>
 800832e:	a326      	add	r3, pc, #152	; (adr r3, 80083c8 <floor+0xf8>)
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	f7f7 ff4e 	bl	80001d4 <__adddf3>
 8008338:	2200      	movs	r2, #0
 800833a:	2300      	movs	r3, #0
 800833c:	f7f8 fb8c 	bl	8000a58 <__aeabi_dcmpgt>
 8008340:	2800      	cmp	r0, #0
 8008342:	d0eb      	beq.n	800831c <floor+0x4c>
 8008344:	2c00      	cmp	r4, #0
 8008346:	bfbe      	ittt	lt
 8008348:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800834c:	fa43 f606 	asrlt.w	r6, r3, r6
 8008350:	19a4      	addlt	r4, r4, r6
 8008352:	ea24 0407 	bic.w	r4, r4, r7
 8008356:	2500      	movs	r5, #0
 8008358:	e7e0      	b.n	800831c <floor+0x4c>
 800835a:	2e33      	cmp	r6, #51	; 0x33
 800835c:	dd0b      	ble.n	8008376 <floor+0xa6>
 800835e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008362:	d104      	bne.n	800836e <floor+0x9e>
 8008364:	ee10 2a10 	vmov	r2, s0
 8008368:	460b      	mov	r3, r1
 800836a:	f7f7 ff33 	bl	80001d4 <__adddf3>
 800836e:	ec41 0b10 	vmov	d0, r0, r1
 8008372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008376:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800837a:	f04f 33ff 	mov.w	r3, #4294967295
 800837e:	fa23 f707 	lsr.w	r7, r3, r7
 8008382:	4238      	tst	r0, r7
 8008384:	d0f3      	beq.n	800836e <floor+0x9e>
 8008386:	a310      	add	r3, pc, #64	; (adr r3, 80083c8 <floor+0xf8>)
 8008388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838c:	f7f7 ff22 	bl	80001d4 <__adddf3>
 8008390:	2200      	movs	r2, #0
 8008392:	2300      	movs	r3, #0
 8008394:	f7f8 fb60 	bl	8000a58 <__aeabi_dcmpgt>
 8008398:	2800      	cmp	r0, #0
 800839a:	d0bf      	beq.n	800831c <floor+0x4c>
 800839c:	2c00      	cmp	r4, #0
 800839e:	da02      	bge.n	80083a6 <floor+0xd6>
 80083a0:	2e14      	cmp	r6, #20
 80083a2:	d103      	bne.n	80083ac <floor+0xdc>
 80083a4:	3401      	adds	r4, #1
 80083a6:	ea25 0507 	bic.w	r5, r5, r7
 80083aa:	e7b7      	b.n	800831c <floor+0x4c>
 80083ac:	2301      	movs	r3, #1
 80083ae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80083b2:	fa03 f606 	lsl.w	r6, r3, r6
 80083b6:	4435      	add	r5, r6
 80083b8:	45a8      	cmp	r8, r5
 80083ba:	bf88      	it	hi
 80083bc:	18e4      	addhi	r4, r4, r3
 80083be:	e7f2      	b.n	80083a6 <floor+0xd6>
 80083c0:	2500      	movs	r5, #0
 80083c2:	462c      	mov	r4, r5
 80083c4:	e7aa      	b.n	800831c <floor+0x4c>
 80083c6:	bf00      	nop
 80083c8:	8800759c 	.word	0x8800759c
 80083cc:	7e37e43c 	.word	0x7e37e43c
 80083d0:	bff00000 	.word	0xbff00000
 80083d4:	000fffff 	.word	0x000fffff

080083d8 <matherr>:
 80083d8:	2000      	movs	r0, #0
 80083da:	4770      	bx	lr
 80083dc:	0000      	movs	r0, r0
	...

080083e0 <scalbn>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	ec55 4b10 	vmov	r4, r5, d0
 80083e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80083ea:	4606      	mov	r6, r0
 80083ec:	462b      	mov	r3, r5
 80083ee:	b9b2      	cbnz	r2, 800841e <scalbn+0x3e>
 80083f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80083f4:	4323      	orrs	r3, r4
 80083f6:	d03c      	beq.n	8008472 <scalbn+0x92>
 80083f8:	2200      	movs	r2, #0
 80083fa:	4b33      	ldr	r3, [pc, #204]	; (80084c8 <scalbn+0xe8>)
 80083fc:	4629      	mov	r1, r5
 80083fe:	ee10 0a10 	vmov	r0, s0
 8008402:	f7f8 f899 	bl	8000538 <__aeabi_dmul>
 8008406:	4a31      	ldr	r2, [pc, #196]	; (80084cc <scalbn+0xec>)
 8008408:	4296      	cmp	r6, r2
 800840a:	4604      	mov	r4, r0
 800840c:	460d      	mov	r5, r1
 800840e:	460b      	mov	r3, r1
 8008410:	da13      	bge.n	800843a <scalbn+0x5a>
 8008412:	a329      	add	r3, pc, #164	; (adr r3, 80084b8 <scalbn+0xd8>)
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	f7f8 f88e 	bl	8000538 <__aeabi_dmul>
 800841c:	e00a      	b.n	8008434 <scalbn+0x54>
 800841e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008422:	428a      	cmp	r2, r1
 8008424:	d10c      	bne.n	8008440 <scalbn+0x60>
 8008426:	ee10 2a10 	vmov	r2, s0
 800842a:	462b      	mov	r3, r5
 800842c:	4620      	mov	r0, r4
 800842e:	4629      	mov	r1, r5
 8008430:	f7f7 fed0 	bl	80001d4 <__adddf3>
 8008434:	4604      	mov	r4, r0
 8008436:	460d      	mov	r5, r1
 8008438:	e01b      	b.n	8008472 <scalbn+0x92>
 800843a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800843e:	3a36      	subs	r2, #54	; 0x36
 8008440:	4432      	add	r2, r6
 8008442:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008446:	428a      	cmp	r2, r1
 8008448:	dd0b      	ble.n	8008462 <scalbn+0x82>
 800844a:	ec45 4b11 	vmov	d1, r4, r5
 800844e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80084c0 <scalbn+0xe0>
 8008452:	f000 f83f 	bl	80084d4 <copysign>
 8008456:	a31a      	add	r3, pc, #104	; (adr r3, 80084c0 <scalbn+0xe0>)
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	ec51 0b10 	vmov	r0, r1, d0
 8008460:	e7da      	b.n	8008418 <scalbn+0x38>
 8008462:	2a00      	cmp	r2, #0
 8008464:	dd08      	ble.n	8008478 <scalbn+0x98>
 8008466:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800846a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800846e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008472:	ec45 4b10 	vmov	d0, r4, r5
 8008476:	bd70      	pop	{r4, r5, r6, pc}
 8008478:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800847c:	da0d      	bge.n	800849a <scalbn+0xba>
 800847e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008482:	429e      	cmp	r6, r3
 8008484:	ec45 4b11 	vmov	d1, r4, r5
 8008488:	dce1      	bgt.n	800844e <scalbn+0x6e>
 800848a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80084b8 <scalbn+0xd8>
 800848e:	f000 f821 	bl	80084d4 <copysign>
 8008492:	a309      	add	r3, pc, #36	; (adr r3, 80084b8 <scalbn+0xd8>)
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	e7e0      	b.n	800845c <scalbn+0x7c>
 800849a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800849e:	3236      	adds	r2, #54	; 0x36
 80084a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80084a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80084a8:	4620      	mov	r0, r4
 80084aa:	4629      	mov	r1, r5
 80084ac:	2200      	movs	r2, #0
 80084ae:	4b08      	ldr	r3, [pc, #32]	; (80084d0 <scalbn+0xf0>)
 80084b0:	e7b2      	b.n	8008418 <scalbn+0x38>
 80084b2:	bf00      	nop
 80084b4:	f3af 8000 	nop.w
 80084b8:	c2f8f359 	.word	0xc2f8f359
 80084bc:	01a56e1f 	.word	0x01a56e1f
 80084c0:	8800759c 	.word	0x8800759c
 80084c4:	7e37e43c 	.word	0x7e37e43c
 80084c8:	43500000 	.word	0x43500000
 80084cc:	ffff3cb0 	.word	0xffff3cb0
 80084d0:	3c900000 	.word	0x3c900000

080084d4 <copysign>:
 80084d4:	ec53 2b10 	vmov	r2, r3, d0
 80084d8:	ee11 0a90 	vmov	r0, s3
 80084dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80084e4:	ea41 0300 	orr.w	r3, r1, r0
 80084e8:	ec43 2b10 	vmov	d0, r2, r3
 80084ec:	4770      	bx	lr
	...

080084f0 <__errno>:
 80084f0:	4b01      	ldr	r3, [pc, #4]	; (80084f8 <__errno+0x8>)
 80084f2:	6818      	ldr	r0, [r3, #0]
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	20000040 	.word	0x20000040

080084fc <_init>:
 80084fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fe:	bf00      	nop
 8008500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008502:	bc08      	pop	{r3}
 8008504:	469e      	mov	lr, r3
 8008506:	4770      	bx	lr

08008508 <_fini>:
 8008508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850a:	bf00      	nop
 800850c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800850e:	bc08      	pop	{r3}
 8008510:	469e      	mov	lr, r3
 8008512:	4770      	bx	lr
