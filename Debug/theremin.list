
theremin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071e8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  08007370  08007370  00017370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007c08  08007c08  00017c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007c0c  08007c0c  00017c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a8  20000000  08007c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00013e30  200000a8  08007cb8  000200a8  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20013ed8  08007cb8  00023ed8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014b16  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000282a  00000000  00000000  00034bee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010f8  00000000  00000000  00037418  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000fb0  00000000  00000000  00038510  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008020  00000000  00000000  000394c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005f0d  00000000  00000000  000414e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      000000ec  00000000  00000000  000473ed  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004858  00000000  00000000  000474dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000000d8  00000000  00000000  0004bd34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a8 	.word	0x200000a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007358 	.word	0x08007358

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ac 	.word	0x200000ac
 80001c4:	08007358 	.word	0x08007358

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_d2f>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa0:	bf24      	itt	cs
 8000aa2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aaa:	d90d      	bls.n	8000ac8 <__aeabi_d2f+0x30>
 8000aac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000abc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac0:	bf08      	it	eq
 8000ac2:	f020 0001 	biceq.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000acc:	d121      	bne.n	8000b12 <__aeabi_d2f+0x7a>
 8000ace:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad2:	bfbc      	itt	lt
 8000ad4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	4770      	bxlt	lr
 8000ada:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ade:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae2:	f1c2 0218 	rsb	r2, r2, #24
 8000ae6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aee:	fa20 f002 	lsr.w	r0, r0, r2
 8000af2:	bf18      	it	ne
 8000af4:	f040 0001 	orrne.w	r0, r0, #1
 8000af8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b04:	ea40 000c 	orr.w	r0, r0, ip
 8000b08:	fa23 f302 	lsr.w	r3, r3, r2
 8000b0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b10:	e7cc      	b.n	8000aac <__aeabi_d2f+0x14>
 8000b12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b16:	d107      	bne.n	8000b28 <__aeabi_d2f+0x90>
 8000b18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b1c:	bf1e      	ittt	ne
 8000b1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b26:	4770      	bxne	lr
 8000b28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	4603      	mov	r3, r0
 8000b42:	81fb      	strh	r3, [r7, #14]
 8000b44:	460b      	mov	r3, r1
 8000b46:	81bb      	strh	r3, [r7, #12]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000b50:	f000 fc8c 	bl	800146c <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000b54:	89fb      	ldrh	r3, [r7, #14]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 faf7 	bl	8001150 <CODEC_IO_Write>
 8000b62:	4603      	mov	r3, r0
 8000b64:	461a      	mov	r2, r3
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	4413      	add	r3, r2
 8000b6a:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000b6c:	89bb      	ldrh	r3, [r7, #12]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	2b03      	cmp	r3, #3
 8000b72:	d81b      	bhi.n	8000bac <cs43l22_Init+0x74>
 8000b74:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <cs43l22_Init+0x44>)
 8000b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7a:	bf00      	nop
 8000b7c:	08000b8d 	.word	0x08000b8d
 8000b80:	08000b95 	.word	0x08000b95
 8000b84:	08000b9d 	.word	0x08000b9d
 8000b88:	08000ba5 	.word	0x08000ba5
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000b8c:	4b5b      	ldr	r3, [pc, #364]	; (8000cfc <cs43l22_Init+0x1c4>)
 8000b8e:	22fa      	movs	r2, #250	; 0xfa
 8000b90:	701a      	strb	r2, [r3, #0]
    break;
 8000b92:	e00f      	b.n	8000bb4 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000b94:	4b59      	ldr	r3, [pc, #356]	; (8000cfc <cs43l22_Init+0x1c4>)
 8000b96:	22af      	movs	r2, #175	; 0xaf
 8000b98:	701a      	strb	r2, [r3, #0]
    break;
 8000b9a:	e00b      	b.n	8000bb4 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000b9c:	4b57      	ldr	r3, [pc, #348]	; (8000cfc <cs43l22_Init+0x1c4>)
 8000b9e:	22aa      	movs	r2, #170	; 0xaa
 8000ba0:	701a      	strb	r2, [r3, #0]
    break;
 8000ba2:	e007      	b.n	8000bb4 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000ba4:	4b55      	ldr	r3, [pc, #340]	; (8000cfc <cs43l22_Init+0x1c4>)
 8000ba6:	2205      	movs	r2, #5
 8000ba8:	701a      	strb	r2, [r3, #0]
    break;    
 8000baa:	e003      	b.n	8000bb4 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000bac:	4b53      	ldr	r3, [pc, #332]	; (8000cfc <cs43l22_Init+0x1c4>)
 8000bae:	2205      	movs	r2, #5
 8000bb0:	701a      	strb	r2, [r3, #0]
    break;    
 8000bb2:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000bb4:	89fb      	ldrh	r3, [r7, #14]
 8000bb6:	b2d8      	uxtb	r0, r3
 8000bb8:	4b50      	ldr	r3, [pc, #320]	; (8000cfc <cs43l22_Init+0x1c4>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	f000 fac5 	bl	8001150 <CODEC_IO_Write>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	461a      	mov	r2, r3
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	4413      	add	r3, r2
 8000bce:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000bd0:	89fb      	ldrh	r3, [r7, #14]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2281      	movs	r2, #129	; 0x81
 8000bd6:	2105      	movs	r1, #5
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fab9 	bl	8001150 <CODEC_IO_Write>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	4413      	add	r3, r2
 8000be6:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000be8:	89fb      	ldrh	r3, [r7, #14]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2204      	movs	r2, #4
 8000bee:	2106      	movs	r1, #6
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 faad 	bl	8001150 <CODEC_IO_Write>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000c00:	7afa      	ldrb	r2, [r7, #11]
 8000c02:	89fb      	ldrh	r3, [r7, #14]
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f95a 	bl	8000ec0 <cs43l22_SetVolume>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	4413      	add	r3, r2
 8000c12:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000c14:	89bb      	ldrh	r3, [r7, #12]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d023      	beq.n	8000c62 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000c1a:	89fb      	ldrh	r3, [r7, #14]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2206      	movs	r2, #6
 8000c20:	210f      	movs	r1, #15
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fa94 	bl	8001150 <CODEC_IO_Write>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	4413      	add	r3, r2
 8000c30:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000c32:	89fb      	ldrh	r3, [r7, #14]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2200      	movs	r2, #0
 8000c38:	2124      	movs	r1, #36	; 0x24
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fa88 	bl	8001150 <CODEC_IO_Write>
 8000c40:	4603      	mov	r3, r0
 8000c42:	461a      	mov	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	4413      	add	r3, r2
 8000c48:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000c4a:	89fb      	ldrh	r3, [r7, #14]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2125      	movs	r1, #37	; 0x25
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 fa7c 	bl	8001150 <CODEC_IO_Write>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	4413      	add	r3, r2
 8000c60:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000c62:	89fb      	ldrh	r3, [r7, #14]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2200      	movs	r2, #0
 8000c68:	210a      	movs	r1, #10
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fa70 	bl	8001150 <CODEC_IO_Write>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461a      	mov	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	4413      	add	r3, r2
 8000c78:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000c7a:	89fb      	ldrh	r3, [r7, #14]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2204      	movs	r2, #4
 8000c80:	210e      	movs	r1, #14
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 fa64 	bl	8001150 <CODEC_IO_Write>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	4413      	add	r3, r2
 8000c90:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2200      	movs	r2, #0
 8000c98:	2127      	movs	r1, #39	; 0x27
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fa58 	bl	8001150 <CODEC_IO_Write>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000caa:	89fb      	ldrh	r3, [r7, #14]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	220f      	movs	r2, #15
 8000cb0:	211f      	movs	r1, #31
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fa4c 	bl	8001150 <CODEC_IO_Write>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	461a      	mov	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000cc2:	89fb      	ldrh	r3, [r7, #14]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	220a      	movs	r2, #10
 8000cc8:	211a      	movs	r1, #26
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 fa40 	bl	8001150 <CODEC_IO_Write>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000cda:	89fb      	ldrh	r3, [r7, #14]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	220a      	movs	r2, #10
 8000ce0:	211b      	movs	r1, #27
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 fa34 	bl	8001150 <CODEC_IO_Write>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	461a      	mov	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	4413      	add	r3, r2
 8000cf0:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000cf2:	697b      	ldr	r3, [r7, #20]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200000c4 	.word	0x200000c4

08000d00 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000d04:	f000 fbe8 	bl	80014d8 <AUDIO_IO_DeInit>
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000d16:	f000 fba9 	bl	800146c <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2101      	movs	r1, #1
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 fc31 	bl	8001588 <AUDIO_IO_Read>
 8000d26:	4603      	mov	r3, r0
 8000d28:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f023 0307 	bic.w	r3, r3, #7
 8000d30:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	80fb      	strh	r3, [r7, #6]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <cs43l22_Play+0x5c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d11a      	bne.n	8000d8e <cs43l22_Play+0x52>
  {
    /* Enable the digital soft ramp */
    //counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
	  counter ++;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f918 	bl	8000f98 <cs43l22_SetMute>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	229e      	movs	r2, #158	; 0x9e
 8000d76:	2102      	movs	r1, #2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 f9e9 	bl	8001150 <CODEC_IO_Write>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	461a      	mov	r2, r3
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4413      	add	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <cs43l22_Play+0x5c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8000d8e:	68fb      	ldr	r3, [r7, #12]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000030 	.word	0x20000030

08000d9c <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	2101      	movs	r1, #1
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f8f2 	bl	8000f98 <cs43l22_SetMute>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4413      	add	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 f9c3 	bl	8001150 <CODEC_IO_Write>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f8ce 	bl	8000f98 <cs43l22_SetMute>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	4413      	add	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	e002      	b.n	8000e10 <cs43l22_Resume+0x30>
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2bfe      	cmp	r3, #254	; 0xfe
 8000e14:	d9f9      	bls.n	8000e0a <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	b2d8      	uxtb	r0, r3
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <cs43l22_Resume+0x74>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	461a      	mov	r2, r3
 8000e22:	2104      	movs	r1, #4
 8000e24:	f000 f994 	bl	8001150 <CODEC_IO_Write>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4413      	add	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	229e      	movs	r2, #158	; 0x9e
 8000e38:	2102      	movs	r1, #2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f988 	bl	8001150 <CODEC_IO_Write>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200000c4 	.word	0x200000c4

08000e58 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 f893 	bl	8000f98 <cs43l22_SetMute>
 8000e72:	4602      	mov	r2, r0
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2204      	movs	r2, #4
 8000e80:	210e      	movs	r1, #14
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f964 	bl	8001150 <CODEC_IO_Write>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4413      	add	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	229f      	movs	r2, #159	; 0x9f
 8000e98:	2102      	movs	r1, #2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f958 	bl	8001150 <CODEC_IO_Write>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <cs43l22_Stop+0x64>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
  return counter;    
 8000eb0:	68fb      	ldr	r3, [r7, #12]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000030 	.word	0x20000030

08000ec0 <cs43l22_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	460a      	mov	r2, r1
 8000eca:	80fb      	strh	r3, [r7, #6]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000ed4:	797b      	ldrb	r3, [r7, #5]
 8000ed6:	2b64      	cmp	r3, #100	; 0x64
 8000ed8:	d80b      	bhi.n	8000ef2 <cs43l22_SetVolume+0x32>
 8000eda:	797a      	ldrb	r2, [r7, #5]
 8000edc:	4613      	mov	r3, r2
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	1a9b      	subs	r3, r3, r2
 8000ee2:	4a25      	ldr	r2, [pc, #148]	; (8000f78 <cs43l22_SetVolume+0xb8>)
 8000ee4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee8:	1152      	asrs	r2, r2, #5
 8000eea:	17db      	asrs	r3, r3, #31
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	e000      	b.n	8000ef4 <cs43l22_SetVolume+0x34>
 8000ef2:	2364      	movs	r3, #100	; 0x64
 8000ef4:	72fb      	strb	r3, [r7, #11]

  if(Volume > 0xE6)
 8000ef6:	797b      	ldrb	r3, [r7, #5]
 8000ef8:	2be6      	cmp	r3, #230	; 0xe6
 8000efa:	d91c      	bls.n	8000f36 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	b2d8      	uxtb	r0, r3
 8000f00:	7afb      	ldrb	r3, [r7, #11]
 8000f02:	3319      	adds	r3, #25
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	461a      	mov	r2, r3
 8000f08:	2120      	movs	r1, #32
 8000f0a:	f000 f921 	bl	8001150 <CODEC_IO_Write>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	461a      	mov	r2, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4413      	add	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	b2d8      	uxtb	r0, r3
 8000f1c:	7afb      	ldrb	r3, [r7, #11]
 8000f1e:	3319      	adds	r3, #25
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	461a      	mov	r2, r3
 8000f24:	2121      	movs	r1, #33	; 0x21
 8000f26:	f000 f913 	bl	8001150 <CODEC_IO_Write>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4413      	add	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	e01b      	b.n	8000f6e <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	b2d8      	uxtb	r0, r3
 8000f3a:	7afb      	ldrb	r3, [r7, #11]
 8000f3c:	3319      	adds	r3, #25
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	2120      	movs	r1, #32
 8000f44:	f000 f904 	bl	8001150 <CODEC_IO_Write>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	b2d8      	uxtb	r0, r3
 8000f56:	7afb      	ldrb	r3, [r7, #11]
 8000f58:	3319      	adds	r3, #25
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	2121      	movs	r1, #33	; 0x21
 8000f60:	f000 f8f6 	bl	8001150 <CODEC_IO_Write>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	51eb851f 	.word	0x51eb851f

08000f7c <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	80fb      	strh	r3, [r7, #6]
  return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d124      	bne.n	8000ff8 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	22ff      	movs	r2, #255	; 0xff
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f8ca 	bl	8001150 <CODEC_IO_Write>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2122      	movs	r1, #34	; 0x22
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f8be 	bl	8001150 <CODEC_IO_Write>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2123      	movs	r1, #35	; 0x23
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f8b2 	bl	8001150 <CODEC_IO_Write>
 8000fec:	4603      	mov	r3, r0
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e025      	b.n	8001044 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2122      	movs	r1, #34	; 0x22
 8001000:	4618      	mov	r0, r3
 8001002:	f000 f8a5 	bl	8001150 <CODEC_IO_Write>
 8001006:	4603      	mov	r3, r0
 8001008:	461a      	mov	r2, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4413      	add	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2200      	movs	r2, #0
 8001016:	2123      	movs	r1, #35	; 0x23
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f899 	bl	8001150 <CODEC_IO_Write>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4413      	add	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	b2d8      	uxtb	r0, r3
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <cs43l22_SetMute+0xb8>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	461a      	mov	r2, r3
 8001034:	2104      	movs	r1, #4
 8001036:	f000 f88b 	bl	8001150 <CODEC_IO_Write>
 800103a:	4603      	mov	r3, r0
 800103c:	461a      	mov	r2, r3
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4413      	add	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001044:	68fb      	ldr	r3, [r7, #12]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200000c4 	.word	0x200000c4

08001054 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	460a      	mov	r2, r1
 800105e:	80fb      	strh	r3, [r7, #6]
 8001060:	4613      	mov	r3, r2
 8001062:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001068:	797b      	ldrb	r3, [r7, #5]
 800106a:	3b01      	subs	r3, #1
 800106c:	2b03      	cmp	r3, #3
 800106e:	d84b      	bhi.n	8001108 <cs43l22_SetOutputMode+0xb4>
 8001070:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <cs43l22_SetOutputMode+0x24>)
 8001072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001076:	bf00      	nop
 8001078:	08001089 	.word	0x08001089
 800107c:	080010a9 	.word	0x080010a9
 8001080:	080010c9 	.word	0x080010c9
 8001084:	080010e9 	.word	0x080010e9
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	22fa      	movs	r2, #250	; 0xfa
 800108e:	2104      	movs	r1, #4
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f85d 	bl	8001150 <CODEC_IO_Write>
 8001096:	4603      	mov	r3, r0
 8001098:	461a      	mov	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4413      	add	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 80010a0:	4b24      	ldr	r3, [pc, #144]	; (8001134 <cs43l22_SetOutputMode+0xe0>)
 80010a2:	22fa      	movs	r2, #250	; 0xfa
 80010a4:	701a      	strb	r2, [r3, #0]
      break;
 80010a6:	e03f      	b.n	8001128 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	22af      	movs	r2, #175	; 0xaf
 80010ae:	2104      	movs	r1, #4
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f84d 	bl	8001150 <CODEC_IO_Write>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4413      	add	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <cs43l22_SetOutputMode+0xe0>)
 80010c2:	22af      	movs	r2, #175	; 0xaf
 80010c4:	701a      	strb	r2, [r3, #0]
      break;
 80010c6:	e02f      	b.n	8001128 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	22aa      	movs	r2, #170	; 0xaa
 80010ce:	2104      	movs	r1, #4
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f83d 	bl	8001150 <CODEC_IO_Write>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4413      	add	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <cs43l22_SetOutputMode+0xe0>)
 80010e2:	22aa      	movs	r2, #170	; 0xaa
 80010e4:	701a      	strb	r2, [r3, #0]
      break;
 80010e6:	e01f      	b.n	8001128 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2205      	movs	r2, #5
 80010ee:	2104      	movs	r1, #4
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 f82d 	bl	8001150 <CODEC_IO_Write>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4413      	add	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <cs43l22_SetOutputMode+0xe0>)
 8001102:	2205      	movs	r2, #5
 8001104:	701a      	strb	r2, [r3, #0]
      break;    
 8001106:	e00f      	b.n	8001128 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2205      	movs	r2, #5
 800110e:	2104      	movs	r1, #4
 8001110:	4618      	mov	r0, r3
 8001112:	f000 f81d 	bl	8001150 <CODEC_IO_Write>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4413      	add	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <cs43l22_SetOutputMode+0xe0>)
 8001122:	2205      	movs	r2, #5
 8001124:	701a      	strb	r2, [r3, #0]
      break;
 8001126:	bf00      	nop
  }  
  return counter;
 8001128:	68fb      	ldr	r3, [r7, #12]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200000c4 	.word	0x200000c4

08001138 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
 800115a:	460b      	mov	r3, r1
 800115c:	71bb      	strb	r3, [r7, #6]
 800115e:	4613      	mov	r3, r2
 8001160:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001166:	797a      	ldrb	r2, [r7, #5]
 8001168:	79b9      	ldrb	r1, [r7, #6]
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f9f3 	bl	8001558 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	b2db      	uxtb	r3, r3
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <I2C1_Init>:
/**
  * @brief Discovery I2C1 Bus initialization
  * @retval None
  */
static void I2C1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2c1Handle) == HAL_I2C_STATE_RESET)
 8001184:	4812      	ldr	r0, [pc, #72]	; (80011d0 <I2C1_Init+0x50>)
 8001186:	f001 fecf 	bl	8002f28 <HAL_I2C_GetState>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d11d      	bne.n	80011cc <I2C1_Init+0x4c>
  {
    I2c1Handle.Instance              = DISCOVERY_I2C1;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <I2C1_Init+0x50>)
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <I2C1_Init+0x54>)
 8001194:	601a      	str	r2, [r3, #0]
    I2c1Handle.Init.Timing           = DISCOVERY_I2C1_TIMING;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <I2C1_Init+0x50>)
 8001198:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <I2C1_Init+0x58>)
 800119a:	605a      	str	r2, [r3, #4]
    I2c1Handle.Init.OwnAddress1      = 0;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
    I2c1Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <I2C1_Init+0x50>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	60da      	str	r2, [r3, #12]
    I2c1Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <I2C1_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
    I2c1Handle.Init.OwnAddress2      = 0;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <I2C1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
    I2c1Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <I2C1_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
    I2c1Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;  
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <I2C1_Init+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C1_MspInit(&I2c1Handle);
 80011c0:	4803      	ldr	r0, [pc, #12]	; (80011d0 <I2C1_Init+0x50>)
 80011c2:	f000 f80b 	bl	80011dc <I2C1_MspInit>
    HAL_I2C_Init(&I2c1Handle);
 80011c6:	4802      	ldr	r0, [pc, #8]	; (80011d0 <I2C1_Init+0x50>)
 80011c8:	f001 fbc2 	bl	8002950 <HAL_I2C_Init>
  }
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	2000fbf4 	.word	0x2000fbf4
 80011d4:	40005400 	.word	0x40005400
 80011d8:	90112626 	.word	0x90112626

080011dc <I2C1_MspInit>:
  * @brief Discovery I2C1 MSP Initialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *hi2c)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b0ae      	sub	sp, #184	; 0xb8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;  
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  /* IOSV bit MUST be set to access GPIO port G[2:15] */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e4:	4a3a      	ldr	r2, [pc, #232]	; (80012d0 <I2C1_MspInit+0xf4>)
 80011e6:	4b3a      	ldr	r3, [pc, #232]	; (80012d0 <I2C1_MspInit+0xf4>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ee:	6593      	str	r3, [r2, #88]	; 0x58
 80011f0:	4b37      	ldr	r3, [pc, #220]	; (80012d0 <I2C1_MspInit+0xf4>)
 80011f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 80011fc:	f002 f8ca 	bl	8003394 <HAL_PWREx_EnableVddIO2>
  
  if (hi2c->Instance == DISCOVERY_I2C1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a33      	ldr	r2, [pc, #204]	; (80012d4 <I2C1_MspInit+0xf8>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d15e      	bne.n	80012c8 <I2C1_MspInit+0xec>
  {
    /*##-1- Configure the Discovery I2C clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800120a:	2340      	movs	r3, #64	; 0x40
 800120c:	61fb      	str	r3, [r7, #28]
    RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800120e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001212:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4618      	mov	r0, r3
 800121a:	f002 fe51 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/  
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 800121e:	4a2c      	ldr	r2, [pc, #176]	; (80012d0 <I2C1_MspInit+0xf4>)
 8001220:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <I2C1_MspInit+0xf4>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <I2C1_MspInit+0xf4>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 8001236:	4a26      	ldr	r2, [pc, #152]	; (80012d0 <I2C1_MspInit+0xf4>)
 8001238:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <I2C1_MspInit+0xf4>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <I2C1_MspInit+0xf4>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
      
    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN;
 800124e:	23c0      	movs	r3, #192	; 0xc0
 8001250:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8001254:	2312      	movs	r3, #18
 8001256:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = GPIO_PULLUP;
 800125a:	2301      	movs	r3, #1
 800125c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C1_SCL_SDA_AF;
 8001266:	2304      	movs	r3, #4
 8001268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C1_SCL_GPIO_PORT, &GPIO_InitStructure);
 800126c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001270:	4619      	mov	r1, r3
 8001272:	4819      	ldr	r0, [pc, #100]	; (80012d8 <I2C1_MspInit+0xfc>)
 8001274:	f001 f8b8 	bl	80023e8 <HAL_GPIO_Init>
      
    /*##-3- Configure the Discovery I2C1 peripheral #######################################*/ 
    /* Enable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_ENABLE();
 8001278:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <I2C1_MspInit+0xf4>)
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <I2C1_MspInit+0xf4>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001282:	6593      	str	r3, [r2, #88]	; 0x58
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <I2C1_MspInit+0xf4>)
 8001286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
    
    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 8001290:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <I2C1_MspInit+0xf4>)
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <I2C1_MspInit+0xf4>)
 8001294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001296:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800129a:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 800129c:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <I2C1_MspInit+0xf4>)
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <I2C1_MspInit+0xf4>)
 80012a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012a6:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_EV_IRQn, 0x00, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	201f      	movs	r0, #31
 80012ae:	f000 fb22 	bl	80018f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_EV_IRQn);
 80012b2:	201f      	movs	r0, #31
 80012b4:	f000 fb3b 	bl	800192e <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_ER_IRQn, 0x00, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2100      	movs	r1, #0
 80012bc:	2020      	movs	r0, #32
 80012be:	f000 fb1a 	bl	80018f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_ER_IRQn); 
 80012c2:	2020      	movs	r0, #32
 80012c4:	f000 fb33 	bl	800192e <HAL_NVIC_EnableIRQ>
  }
}
 80012c8:	bf00      	nop
 80012ca:	37b8      	adds	r7, #184	; 0xb8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40005400 	.word	0x40005400
 80012d8:	48000400 	.word	0x48000400

080012dc <I2C1_DeInit>:
/**
  * @brief Discovery I2C1 Bus Deitialization
  * @retval None
  */
static void I2C1_DeInit(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2c1Handle) != HAL_I2C_STATE_RESET)
 80012e0:	4806      	ldr	r0, [pc, #24]	; (80012fc <I2C1_DeInit+0x20>)
 80012e2:	f001 fe21 	bl	8002f28 <HAL_I2C_GetState>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d005      	beq.n	80012f8 <I2C1_DeInit+0x1c>
  {
    /* Deinit the I2C */
    HAL_I2C_DeInit(&I2c1Handle);
 80012ec:	4803      	ldr	r0, [pc, #12]	; (80012fc <I2C1_DeInit+0x20>)
 80012ee:	f001 fbbd 	bl	8002a6c <HAL_I2C_DeInit>
    I2C1_MspDeInit(&I2c1Handle);
 80012f2:	4802      	ldr	r0, [pc, #8]	; (80012fc <I2C1_DeInit+0x20>)
 80012f4:	f000 f804 	bl	8001300 <I2C1_MspDeInit>
  }
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000fbf4 	.word	0x2000fbf4

08001300 <I2C1_MspDeInit>:
  * @brief Discovery I2C1 MSP Deinitialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance == DISCOVERY_I2C1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a24      	ldr	r2, [pc, #144]	; (80013a0 <I2C1_MspDeInit+0xa0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d141      	bne.n	8001396 <I2C1_MspDeInit+0x96>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 8001312:	4a24      	ldr	r2, [pc, #144]	; (80013a4 <I2C1_MspDeInit+0xa4>)
 8001314:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <I2C1_MspDeInit+0xa4>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <I2C1_MspDeInit+0xa4>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 800132a:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <I2C1_MspDeInit+0xa4>)
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <I2C1_MspDeInit+0xa4>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <I2C1_MspDeInit+0xa4>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]

    /* Deinit Rx/Tx pins */
    HAL_GPIO_DeInit(DISCOVERY_I2C1_SCL_GPIO_PORT, (DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN));
 8001342:	21c0      	movs	r1, #192	; 0xc0
 8001344:	4818      	ldr	r0, [pc, #96]	; (80013a8 <I2C1_MspDeInit+0xa8>)
 8001346:	f001 f9f7 	bl	8002738 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C1 peripheral ############################*/
    /* Force & Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2C1_FORCE_RESET();
 800134a:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <I2C1_MspDeInit+0xa4>)
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <I2C1_MspDeInit+0xa4>)
 800134e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001350:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001354:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 8001356:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <I2C1_MspDeInit+0xa4>)
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <I2C1_MspDeInit+0xa4>)
 800135a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001360:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_DISABLE();
 8001362:	4a10      	ldr	r2, [pc, #64]	; (80013a4 <I2C1_MspDeInit+0xa4>)
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <I2C1_MspDeInit+0xa4>)
 8001366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001368:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800136c:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C1 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_EV_IRQn);
 800136e:	201f      	movs	r0, #31
 8001370:	f000 faeb 	bl	800194a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_ER_IRQn);
 8001374:	2020      	movs	r0, #32
 8001376:	f000 fae8 	bl	800194a <HAL_NVIC_DisableIRQ>
    
    __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <I2C1_MspDeInit+0xa4>)
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <I2C1_MspDeInit+0xa4>)
 800137e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	6593      	str	r3, [r2, #88]	; 0x58
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <I2C1_MspDeInit+0xa4>)
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_DisableVddIO2();
 8001392:	f002 f80f 	bl	80033b4 <HAL_PWREx_DisableVddIO2>
  }
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40005400 	.word	0x40005400
 80013a4:	40021000 	.word	0x40021000
 80013a8:	48000400 	.word	0x48000400

080013ac <I2C1_WriteBuffer>:
  * @param  pBuffer: The target register value to be written 
  * @param  Length: buffer size to be written
  * @retval None
  */
static HAL_StatusTypeDef I2C1_WriteBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af04      	add	r7, sp, #16
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	4603      	mov	r3, r0
 80013b6:	81fb      	strh	r3, [r7, #14]
 80013b8:	460b      	mov	r3, r1
 80013ba:	81bb      	strh	r3, [r7, #12]
 80013bc:	4613      	mov	r3, r2
 80013be:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout); 
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <I2C1_WriteBuffer+0x4c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	8978      	ldrh	r0, [r7, #10]
 80013ca:	89ba      	ldrh	r2, [r7, #12]
 80013cc:	89f9      	ldrh	r1, [r7, #14]
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	8c3b      	ldrh	r3, [r7, #32]
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	4603      	mov	r3, r0
 80013da:	4808      	ldr	r0, [pc, #32]	; (80013fc <I2C1_WriteBuffer+0x50>)
 80013dc:	f001 fb76 	bl	8002acc <HAL_I2C_Mem_Write>
 80013e0:	4603      	mov	r3, r0
 80013e2:	75fb      	strb	r3, [r7, #23]

/* Check the communication status */
  if(status != HAL_OK)
 80013e4:	7dfb      	ldrb	r3, [r7, #23]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <I2C1_WriteBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 80013ea:	f000 f833 	bl	8001454 <I2C1_Error>
  }        
  return status;
 80013ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000034 	.word	0x20000034
 80013fc:	2000fbf4 	.word	0x2000fbf4

08001400 <I2C1_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C1_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af04      	add	r7, sp, #16
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	4603      	mov	r3, r0
 800140a:	81fb      	strh	r3, [r7, #14]
 800140c:	460b      	mov	r3, r1
 800140e:	81bb      	strh	r3, [r7, #12]
 8001410:	4613      	mov	r3, r2
 8001412:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <I2C1_ReadBuffer+0x4c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	8978      	ldrh	r0, [r7, #10]
 800141e:	89ba      	ldrh	r2, [r7, #12]
 8001420:	89f9      	ldrh	r1, [r7, #14]
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	8c3b      	ldrh	r3, [r7, #32]
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	4603      	mov	r3, r0
 800142e:	4808      	ldr	r0, [pc, #32]	; (8001450 <I2C1_ReadBuffer+0x50>)
 8001430:	f001 fc60 	bl	8002cf4 <HAL_I2C_Mem_Read>
 8001434:	4603      	mov	r3, r0
 8001436:	75fb      	strb	r3, [r7, #23]
  
/* Check the communication status */
  if(status != HAL_OK)
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <I2C1_ReadBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 800143e:	f000 f809 	bl	8001454 <I2C1_Error>
  }        
  return status;
 8001442:	7dfb      	ldrb	r3, [r7, #23]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000034 	.word	0x20000034
 8001450:	2000fbf4 	.word	0x2000fbf4

08001454 <I2C1_Error>:
/**
  * @brief Discovery I2C1 error treatment function
  * @retval None
  */
static void I2C1_Error (void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c1Handle);
 8001458:	4803      	ldr	r0, [pc, #12]	; (8001468 <I2C1_Error+0x14>)
 800145a:	f001 fb07 	bl	8002a6c <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C communication BUS */
  I2C1_Init();
 800145e:	f7ff fe8f 	bl	8001180 <I2C1_Init>
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000fbf4 	.word	0x2000fbf4

0800146c <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001472:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <AUDIO_IO_Init+0x64>)
 8001474:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <AUDIO_IO_Init+0x64>)
 8001476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001478:	f043 0310 	orr.w	r3, r3, #16
 800147c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <AUDIO_IO_Init+0x64>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 800148a:	2308      	movs	r3, #8
 800148c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148e:	2301      	movs	r3, #1
 8001490:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001492:	2302      	movs	r3, #2
 8001494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <AUDIO_IO_Init+0x68>)
 80014a0:	f000 ffa2 	bl	80023e8 <HAL_GPIO_Init>

  /* I2C bus init */
  I2C1_Init();
 80014a4:	f7ff fe6c 	bl	8001180 <I2C1_Init>

  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 80014a8:	2200      	movs	r2, #0
 80014aa:	2108      	movs	r1, #8
 80014ac:	4809      	ldr	r0, [pc, #36]	; (80014d4 <AUDIO_IO_Init+0x68>)
 80014ae:	f001 fa37 	bl	8002920 <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 80014b2:	2005      	movs	r0, #5
 80014b4:	f000 f912 	bl	80016dc <HAL_Delay>

  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 80014b8:	2201      	movs	r2, #1
 80014ba:	2108      	movs	r1, #8
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <AUDIO_IO_Init+0x68>)
 80014be:	f001 fa2f 	bl	8002920 <HAL_GPIO_WritePin>
   
  /* wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 80014c2:	2005      	movs	r0, #5
 80014c4:	f000 f90a 	bl	80016dc <HAL_Delay>
}
 80014c8:	bf00      	nop
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40021000 	.word	0x40021000
 80014d4:	48001000 	.word	0x48001000

080014d8 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)                       /* TO DO */
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
  
  /***********************************************************************/
  /* In case of battery-supplied powered, there is no audio codec-based 
     features available. Set audio codec I/O default setting */
  /***********************************************************************/ 
  __HAL_RCC_GPIOE_CLK_ENABLE();  
 80014de:	4a1c      	ldr	r2, [pc, #112]	; (8001550 <AUDIO_IO_DeInit+0x78>)
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <AUDIO_IO_DeInit+0x78>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e4:	f043 0310 	orr.w	r3, r3, #16
 80014e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <AUDIO_IO_DeInit+0x78>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP  ;
 80014f6:	2301      	movs	r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pin       = (GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 80014fa:	237c      	movs	r3, #124	; 0x7c
 80014fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 80014fe:	2302      	movs	r3, #2
 8001500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH; 
 8001502:	2303      	movs	r3, #3
 8001504:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	4619      	mov	r1, r3
 800150a:	4812      	ldr	r0, [pc, #72]	; (8001554 <AUDIO_IO_DeInit+0x7c>)
 800150c:	f000 ff6c 	bl	80023e8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	2104      	movs	r1, #4
 8001514:	480f      	ldr	r0, [pc, #60]	; (8001554 <AUDIO_IO_DeInit+0x7c>)
 8001516:	f001 fa03 	bl	8002920 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	2108      	movs	r1, #8
 800151e:	480d      	ldr	r0, [pc, #52]	; (8001554 <AUDIO_IO_DeInit+0x7c>)
 8001520:	f001 f9fe 	bl	8002920 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	2110      	movs	r1, #16
 8001528:	480a      	ldr	r0, [pc, #40]	; (8001554 <AUDIO_IO_DeInit+0x7c>)
 800152a:	f001 f9f9 	bl	8002920 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2120      	movs	r1, #32
 8001532:	4808      	ldr	r0, [pc, #32]	; (8001554 <AUDIO_IO_DeInit+0x7c>)
 8001534:	f001 f9f4 	bl	8002920 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2140      	movs	r1, #64	; 0x40
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <AUDIO_IO_DeInit+0x7c>)
 800153e:	f001 f9ef 	bl	8002920 <HAL_GPIO_WritePin>

  /* I2C bus Deinit */
  I2C1_DeInit();
 8001542:	f7ff fecb 	bl	80012dc <I2C1_DeInit>
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	48001000 	.word	0x48001000

08001558 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af02      	add	r7, sp, #8
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
 8001562:	460b      	mov	r3, r1
 8001564:	71bb      	strb	r3, [r7, #6]
 8001566:	4613      	mov	r3, r2
 8001568:	717b      	strb	r3, [r7, #5]
  I2C1_WriteBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1);
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	b298      	uxth	r0, r3
 800156e:	79bb      	ldrb	r3, [r7, #6]
 8001570:	b299      	uxth	r1, r3
 8001572:	1d7a      	adds	r2, r7, #5
 8001574:	2301      	movs	r3, #1
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	4613      	mov	r3, r2
 800157a:	2201      	movs	r2, #1
 800157c:	f7ff ff16 	bl	80013ac <I2C1_WriteBuffer>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af02      	add	r7, sp, #8
 800158e:	4603      	mov	r3, r0
 8001590:	460a      	mov	r2, r1
 8001592:	71fb      	strb	r3, [r7, #7]
 8001594:	4613      	mov	r3, r2
 8001596:	71bb      	strb	r3, [r7, #6]
  uint8_t Read_Value = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]
  
  I2C1_ReadBuffer((uint16_t) Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Read_Value, 1); 
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	b298      	uxth	r0, r3
 80015a0:	79bb      	ldrb	r3, [r7, #6]
 80015a2:	b299      	uxth	r1, r3
 80015a4:	f107 020f 	add.w	r2, r7, #15
 80015a8:	2301      	movs	r3, #1
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	4613      	mov	r3, r2
 80015ae:	2201      	movs	r2, #1
 80015b0:	f7ff ff26 	bl	8001400 <I2C1_ReadBuffer>
  
  return Read_Value;
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'HalfTransfer' callback function (if any) */
  if (hAudioOut.CbHalfTransfer != (Audio_CallbackTypeDef)NULL)
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_SAI_TxHalfCpltCallback+0x20>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <HAL_SAI_TxHalfCpltCallback+0x16>
  {
    hAudioOut.CbHalfTransfer();
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <HAL_SAI_TxHalfCpltCallback+0x20>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	4798      	blx	r3
  }
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200000c8 	.word	0x200000c8

080015e4 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'ErrorCallback' callback function (if any) */
  if (hAudioOut.CbError != (Audio_CallbackTypeDef)NULL)
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_SAI_ErrorCallback+0x20>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d002      	beq.n	80015fa <HAL_SAI_ErrorCallback+0x16>
  {
    hAudioOut.CbError();
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_SAI_ErrorCallback+0x20>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4798      	blx	r3
  }
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200000c8 	.word	0x200000c8

08001608 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter : DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'ErrorCallback' callback function (if any) */
  if (hAudioIn.CbError != (Audio_CallbackTypeDef)NULL)
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_DFSDM_FilterErrorCallback+0x24>)
 8001612:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_DFSDM_FilterErrorCallback+0x1a>
  {
    hAudioIn.CbError();
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <HAL_DFSDM_FilterErrorCallback+0x24>)
 800161c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001620:	4798      	blx	r3
  }
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200000d8 	.word	0x200000d8

08001630 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163a:	2003      	movs	r0, #3
 800163c:	f000 f950 	bl	80018e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001640:	200f      	movs	r0, #15
 8001642:	f000 f80d 	bl	8001660 <HAL_InitTick>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	71fb      	strb	r3, [r7, #7]
 8001650:	e001      	b.n	8001656 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001652:	f005 f939 	bl	80068c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001656:	79fb      	ldrb	r3, [r7, #7]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_InitTick+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0c      	ldr	r2, [pc, #48]	; (80016a4 <HAL_InitTick+0x44>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	099b      	lsrs	r3, r3, #6
 8001678:	4618      	mov	r0, r3
 800167a:	f000 f974 	bl	8001966 <HAL_SYSTICK_Config>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <HAL_InitTick+0x2a>
  {
    status = HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	73fb      	strb	r3, [r7, #15]
 8001688:	e005      	b.n	8001696 <HAL_InitTick+0x36>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	f04f 30ff 	mov.w	r0, #4294967295
 8001692:	f000 f930 	bl	80018f6 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	2000003c 	.word	0x2000003c
 80016a4:	10624dd3 	.word	0x10624dd3

080016a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick++;
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <HAL_IncTick+0x18>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <HAL_IncTick+0x18>)
 80016b4:	6013      	str	r3, [r2, #0]
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	2000fc40 	.word	0x2000fc40

080016c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return uwTick;
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <HAL_GetTick+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	2000fc40 	.word	0x2000fc40

080016dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e4:	f7ff ffee 	bl	80016c4 <HAL_GetTick>
 80016e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d002      	beq.n	80016fc <HAL_Delay+0x20>
  {
    wait++;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3301      	adds	r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016fc:	bf00      	nop
 80016fe:	f7ff ffe1 	bl	80016c4 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	1ad2      	subs	r2, r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	429a      	cmp	r2, r3
 800170c:	d3f7      	bcc.n	80016fe <HAL_Delay+0x22>
  {
  }
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <NVIC_SetPriorityGrouping+0x44>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001734:	4013      	ands	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174a:	4a04      	ldr	r2, [pc, #16]	; (800175c <NVIC_SetPriorityGrouping+0x44>)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	60d3      	str	r3, [r2, #12]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <NVIC_GetPriorityGrouping+0x18>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	f003 0307 	and.w	r3, r3, #7
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001786:	4909      	ldr	r1, [pc, #36]	; (80017ac <NVIC_EnableIRQ+0x30>)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	095b      	lsrs	r3, r3, #5
 800178e:	79fa      	ldrb	r2, [r7, #7]
 8001790:	f002 021f 	and.w	r2, r2, #31
 8001794:	2001      	movs	r0, #1
 8001796:	fa00 f202 	lsl.w	r2, r0, r2
 800179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000e100 	.word	0xe000e100

080017b0 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80017ba:	4909      	ldr	r1, [pc, #36]	; (80017e0 <NVIC_DisableIRQ+0x30>)
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	095b      	lsrs	r3, r3, #5
 80017c2:	79fa      	ldrb	r2, [r7, #7]
 80017c4:	f002 021f 	and.w	r2, r2, #31
 80017c8:	2001      	movs	r0, #1
 80017ca:	fa00 f202 	lsl.w	r2, r0, r2
 80017ce:	3320      	adds	r3, #32
 80017d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	da0b      	bge.n	8001810 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	490d      	ldr	r1, [pc, #52]	; (8001830 <NVIC_SetPriority+0x4c>)
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	3b04      	subs	r3, #4
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180e:	e009      	b.n	8001824 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	4908      	ldr	r1, [pc, #32]	; (8001834 <NVIC_SetPriority+0x50>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00
 8001834:	e000e100 	.word	0xe000e100

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	2201      	movs	r2, #1
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	1e5a      	subs	r2, r3, #1
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	401a      	ands	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800187e:	2101      	movs	r1, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	1e59      	subs	r1, r3, #1
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	4313      	orrs	r3, r2
         );
}
 800188e:	4618      	mov	r0, r3
 8001890:	3724      	adds	r7, #36	; 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ac:	d301      	bcc.n	80018b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00f      	b.n	80018d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <SysTick_Config+0x40>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ba:	210f      	movs	r1, #15
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f7ff ff90 	bl	80017e4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <SysTick_Config+0x40>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <SysTick_Config+0x40>)
 80018cc:	2207      	movs	r2, #7
 80018ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	e000e010 	.word	0xe000e010

080018e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff15 	bl	8001718 <NVIC_SetPriorityGrouping>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001908:	f7ff ff2a 	bl	8001760 <NVIC_GetPriorityGrouping>
 800190c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	6978      	ldr	r0, [r7, #20]
 8001914:	f7ff ff90 	bl	8001838 <NVIC_EncodePriority>
 8001918:	4602      	mov	r2, r0
 800191a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff5f 	bl	80017e4 <NVIC_SetPriority>
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff1d 	bl	800177c <NVIC_EnableIRQ>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff29 	bl	80017b0 <NVIC_DisableIRQ>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ff94 	bl	800189c <SysTick_Config>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e0ac      	b.n	8001aec <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fa82 	bl	8001ea0 <DFSDM_GetChannelFromInstance>
 800199c:	4602      	mov	r2, r0
 800199e:	4b55      	ldr	r3, [pc, #340]	; (8001af4 <HAL_DFSDM_ChannelInit+0x174>)
 80019a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e09f      	b.n	8001aec <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f004 fe27 	bl	8006600 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80019b2:	4b51      	ldr	r3, [pc, #324]	; (8001af8 <HAL_DFSDM_ChannelInit+0x178>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	3301      	adds	r3, #1
 80019b8:	4a4f      	ldr	r2, [pc, #316]	; (8001af8 <HAL_DFSDM_ChannelInit+0x178>)
 80019ba:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80019bc:	4b4e      	ldr	r3, [pc, #312]	; (8001af8 <HAL_DFSDM_ChannelInit+0x178>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d125      	bne.n	8001a10 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80019c4:	4a4d      	ldr	r2, [pc, #308]	; (8001afc <HAL_DFSDM_ChannelInit+0x17c>)
 80019c6:	4b4d      	ldr	r3, [pc, #308]	; (8001afc <HAL_DFSDM_ChannelInit+0x17c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019ce:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80019d0:	494a      	ldr	r1, [pc, #296]	; (8001afc <HAL_DFSDM_ChannelInit+0x17c>)
 80019d2:	4b4a      	ldr	r3, [pc, #296]	; (8001afc <HAL_DFSDM_ChannelInit+0x17c>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80019de:	4a47      	ldr	r2, [pc, #284]	; (8001afc <HAL_DFSDM_ChannelInit+0x17c>)
 80019e0:	4b46      	ldr	r3, [pc, #280]	; (8001afc <HAL_DFSDM_ChannelInit+0x17c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80019e8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	791b      	ldrb	r3, [r3, #4]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d108      	bne.n	8001a04 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80019f2:	4942      	ldr	r1, [pc, #264]	; (8001afc <HAL_DFSDM_ChannelInit+0x17c>)
 80019f4:	4b41      	ldr	r3, [pc, #260]	; (8001afc <HAL_DFSDM_ChannelInit+0x17c>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	041b      	lsls	r3, r3, #16
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001a04:	4a3d      	ldr	r2, [pc, #244]	; (8001afc <HAL_DFSDM_ChannelInit+0x17c>)
 8001a06:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <HAL_DFSDM_ChannelInit+0x17c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a0e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001a1e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	6811      	ldr	r1, [r2, #0]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6910      	ldr	r0, [r2, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6952      	ldr	r2, [r2, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a32:	4310      	orrs	r0, r2
                                        hdfsdm_channel->Init.Input.Pins);
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6992      	ldr	r2, [r2, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a38:	4302      	orrs	r2, r0
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6812      	ldr	r2, [r2, #0]
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	f022 020f 	bic.w	r2, r2, #15
 8001a4c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	6811      	ldr	r1, [r2, #0]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	69d0      	ldr	r0, [r2, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6a12      	ldr	r2, [r2, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a60:	4302      	orrs	r2, r0
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	6892      	ldr	r2, [r2, #8]
 8001a70:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001a74:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	6891      	ldr	r1, [r2, #8]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6a50      	ldr	r0, [r2, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a88:	3a01      	subs	r2, #1
 8001a8a:	0412      	lsls	r2, r2, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a8c:	4302      	orrs	r2, r0
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	6852      	ldr	r2, [r2, #4]
 8001a9c:	f002 0207 	and.w	r2, r2, #7
 8001aa0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	6851      	ldr	r1, [r2, #4]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ab0:	0210      	lsls	r0, r2, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ab6:	00d2      	lsls	r2, r2, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001ab8:	4302      	orrs	r2, r0
 8001aba:	430a      	orrs	r2, r1
 8001abc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001acc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f9e0 	bl	8001ea0 <DFSDM_GetChannelFromInstance>
 8001ae0:	4601      	mov	r1, r0
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_DFSDM_ChannelInit+0x174>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000180 	.word	0x20000180
 8001af8:	2000017c 	.word	0x2000017c
 8001afc:	40016000 	.word	0x40016000

08001b00 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e0ca      	b.n	8001ca8 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a66      	ldr	r2, [pc, #408]	; (8001cb0 <HAL_DFSDM_FilterInit+0x1b0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d109      	bne.n	8001b30 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d003      	beq.n	8001b2c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0bb      	b.n	8001ca8 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f004 fdb7 	bl	80066bc <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001b5c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	7a1b      	ldrb	r3, [r3, #8]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d108      	bne.n	8001b78 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	e007      	b.n	8001b88 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001b86:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	7a5b      	ldrb	r3, [r3, #9]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d108      	bne.n	8001ba2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e007      	b.n	8001bb2 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001bb0:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8001bc0:	f023 0308 	bic.w	r3, r3, #8
 8001bc4:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d108      	bne.n	8001be0 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	6811      	ldr	r1, [r2, #0]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6952      	ldr	r2, [r2, #20]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7c1b      	ldrb	r3, [r3, #16]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d108      	bne.n	8001bfa <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	f042 0210 	orr.w	r2, r2, #16
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	e007      	b.n	8001c0a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	f022 0210 	bic.w	r2, r2, #16
 8001c08:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7c5b      	ldrb	r3, [r3, #17]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d108      	bne.n	8001c24 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	f042 0220 	orr.w	r2, r2, #32
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e007      	b.n	8001c34 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	f022 0220 	bic.w	r2, r2, #32
 8001c32:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8001c42:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001c46:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	6951      	ldr	r1, [r2, #20]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	69d0      	ldr	r0, [r2, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6a12      	ldr	r2, [r2, #32]
 8001c5a:	3a01      	subs	r2, #1
 8001c5c:	0412      	lsls	r2, r2, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001c5e:	4310      	orrs	r0, r2
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c64:	3a01      	subs	r2, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001c66:	4302      	orrs	r2, r0
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699a      	ldr	r2, [r3, #24]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7c1a      	ldrb	r2, [r3, #16]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	f042 0201 	orr.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40016100 	.word	0x40016100

08001cb4 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d02e      	beq.n	8001d2c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001cd4:	2bff      	cmp	r3, #255	; 0xff
 8001cd6:	d029      	beq.n	8001d2c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cea:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d10d      	bne.n	8001d0e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	6811      	ldr	r1, [r2, #0]
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	0212      	lsls	r2, r2, #8
 8001d00:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001d04:	430a      	orrs	r2, r1
 8001d06:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	e00a      	b.n	8001d24 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	6811      	ldr	r1, [r2, #0]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	0212      	lsls	r2, r2, #8
 8001d1c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	631a      	str	r2, [r3, #48]	; 0x30
 8001d2a:	e001      	b.n	8001d30 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	371c      	adds	r7, #28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	75fb      	strb	r3, [r7, #23]
 8001d60:	e064      	b.n	8001e2c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d70:	d002      	beq.n	8001d78 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	75fb      	strb	r3, [r7, #23]
 8001d76:	e059      	b.n	8001e2c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10e      	bne.n	8001d9e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10a      	bne.n	8001d9e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d105      	bne.n	8001d9e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d002      	beq.n	8001d9e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	75fb      	strb	r3, [r7, #23]
 8001d9c:	e046      	b.n	8001e2c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10b      	bne.n	8001dbe <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d107      	bne.n	8001dbe <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d102      	bne.n	8001dbe <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	75fb      	strb	r3, [r7, #23]
 8001dbc:	e036      	b.n	8001e2c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d004      	beq.n	8001dd2 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d12a      	bne.n	8001e28 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd6:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001dd8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dde:	4a17      	ldr	r2, [pc, #92]	; (8001e3c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001de0:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001dea:	69d2      	ldr	r2, [r2, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001dec:	2a20      	cmp	r2, #32
 8001dee:	d101      	bne.n	8001df4 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8001df0:	4a13      	ldr	r2, [pc, #76]	; (8001e40 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001df2:	e000      	b.n	8001df6 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8001df4:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	331c      	adds	r3, #28
 8001e02:	4619      	mov	r1, r3
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f000 f9ae 	bl	8002168 <HAL_DMA_Start_IT>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d006      	beq.n	8001e20 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	22ff      	movs	r2, #255	; 0xff
 8001e16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001e1e:	e005      	b.n	8001e2c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 f893 	bl	8001f4c <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001e26:	e001      	b.n	8001e2c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	08001e61 	.word	0x08001e61
 8001e3c:	08001e7d 	.word	0x08001e7d
 8001e40:	08001e45 	.word	0x08001e45

08001e44 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f004 fcf8 	bl	8006848 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f004 fcfa 	bl	8006868 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001e74:	bf00      	nop
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f7ff fbb9 	bl	8001608 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a20      	ldr	r2, [pc, #128]	; (8001f2c <DFSDM_GetChannelFromInstance+0x8c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d102      	bne.n	8001eb6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e032      	b.n	8001f1c <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <DFSDM_GetChannelFromInstance+0x90>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d102      	bne.n	8001ec4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	e02b      	b.n	8001f1c <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a1b      	ldr	r2, [pc, #108]	; (8001f34 <DFSDM_GetChannelFromInstance+0x94>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d102      	bne.n	8001ed2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	e024      	b.n	8001f1c <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel3)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <DFSDM_GetChannelFromInstance+0x98>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d102      	bne.n	8001ee0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8001eda:	2303      	movs	r3, #3
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	e01d      	b.n	8001f1c <DFSDM_GetChannelFromInstance+0x7c>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a16      	ldr	r2, [pc, #88]	; (8001f3c <DFSDM_GetChannelFromInstance+0x9c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d102      	bne.n	8001eee <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8001ee8:	2304      	movs	r3, #4
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	e016      	b.n	8001f1c <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel5)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a13      	ldr	r2, [pc, #76]	; (8001f40 <DFSDM_GetChannelFromInstance+0xa0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d102      	bne.n	8001efc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8001ef6:	2305      	movs	r3, #5
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e00f      	b.n	8001f1c <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel6)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a11      	ldr	r2, [pc, #68]	; (8001f44 <DFSDM_GetChannelFromInstance+0xa4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d102      	bne.n	8001f0a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8001f04:	2306      	movs	r3, #6
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	e008      	b.n	8001f1c <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel7)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <DFSDM_GetChannelFromInstance+0xa8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d102      	bne.n	8001f18 <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 8001f12:	2307      	movs	r3, #7
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	e001      	b.n	8001f1c <DFSDM_GetChannelFromInstance+0x7c>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40016000 	.word	0x40016000
 8001f30:	40016020 	.word	0x40016020
 8001f34:	40016040 	.word	0x40016040
 8001f38:	40016060 	.word	0x40016060
 8001f3c:	40016080 	.word	0x40016080
 8001f40:	400160a0 	.word	0x400160a0
 8001f44:	400160c0 	.word	0x400160c0
 8001f48:	400160e0 	.word	0x400160e0

08001f4c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d108      	bne.n	8001f6e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e033      	b.n	8001fd6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001f8c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	f042 0201 	orr.w	r2, r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d116      	bne.n	8001fd6 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d107      	bne.n	8001fc0 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	f042 0202 	orr.w	r2, r2, #2
 8001fbe:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <DFSDM_RegConvStart+0x84>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	e000      	b.n	8001fd2 <DFSDM_RegConvStart+0x86>
 8001fd0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <DFSDM_RegConvStart+0x98>
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	e000      	b.n	8001fe6 <DFSDM_RegConvStart+0x9a>
 8001fe4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e098      	b.n	800213c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	4b4d      	ldr	r3, [pc, #308]	; (8002148 <HAL_DMA_Init+0x150>)
 8002012:	429a      	cmp	r2, r3
 8002014:	d80f      	bhi.n	8002036 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	4b4b      	ldr	r3, [pc, #300]	; (800214c <HAL_DMA_Init+0x154>)
 800201e:	4413      	add	r3, r2
 8002020:	4a4b      	ldr	r2, [pc, #300]	; (8002150 <HAL_DMA_Init+0x158>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	009a      	lsls	r2, r3, #2
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a48      	ldr	r2, [pc, #288]	; (8002154 <HAL_DMA_Init+0x15c>)
 8002032:	641a      	str	r2, [r3, #64]	; 0x40
 8002034:	e00e      	b.n	8002054 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	4b46      	ldr	r3, [pc, #280]	; (8002158 <HAL_DMA_Init+0x160>)
 800203e:	4413      	add	r3, r2
 8002040:	4a43      	ldr	r2, [pc, #268]	; (8002150 <HAL_DMA_Init+0x158>)
 8002042:	fba2 2303 	umull	r2, r3, r2, r3
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	009a      	lsls	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a42      	ldr	r2, [pc, #264]	; (800215c <HAL_DMA_Init+0x164>)
 8002052:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800206a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800206e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002078:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002084:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002090:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020ae:	d039      	beq.n	8002124 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	4a27      	ldr	r2, [pc, #156]	; (8002154 <HAL_DMA_Init+0x15c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d11a      	bne.n	80020f0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020ba:	4929      	ldr	r1, [pc, #164]	; (8002160 <HAL_DMA_Init+0x168>)
 80020bc:	4b28      	ldr	r3, [pc, #160]	; (8002160 <HAL_DMA_Init+0x168>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c4:	f003 031c 	and.w	r3, r3, #28
 80020c8:	200f      	movs	r0, #15
 80020ca:	fa00 f303 	lsl.w	r3, r0, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	4013      	ands	r3, r2
 80020d2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020d4:	4822      	ldr	r0, [pc, #136]	; (8002160 <HAL_DMA_Init+0x168>)
 80020d6:	4b22      	ldr	r3, [pc, #136]	; (8002160 <HAL_DMA_Init+0x168>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6859      	ldr	r1, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f003 031c 	and.w	r3, r3, #28
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	4313      	orrs	r3, r2
 80020ec:	6003      	str	r3, [r0, #0]
 80020ee:	e019      	b.n	8002124 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020f0:	491c      	ldr	r1, [pc, #112]	; (8002164 <HAL_DMA_Init+0x16c>)
 80020f2:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <HAL_DMA_Init+0x16c>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f003 031c 	and.w	r3, r3, #28
 80020fe:	200f      	movs	r0, #15
 8002100:	fa00 f303 	lsl.w	r3, r0, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	4013      	ands	r3, r2
 8002108:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800210a:	4816      	ldr	r0, [pc, #88]	; (8002164 <HAL_DMA_Init+0x16c>)
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_DMA_Init+0x16c>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6859      	ldr	r1, [r3, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	f003 031c 	and.w	r3, r3, #28
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	4313      	orrs	r3, r2
 8002122:	6003      	str	r3, [r0, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40020407 	.word	0x40020407
 800214c:	bffdfff8 	.word	0xbffdfff8
 8002150:	cccccccd 	.word	0xcccccccd
 8002154:	40020000 	.word	0x40020000
 8002158:	bffdfbf8 	.word	0xbffdfbf8
 800215c:	40020400 	.word	0x40020400
 8002160:	400200a8 	.word	0x400200a8
 8002164:	400204a8 	.word	0x400204a8

08002168 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_DMA_Start_IT+0x20>
 8002184:	2302      	movs	r3, #2
 8002186:	e04b      	b.n	8002220 <HAL_DMA_Start_IT+0xb8>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d13a      	bne.n	8002212 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	f022 0201 	bic.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	68b9      	ldr	r1, [r7, #8]
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f8e0 	bl	8002386 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d008      	beq.n	80021e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	f042 020e 	orr.w	r2, r2, #14
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	e00f      	b.n	8002200 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	f022 0204 	bic.w	r2, r2, #4
 80021ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	f042 020a 	orr.w	r2, r2, #10
 80021fe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e005      	b.n	800221e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800221e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	f003 031c 	and.w	r3, r3, #28
 8002248:	2204      	movs	r2, #4
 800224a:	409a      	lsls	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4013      	ands	r3, r2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d026      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x7a>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d021      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b00      	cmp	r3, #0
 800226a:	d107      	bne.n	800227c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	f022 0204 	bic.w	r2, r2, #4
 800227a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002284:	f002 021c 	and.w	r2, r2, #28
 8002288:	2104      	movs	r1, #4
 800228a:	fa01 f202 	lsl.w	r2, r1, r2
 800228e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	2b00      	cmp	r3, #0
 8002296:	d071      	beq.n	800237c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80022a0:	e06c      	b.n	800237c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f003 031c 	and.w	r3, r3, #28
 80022aa:	2202      	movs	r2, #2
 80022ac:	409a      	lsls	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d02e      	beq.n	8002314 <HAL_DMA_IRQHandler+0xec>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d029      	beq.n	8002314 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0320 	and.w	r3, r3, #32
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10b      	bne.n	80022e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	f022 020a 	bic.w	r2, r2, #10
 80022dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022ee:	f002 021c 	and.w	r2, r2, #28
 80022f2:	2102      	movs	r1, #2
 80022f4:	fa01 f202 	lsl.w	r2, r1, r2
 80022f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	2b00      	cmp	r3, #0
 8002308:	d038      	beq.n	800237c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002312:	e033      	b.n	800237c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002318:	f003 031c 	and.w	r3, r3, #28
 800231c:	2208      	movs	r2, #8
 800231e:	409a      	lsls	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d02a      	beq.n	800237e <HAL_DMA_IRQHandler+0x156>
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d025      	beq.n	800237e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	f022 020e 	bic.w	r2, r2, #14
 8002340:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800234a:	f002 021c 	and.w	r2, r2, #28
 800234e:	2101      	movs	r1, #1
 8002350:	fa01 f202 	lsl.w	r2, r1, r2
 8002354:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002370:	2b00      	cmp	r3, #0
 8002372:	d004      	beq.n	800237e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800237c:	bf00      	nop
 800237e:	bf00      	nop
}
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002386:	b480      	push	{r7}
 8002388:	b085      	sub	sp, #20
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800239c:	f002 021c 	and.w	r2, r2, #28
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa01 f202 	lsl.w	r2, r1, r2
 80023a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d108      	bne.n	80023ca <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023c8:	e007      	b.n	80023da <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	60da      	str	r2, [r3, #12]
}
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f6:	e17f      	b.n	80026f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	2101      	movs	r1, #1
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	4013      	ands	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 8171 	beq.w	80026f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x38>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b12      	cmp	r3, #18
 800241e:	d123      	bne.n	8002468 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	08da      	lsrs	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3208      	adds	r2, #8
 8002428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	220f      	movs	r2, #15
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	08da      	lsrs	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3208      	adds	r2, #8
 8002462:	6939      	ldr	r1, [r7, #16]
 8002464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2203      	movs	r2, #3
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0203 	and.w	r2, r3, #3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d00b      	beq.n	80024bc <HAL_GPIO_Init+0xd4>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d007      	beq.n	80024bc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024b0:	2b11      	cmp	r3, #17
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b12      	cmp	r3, #18
 80024ba:	d130      	bne.n	800251e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	2203      	movs	r2, #3
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024f2:	2201      	movs	r2, #1
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	f003 0201 	and.w	r2, r3, #1
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b03      	cmp	r3, #3
 8002528:	d118      	bne.n	800255c <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002530:	2201      	movs	r2, #1
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	08db      	lsrs	r3, r3, #3
 8002546:	f003 0201 	and.w	r2, r3, #1
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80ac 	beq.w	80026f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259a:	4a5e      	ldr	r2, [pc, #376]	; (8002714 <HAL_GPIO_Init+0x32c>)
 800259c:	4b5d      	ldr	r3, [pc, #372]	; (8002714 <HAL_GPIO_Init+0x32c>)
 800259e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6613      	str	r3, [r2, #96]	; 0x60
 80025a6:	4b5b      	ldr	r3, [pc, #364]	; (8002714 <HAL_GPIO_Init+0x32c>)
 80025a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025b2:	4a59      	ldr	r2, [pc, #356]	; (8002718 <HAL_GPIO_Init+0x330>)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	089b      	lsrs	r3, r3, #2
 80025b8:	3302      	adds	r3, #2
 80025ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	220f      	movs	r2, #15
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025dc:	d025      	beq.n	800262a <HAL_GPIO_Init+0x242>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4e      	ldr	r2, [pc, #312]	; (800271c <HAL_GPIO_Init+0x334>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d01f      	beq.n	8002626 <HAL_GPIO_Init+0x23e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4d      	ldr	r2, [pc, #308]	; (8002720 <HAL_GPIO_Init+0x338>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d019      	beq.n	8002622 <HAL_GPIO_Init+0x23a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a4c      	ldr	r2, [pc, #304]	; (8002724 <HAL_GPIO_Init+0x33c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d013      	beq.n	800261e <HAL_GPIO_Init+0x236>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a4b      	ldr	r2, [pc, #300]	; (8002728 <HAL_GPIO_Init+0x340>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00d      	beq.n	800261a <HAL_GPIO_Init+0x232>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4a      	ldr	r2, [pc, #296]	; (800272c <HAL_GPIO_Init+0x344>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d007      	beq.n	8002616 <HAL_GPIO_Init+0x22e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a49      	ldr	r2, [pc, #292]	; (8002730 <HAL_GPIO_Init+0x348>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d101      	bne.n	8002612 <HAL_GPIO_Init+0x22a>
 800260e:	2306      	movs	r3, #6
 8002610:	e00c      	b.n	800262c <HAL_GPIO_Init+0x244>
 8002612:	2307      	movs	r3, #7
 8002614:	e00a      	b.n	800262c <HAL_GPIO_Init+0x244>
 8002616:	2305      	movs	r3, #5
 8002618:	e008      	b.n	800262c <HAL_GPIO_Init+0x244>
 800261a:	2304      	movs	r3, #4
 800261c:	e006      	b.n	800262c <HAL_GPIO_Init+0x244>
 800261e:	2303      	movs	r3, #3
 8002620:	e004      	b.n	800262c <HAL_GPIO_Init+0x244>
 8002622:	2302      	movs	r3, #2
 8002624:	e002      	b.n	800262c <HAL_GPIO_Init+0x244>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_GPIO_Init+0x244>
 800262a:	2300      	movs	r3, #0
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	f002 0203 	and.w	r2, r2, #3
 8002632:	0092      	lsls	r2, r2, #2
 8002634:	4093      	lsls	r3, r2
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800263c:	4936      	ldr	r1, [pc, #216]	; (8002718 <HAL_GPIO_Init+0x330>)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	3302      	adds	r3, #2
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800264a:	4b3a      	ldr	r3, [pc, #232]	; (8002734 <HAL_GPIO_Init+0x34c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	43db      	mvns	r3, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4013      	ands	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800266e:	4a31      	ldr	r2, [pc, #196]	; (8002734 <HAL_GPIO_Init+0x34c>)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002674:	4b2f      	ldr	r3, [pc, #188]	; (8002734 <HAL_GPIO_Init+0x34c>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	43db      	mvns	r3, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002698:	4a26      	ldr	r2, [pc, #152]	; (8002734 <HAL_GPIO_Init+0x34c>)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800269e:	4b25      	ldr	r3, [pc, #148]	; (8002734 <HAL_GPIO_Init+0x34c>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026c2:	4a1c      	ldr	r2, [pc, #112]	; (8002734 <HAL_GPIO_Init+0x34c>)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026c8:	4b1a      	ldr	r3, [pc, #104]	; (8002734 <HAL_GPIO_Init+0x34c>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026ec:	4a11      	ldr	r2, [pc, #68]	; (8002734 <HAL_GPIO_Init+0x34c>)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	3301      	adds	r3, #1
 80026f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	f47f ae78 	bne.w	80023f8 <HAL_GPIO_Init+0x10>
  }
}
 8002708:	bf00      	nop
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000
 8002718:	40010000 	.word	0x40010000
 800271c:	48000400 	.word	0x48000400
 8002720:	48000800 	.word	0x48000800
 8002724:	48000c00 	.word	0x48000c00
 8002728:	48001000 	.word	0x48001000
 800272c:	48001400 	.word	0x48001400
 8002730:	48001800 	.word	0x48001800
 8002734:	40010400 	.word	0x40010400

08002738 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002746:	e0cd      	b.n	80028e4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002748:	2201      	movs	r2, #1
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	409a      	lsls	r2, r3
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 80c1 	beq.w	80028de <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	2103      	movs	r1, #3
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	08da      	lsrs	r2, r3, #3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	08d9      	lsrs	r1, r3, #3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3108      	adds	r1, #8
 800277c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	200f      	movs	r0, #15
 800278a:	fa00 f303 	lsl.w	r3, r0, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	4019      	ands	r1, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3208      	adds	r2, #8
 8002796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2103      	movs	r1, #3
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	401a      	ands	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	2101      	movs	r1, #1
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	401a      	ands	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	2103      	movs	r1, #3
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	401a      	ands	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027de:	2101      	movs	r1, #1
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	401a      	ands	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80027ee:	4a44      	ldr	r2, [pc, #272]	; (8002900 <HAL_GPIO_DeInit+0x1c8>)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	3302      	adds	r3, #2
 80027f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	220f      	movs	r2, #15
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002816:	d025      	beq.n	8002864 <HAL_GPIO_DeInit+0x12c>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a3a      	ldr	r2, [pc, #232]	; (8002904 <HAL_GPIO_DeInit+0x1cc>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d01f      	beq.n	8002860 <HAL_GPIO_DeInit+0x128>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a39      	ldr	r2, [pc, #228]	; (8002908 <HAL_GPIO_DeInit+0x1d0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d019      	beq.n	800285c <HAL_GPIO_DeInit+0x124>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a38      	ldr	r2, [pc, #224]	; (800290c <HAL_GPIO_DeInit+0x1d4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d013      	beq.n	8002858 <HAL_GPIO_DeInit+0x120>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a37      	ldr	r2, [pc, #220]	; (8002910 <HAL_GPIO_DeInit+0x1d8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00d      	beq.n	8002854 <HAL_GPIO_DeInit+0x11c>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a36      	ldr	r2, [pc, #216]	; (8002914 <HAL_GPIO_DeInit+0x1dc>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d007      	beq.n	8002850 <HAL_GPIO_DeInit+0x118>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a35      	ldr	r2, [pc, #212]	; (8002918 <HAL_GPIO_DeInit+0x1e0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d101      	bne.n	800284c <HAL_GPIO_DeInit+0x114>
 8002848:	2306      	movs	r3, #6
 800284a:	e00c      	b.n	8002866 <HAL_GPIO_DeInit+0x12e>
 800284c:	2307      	movs	r3, #7
 800284e:	e00a      	b.n	8002866 <HAL_GPIO_DeInit+0x12e>
 8002850:	2305      	movs	r3, #5
 8002852:	e008      	b.n	8002866 <HAL_GPIO_DeInit+0x12e>
 8002854:	2304      	movs	r3, #4
 8002856:	e006      	b.n	8002866 <HAL_GPIO_DeInit+0x12e>
 8002858:	2303      	movs	r3, #3
 800285a:	e004      	b.n	8002866 <HAL_GPIO_DeInit+0x12e>
 800285c:	2302      	movs	r3, #2
 800285e:	e002      	b.n	8002866 <HAL_GPIO_DeInit+0x12e>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <HAL_GPIO_DeInit+0x12e>
 8002864:	2300      	movs	r3, #0
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	f002 0203 	and.w	r2, r2, #3
 800286c:	0092      	lsls	r2, r2, #2
 800286e:	fa03 f202 	lsl.w	r2, r3, r2
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	429a      	cmp	r2, r3
 8002876:	d132      	bne.n	80028de <HAL_GPIO_DeInit+0x1a6>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	220f      	movs	r2, #15
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002888:	481d      	ldr	r0, [pc, #116]	; (8002900 <HAL_GPIO_DeInit+0x1c8>)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	089b      	lsrs	r3, r3, #2
 800288e:	491c      	ldr	r1, [pc, #112]	; (8002900 <HAL_GPIO_DeInit+0x1c8>)
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	0892      	lsrs	r2, r2, #2
 8002894:	3202      	adds	r2, #2
 8002896:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	43d2      	mvns	r2, r2
 800289e:	400a      	ands	r2, r1
 80028a0:	3302      	adds	r3, #2
 80028a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80028a6:	491d      	ldr	r1, [pc, #116]	; (800291c <HAL_GPIO_DeInit+0x1e4>)
 80028a8:	4b1c      	ldr	r3, [pc, #112]	; (800291c <HAL_GPIO_DeInit+0x1e4>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	4013      	ands	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80028b4:	4919      	ldr	r1, [pc, #100]	; (800291c <HAL_GPIO_DeInit+0x1e4>)
 80028b6:	4b19      	ldr	r3, [pc, #100]	; (800291c <HAL_GPIO_DeInit+0x1e4>)
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	43db      	mvns	r3, r3
 80028be:	4013      	ands	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80028c2:	4916      	ldr	r1, [pc, #88]	; (800291c <HAL_GPIO_DeInit+0x1e4>)
 80028c4:	4b15      	ldr	r3, [pc, #84]	; (800291c <HAL_GPIO_DeInit+0x1e4>)
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	4013      	ands	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80028d0:	4912      	ldr	r1, [pc, #72]	; (800291c <HAL_GPIO_DeInit+0x1e4>)
 80028d2:	4b12      	ldr	r3, [pc, #72]	; (800291c <HAL_GPIO_DeInit+0x1e4>)
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	43db      	mvns	r3, r3
 80028da:	4013      	ands	r3, r2
 80028dc:	60cb      	str	r3, [r1, #12]
      }
    }

    position++;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3301      	adds	r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f47f af2b 	bne.w	8002748 <HAL_GPIO_DeInit+0x10>
  }
}
 80028f2:	bf00      	nop
 80028f4:	371c      	adds	r7, #28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40010000 	.word	0x40010000
 8002904:	48000400 	.word	0x48000400
 8002908:	48000800 	.word	0x48000800
 800290c:	48000c00 	.word	0x48000c00
 8002910:	48001000 	.word	0x48001000
 8002914:	48001400 	.word	0x48001400
 8002918:	48001800 	.word	0x48001800
 800291c:	40010400 	.word	0x40010400

08002920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	807b      	strh	r3, [r7, #2]
 800292c:	4613      	mov	r3, r2
 800292e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002930:	787b      	ldrb	r3, [r7, #1]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002936:	887a      	ldrh	r2, [r7, #2]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800293c:	e002      	b.n	8002944 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800293e:	887a      	ldrh	r2, [r7, #2]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e080      	b.n	8002a64 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f003 ffca 	bl	8006910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2224      	movs	r2, #36	; 0x24
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6852      	ldr	r2, [r2, #4]
 800299c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	6892      	ldr	r2, [r2, #8]
 80029ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d107      	bne.n	80029ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6892      	ldr	r2, [r2, #8]
 80029c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	e006      	b.n	80029d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6892      	ldr	r2, [r2, #8]
 80029d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d104      	bne.n	80029ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	68d2      	ldr	r2, [r2, #12]
 8002a08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6911      	ldr	r1, [r2, #16]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6952      	ldr	r2, [r2, #20]
 8002a1a:	4311      	orrs	r1, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6992      	ldr	r2, [r2, #24]
 8002a20:	0212      	lsls	r2, r2, #8
 8002a22:	430a      	orrs	r2, r1
 8002a24:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	69d1      	ldr	r1, [r2, #28]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6a12      	ldr	r2, [r2, #32]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	f042 0201 	orr.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e021      	b.n	8002ac2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2224      	movs	r2, #36	; 0x24
 8002a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f003 ff7e 	bl	8006998 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	4608      	mov	r0, r1
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4603      	mov	r3, r0
 8002adc:	817b      	strh	r3, [r7, #10]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	813b      	strh	r3, [r7, #8]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	f040 80f9 	bne.w	8002ce6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <HAL_I2C_Mem_Write+0x34>
 8002afa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d105      	bne.n	8002b0c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0ed      	b.n	8002ce8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_I2C_Mem_Write+0x4e>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e0e6      	b.n	8002ce8 <HAL_I2C_Mem_Write+0x21c>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b22:	f7fe fdcf 	bl	80016c4 <HAL_GetTick>
 8002b26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	2319      	movs	r3, #25
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fad1 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0d1      	b.n	8002ce8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2221      	movs	r2, #33	; 0x21
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2240      	movs	r2, #64	; 0x40
 8002b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a3a      	ldr	r2, [r7, #32]
 8002b5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b6c:	88f8      	ldrh	r0, [r7, #6]
 8002b6e:	893a      	ldrh	r2, [r7, #8]
 8002b70:	8979      	ldrh	r1, [r7, #10]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f9e1 	bl	8002f44 <I2C_RequestMemoryWrite>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0a9      	b.n	8002ce8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2bff      	cmp	r3, #255	; 0xff
 8002b9c:	d90e      	bls.n	8002bbc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	22ff      	movs	r2, #255	; 0xff
 8002ba2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	8979      	ldrh	r1, [r7, #10]
 8002bac:	2300      	movs	r3, #0
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fbb3 	bl	8003320 <I2C_TransferConfig>
 8002bba:	e00f      	b.n	8002bdc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	8979      	ldrh	r1, [r7, #10]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 fba2 	bl	8003320 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 fabb 	bl	800315c <I2C_WaitOnTXISFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e07b      	b.n	8002ce8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bf8:	7812      	ldrb	r2, [r2, #0]
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d034      	beq.n	8002c94 <HAL_I2C_Mem_Write+0x1c8>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d130      	bne.n	8002c94 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2180      	movs	r1, #128	; 0x80
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fa4d 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e04d      	b.n	8002ce8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2bff      	cmp	r3, #255	; 0xff
 8002c54:	d90e      	bls.n	8002c74 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	22ff      	movs	r2, #255	; 0xff
 8002c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	8979      	ldrh	r1, [r7, #10]
 8002c64:	2300      	movs	r3, #0
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fb57 	bl	8003320 <I2C_TransferConfig>
 8002c72:	e00f      	b.n	8002c94 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	8979      	ldrh	r1, [r7, #10]
 8002c86:	2300      	movs	r3, #0
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 fb46 	bl	8003320 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d19e      	bne.n	8002bdc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 fa9a 	bl	80031dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e01a      	b.n	8002ce8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6859      	ldr	r1, [r3, #4]
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <HAL_I2C_Mem_Write+0x224>)
 8002cc6:	400b      	ands	r3, r1
 8002cc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e000      	b.n	8002ce8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
  }
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	fe00e800 	.word	0xfe00e800

08002cf4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	4608      	mov	r0, r1
 8002cfe:	4611      	mov	r1, r2
 8002d00:	461a      	mov	r2, r3
 8002d02:	4603      	mov	r3, r0
 8002d04:	817b      	strh	r3, [r7, #10]
 8002d06:	460b      	mov	r3, r1
 8002d08:	813b      	strh	r3, [r7, #8]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b20      	cmp	r3, #32
 8002d18:	f040 80fd 	bne.w	8002f16 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <HAL_I2C_Mem_Read+0x34>
 8002d22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d105      	bne.n	8002d34 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0f1      	b.n	8002f18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2C_Mem_Read+0x4e>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e0ea      	b.n	8002f18 <HAL_I2C_Mem_Read+0x224>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d4a:	f7fe fcbb 	bl	80016c4 <HAL_GetTick>
 8002d4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	2319      	movs	r3, #25
 8002d56:	2201      	movs	r2, #1
 8002d58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f9bd 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0d5      	b.n	8002f18 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2222      	movs	r2, #34	; 0x22
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2240      	movs	r2, #64	; 0x40
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a3a      	ldr	r2, [r7, #32]
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d94:	88f8      	ldrh	r0, [r7, #6]
 8002d96:	893a      	ldrh	r2, [r7, #8]
 8002d98:	8979      	ldrh	r1, [r7, #10]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	4603      	mov	r3, r0
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f921 	bl	8002fec <I2C_RequestMemoryRead>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0ad      	b.n	8002f18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2bff      	cmp	r3, #255	; 0xff
 8002dc4:	d90e      	bls.n	8002de4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	22ff      	movs	r2, #255	; 0xff
 8002dca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	8979      	ldrh	r1, [r7, #10]
 8002dd4:	4b52      	ldr	r3, [pc, #328]	; (8002f20 <HAL_I2C_Mem_Read+0x22c>)
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fa9f 	bl	8003320 <I2C_TransferConfig>
 8002de2:	e00f      	b.n	8002e04 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	8979      	ldrh	r1, [r7, #10]
 8002df6:	4b4a      	ldr	r3, [pc, #296]	; (8002f20 <HAL_I2C_Mem_Read+0x22c>)
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fa8e 	bl	8003320 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2104      	movs	r1, #4
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f964 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e07c      	b.n	8002f18 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d034      	beq.n	8002ec4 <HAL_I2C_Mem_Read+0x1d0>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d130      	bne.n	8002ec4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2180      	movs	r1, #128	; 0x80
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f935 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e04d      	b.n	8002f18 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2bff      	cmp	r3, #255	; 0xff
 8002e84:	d90e      	bls.n	8002ea4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	22ff      	movs	r2, #255	; 0xff
 8002e8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	8979      	ldrh	r1, [r7, #10]
 8002e94:	2300      	movs	r3, #0
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 fa3f 	bl	8003320 <I2C_TransferConfig>
 8002ea2:	e00f      	b.n	8002ec4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	8979      	ldrh	r1, [r7, #10]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fa2e 	bl	8003320 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d19a      	bne.n	8002e04 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f982 	bl	80031dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e01a      	b.n	8002f18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_I2C_Mem_Read+0x230>)
 8002ef6:	400b      	ands	r3, r1
 8002ef8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e000      	b.n	8002f18 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f16:	2302      	movs	r3, #2
  }
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	80002400 	.word	0x80002400
 8002f24:	fe00e800 	.word	0xfe00e800

08002f28 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f36:	b2db      	uxtb	r3, r3
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	4611      	mov	r1, r2
 8002f50:	461a      	mov	r2, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	817b      	strh	r3, [r7, #10]
 8002f56:	460b      	mov	r3, r1
 8002f58:	813b      	strh	r3, [r7, #8]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	8979      	ldrh	r1, [r7, #10]
 8002f64:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <I2C_RequestMemoryWrite+0xa4>)
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f9d7 	bl	8003320 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	69b9      	ldr	r1, [r7, #24]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f8f0 	bl	800315c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e02c      	b.n	8002fe0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d105      	bne.n	8002f98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	893a      	ldrh	r2, [r7, #8]
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	629a      	str	r2, [r3, #40]	; 0x28
 8002f96:	e015      	b.n	8002fc4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	893a      	ldrh	r2, [r7, #8]
 8002f9e:	0a12      	lsrs	r2, r2, #8
 8002fa0:	b292      	uxth	r2, r2
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	69b9      	ldr	r1, [r7, #24]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f8d6 	bl	800315c <I2C_WaitOnTXISFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e012      	b.n	8002fe0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	893a      	ldrh	r2, [r7, #8]
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2180      	movs	r1, #128	; 0x80
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f884 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	80002000 	.word	0x80002000

08002fec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	817b      	strh	r3, [r7, #10]
 8002ffe:	460b      	mov	r3, r1
 8003000:	813b      	strh	r3, [r7, #8]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	b2da      	uxtb	r2, r3
 800300a:	8979      	ldrh	r1, [r7, #10]
 800300c:	4b20      	ldr	r3, [pc, #128]	; (8003090 <I2C_RequestMemoryRead+0xa4>)
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	2300      	movs	r3, #0
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f984 	bl	8003320 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	69b9      	ldr	r1, [r7, #24]
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f89d 	bl	800315c <I2C_WaitOnTXISFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e02c      	b.n	8003086 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d105      	bne.n	800303e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	893a      	ldrh	r2, [r7, #8]
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	629a      	str	r2, [r3, #40]	; 0x28
 800303c:	e015      	b.n	800306a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	893a      	ldrh	r2, [r7, #8]
 8003044:	0a12      	lsrs	r2, r2, #8
 8003046:	b292      	uxth	r2, r2
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	69b9      	ldr	r1, [r7, #24]
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f883 	bl	800315c <I2C_WaitOnTXISFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e012      	b.n	8003086 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	893a      	ldrh	r2, [r7, #8]
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	2200      	movs	r2, #0
 8003072:	2140      	movs	r1, #64	; 0x40
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f831 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	80002000 	.word	0x80002000

08003094 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d103      	bne.n	80030b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2200      	movs	r2, #0
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d007      	beq.n	80030d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	6992      	ldr	r2, [r2, #24]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	619a      	str	r2, [r3, #24]
  }
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ec:	e022      	b.n	8003134 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d01e      	beq.n	8003134 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f6:	f7fe fae5 	bl	80016c4 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	1ad2      	subs	r2, r2, r3
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d802      	bhi.n	800310c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d113      	bne.n	8003134 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	f043 0220 	orr.w	r2, r3, #32
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e00f      	b.n	8003154 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	401a      	ands	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	429a      	cmp	r2, r3
 8003142:	bf0c      	ite	eq
 8003144:	2301      	moveq	r3, #1
 8003146:	2300      	movne	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	461a      	mov	r2, r3
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	429a      	cmp	r2, r3
 8003150:	d0cd      	beq.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003168:	e02c      	b.n	80031c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f870 	bl	8003254 <I2C_IsAcknowledgeFailed>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e02a      	b.n	80031d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d01e      	beq.n	80031c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003186:	f7fe fa9d 	bl	80016c4 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	1ad2      	subs	r2, r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	429a      	cmp	r2, r3
 8003194:	d802      	bhi.n	800319c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d113      	bne.n	80031c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a0:	f043 0220 	orr.w	r2, r3, #32
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e007      	b.n	80031d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d1cb      	bne.n	800316a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031e8:	e028      	b.n	800323c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f830 	bl	8003254 <I2C_IsAcknowledgeFailed>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e026      	b.n	800324c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fe:	f7fe fa61 	bl	80016c4 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	1ad2      	subs	r2, r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	429a      	cmp	r2, r3
 800320c:	d802      	bhi.n	8003214 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d113      	bne.n	800323c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003218:	f043 0220 	orr.w	r2, r3, #32
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e007      	b.n	800324c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b20      	cmp	r3, #32
 8003248:	d1cf      	bne.n	80031ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	2b10      	cmp	r3, #16
 800326c:	d151      	bne.n	8003312 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800326e:	e022      	b.n	80032b6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003276:	d01e      	beq.n	80032b6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003278:	f7fe fa24 	bl	80016c4 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	1ad2      	subs	r2, r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	429a      	cmp	r2, r3
 8003286:	d802      	bhi.n	800328e <I2C_IsAcknowledgeFailed+0x3a>
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d113      	bne.n	80032b6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	f043 0220 	orr.w	r2, r3, #32
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e02e      	b.n	8003314 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f003 0320 	and.w	r3, r3, #32
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	d1d5      	bne.n	8003270 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2210      	movs	r2, #16
 80032ca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2220      	movs	r2, #32
 80032d2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f7ff fedd 	bl	8003094 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	4b0d      	ldr	r3, [pc, #52]	; (800331c <I2C_IsAcknowledgeFailed+0xc8>)
 80032e6:	400b      	ands	r3, r1
 80032e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	f043 0204 	orr.w	r2, r3, #4
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	fe00e800 	.word	0xfe00e800

08003320 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	460b      	mov	r3, r1
 800332c:	817b      	strh	r3, [r7, #10]
 800332e:	4613      	mov	r3, r2
 8003330:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	0d5b      	lsrs	r3, r3, #21
 8003340:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <I2C_TransferConfig+0x54>)
 8003346:	4303      	orrs	r3, r0
 8003348:	43db      	mvns	r3, r3
 800334a:	4019      	ands	r1, r3
 800334c:	897b      	ldrh	r3, [r7, #10]
 800334e:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8003352:	7a7b      	ldrb	r3, [r7, #9]
 8003354:	041b      	lsls	r3, r3, #16
 8003356:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800335a:	4318      	orrs	r0, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4318      	orrs	r0, r3
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	4303      	orrs	r3, r0
 8003364:	430b      	orrs	r3, r1
 8003366:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	03ff63ff 	.word	0x03ff63ff

08003378 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <HAL_PWREx_GetVoltageRange+0x18>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40007000 	.word	0x40007000

08003394 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003398:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800339a:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033a2:	6053      	str	r3, [r2, #4]
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40007000 	.word	0x40007000

080033b4 <HAL_PWREx_DisableVddIO2>:
/**
  * @brief Disable VDDIO2 supply.
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 80033b8:	4a05      	ldr	r2, [pc, #20]	; (80033d0 <HAL_PWREx_DisableVddIO2+0x1c>)
 80033ba:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <HAL_PWREx_DisableVddIO2+0x1c>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c2:	6053      	str	r3, [r2, #4]
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40007000 	.word	0x40007000

080033d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e353      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e6:	4ba3      	ldr	r3, [pc, #652]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033f0:	4ba0      	ldr	r3, [pc, #640]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80df 	beq.w	80035c6 <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d007      	beq.n	800341e <HAL_RCC_OscConfig+0x4a>
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	2b0c      	cmp	r3, #12
 8003412:	f040 8086 	bne.w	8003522 <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b01      	cmp	r3, #1
 800341a:	f040 8082 	bne.w	8003522 <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800341e:	4b95      	ldr	r3, [pc, #596]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_RCC_OscConfig+0x62>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e32b      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1a      	ldr	r2, [r3, #32]
 800343a:	4b8e      	ldr	r3, [pc, #568]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <HAL_RCC_OscConfig+0x7c>
 8003446:	4b8b      	ldr	r3, [pc, #556]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800344e:	e005      	b.n	800345c <HAL_RCC_OscConfig+0x88>
 8003450:	4b88      	ldr	r3, [pc, #544]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003456:	091b      	lsrs	r3, r3, #4
 8003458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800345c:	429a      	cmp	r2, r3
 800345e:	d923      	bls.n	80034a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fccb 	bl	8003e00 <RCC_SetFlashLatencyFromMSIRange>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e30c      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003474:	4a7f      	ldr	r2, [pc, #508]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003476:	4b7f      	ldr	r3, [pc, #508]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f043 0308 	orr.w	r3, r3, #8
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	497c      	ldr	r1, [pc, #496]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003482:	4b7c      	ldr	r3, [pc, #496]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003492:	4978      	ldr	r1, [pc, #480]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003494:	4b77      	ldr	r3, [pc, #476]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]
 80034a6:	e022      	b.n	80034ee <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034a8:	4a72      	ldr	r2, [pc, #456]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 80034aa:	4b72      	ldr	r3, [pc, #456]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f043 0308 	orr.w	r3, r3, #8
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	496f      	ldr	r1, [pc, #444]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 80034b6:	4b6f      	ldr	r3, [pc, #444]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034c6:	496b      	ldr	r1, [pc, #428]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 80034c8:	4b6a      	ldr	r3, [pc, #424]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	4313      	orrs	r3, r2
 80034d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fc8e 	bl	8003e00 <RCC_SetFlashLatencyFromMSIRange>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e2cf      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034ee:	f000 fbb3 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 80034f2:	4601      	mov	r1, r0
 80034f4:	4b5f      	ldr	r3, [pc, #380]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	4a5e      	ldr	r2, [pc, #376]	; (8003678 <HAL_RCC_OscConfig+0x2a4>)
 8003500:	5cd3      	ldrb	r3, [r2, r3]
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	fa21 f303 	lsr.w	r3, r1, r3
 800350a:	4a5c      	ldr	r2, [pc, #368]	; (800367c <HAL_RCC_OscConfig+0x2a8>)
 800350c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800350e:	200f      	movs	r0, #15
 8003510:	f7fe f8a6 	bl	8001660 <HAL_InitTick>
 8003514:	4603      	mov	r3, r0
 8003516:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d052      	beq.n	80035c4 <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	e2b5      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d032      	beq.n	8003590 <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800352a:	4a52      	ldr	r2, [pc, #328]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 800352c:	4b51      	ldr	r3, [pc, #324]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003536:	f7fe f8c5 	bl	80016c4 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800353e:	f7fe f8c1 	bl	80016c4 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e29e      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003550:	4b48      	ldr	r3, [pc, #288]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800355c:	4a45      	ldr	r2, [pc, #276]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 800355e:	4b45      	ldr	r3, [pc, #276]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f043 0308 	orr.w	r3, r3, #8
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4942      	ldr	r1, [pc, #264]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 800356a:	4b42      	ldr	r3, [pc, #264]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800357a:	493e      	ldr	r1, [pc, #248]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 800357c:	4b3d      	ldr	r3, [pc, #244]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	021b      	lsls	r3, r3, #8
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]
 800358e:	e01a      	b.n	80035c6 <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003590:	4a38      	ldr	r2, [pc, #224]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003592:	4b38      	ldr	r3, [pc, #224]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 0301 	bic.w	r3, r3, #1
 800359a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800359c:	f7fe f892 	bl	80016c4 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035a4:	f7fe f88e 	bl	80016c4 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e26b      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035b6:	4b2f      	ldr	r3, [pc, #188]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x1d0>
 80035c2:	e000      	b.n	80035c6 <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d072      	beq.n	80036b8 <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_OscConfig+0x210>
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	d10e      	bne.n	80035fc <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d10b      	bne.n	80035fc <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	4b23      	ldr	r3, [pc, #140]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d062      	beq.n	80036b6 <HAL_RCC_OscConfig+0x2e2>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d15e      	bne.n	80036b6 <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e248      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003604:	d106      	bne.n	8003614 <HAL_RCC_OscConfig+0x240>
 8003606:	4a1b      	ldr	r2, [pc, #108]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003608:	4b1a      	ldr	r3, [pc, #104]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e01d      	b.n	8003650 <HAL_RCC_OscConfig+0x27c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800361c:	d10c      	bne.n	8003638 <HAL_RCC_OscConfig+0x264>
 800361e:	4a15      	ldr	r2, [pc, #84]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003620:	4b14      	ldr	r3, [pc, #80]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	4a12      	ldr	r2, [pc, #72]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 800362c:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e00b      	b.n	8003650 <HAL_RCC_OscConfig+0x27c>
 8003638:	4a0e      	ldr	r2, [pc, #56]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 800363a:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800364e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d01a      	beq.n	800368e <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fe f834 	bl	80016c4 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800365e:	e00f      	b.n	8003680 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003660:	f7fe f830 	bl	80016c4 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d908      	bls.n	8003680 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e20d      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
 8003672:	bf00      	nop
 8003674:	40021000 	.word	0x40021000
 8003678:	08007374 	.word	0x08007374
 800367c:	2000003c 	.word	0x2000003c
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003680:	4bae      	ldr	r3, [pc, #696]	; (800393c <HAL_RCC_OscConfig+0x568>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0e9      	beq.n	8003660 <HAL_RCC_OscConfig+0x28c>
 800368c:	e014      	b.n	80036b8 <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368e:	f7fe f819 	bl	80016c4 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003696:	f7fe f815 	bl	80016c4 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b64      	cmp	r3, #100	; 0x64
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e1f2      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036a8:	4ba4      	ldr	r3, [pc, #656]	; (800393c <HAL_RCC_OscConfig+0x568>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f0      	bne.n	8003696 <HAL_RCC_OscConfig+0x2c2>
 80036b4:	e000      	b.n	80036b8 <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d060      	beq.n	8003786 <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d005      	beq.n	80036d6 <HAL_RCC_OscConfig+0x302>
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	2b0c      	cmp	r3, #12
 80036ce:	d119      	bne.n	8003704 <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d116      	bne.n	8003704 <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036d6:	4b99      	ldr	r3, [pc, #612]	; (800393c <HAL_RCC_OscConfig+0x568>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_RCC_OscConfig+0x31a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e1cf      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ee:	4993      	ldr	r1, [pc, #588]	; (800393c <HAL_RCC_OscConfig+0x568>)
 80036f0:	4b92      	ldr	r3, [pc, #584]	; (800393c <HAL_RCC_OscConfig+0x568>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	4313      	orrs	r3, r2
 8003700:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003702:	e040      	b.n	8003786 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d023      	beq.n	8003754 <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800370c:	4a8b      	ldr	r2, [pc, #556]	; (800393c <HAL_RCC_OscConfig+0x568>)
 800370e:	4b8b      	ldr	r3, [pc, #556]	; (800393c <HAL_RCC_OscConfig+0x568>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fd ffd4 	bl	80016c4 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003720:	f7fd ffd0 	bl	80016c4 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e1ad      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003732:	4b82      	ldr	r3, [pc, #520]	; (800393c <HAL_RCC_OscConfig+0x568>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373e:	497f      	ldr	r1, [pc, #508]	; (800393c <HAL_RCC_OscConfig+0x568>)
 8003740:	4b7e      	ldr	r3, [pc, #504]	; (800393c <HAL_RCC_OscConfig+0x568>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	061b      	lsls	r3, r3, #24
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
 8003752:	e018      	b.n	8003786 <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003754:	4a79      	ldr	r2, [pc, #484]	; (800393c <HAL_RCC_OscConfig+0x568>)
 8003756:	4b79      	ldr	r3, [pc, #484]	; (800393c <HAL_RCC_OscConfig+0x568>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800375e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fd ffb0 	bl	80016c4 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003768:	f7fd ffac 	bl	80016c4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e189      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800377a:	4b70      	ldr	r3, [pc, #448]	; (800393c <HAL_RCC_OscConfig+0x568>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d03c      	beq.n	800380c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d01c      	beq.n	80037d4 <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800379a:	4a68      	ldr	r2, [pc, #416]	; (800393c <HAL_RCC_OscConfig+0x568>)
 800379c:	4b67      	ldr	r3, [pc, #412]	; (800393c <HAL_RCC_OscConfig+0x568>)
 800379e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037aa:	f7fd ff8b 	bl	80016c4 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b2:	f7fd ff87 	bl	80016c4 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e164      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037c4:	4b5d      	ldr	r3, [pc, #372]	; (800393c <HAL_RCC_OscConfig+0x568>)
 80037c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0ef      	beq.n	80037b2 <HAL_RCC_OscConfig+0x3de>
 80037d2:	e01b      	b.n	800380c <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d4:	4a59      	ldr	r2, [pc, #356]	; (800393c <HAL_RCC_OscConfig+0x568>)
 80037d6:	4b59      	ldr	r3, [pc, #356]	; (800393c <HAL_RCC_OscConfig+0x568>)
 80037d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e4:	f7fd ff6e 	bl	80016c4 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ec:	f7fd ff6a 	bl	80016c4 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e147      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037fe:	4b4f      	ldr	r3, [pc, #316]	; (800393c <HAL_RCC_OscConfig+0x568>)
 8003800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1ef      	bne.n	80037ec <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80a5 	beq.w	8003964 <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800381e:	4b47      	ldr	r3, [pc, #284]	; (800393c <HAL_RCC_OscConfig+0x568>)
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10d      	bne.n	8003846 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800382a:	4a44      	ldr	r2, [pc, #272]	; (800393c <HAL_RCC_OscConfig+0x568>)
 800382c:	4b43      	ldr	r3, [pc, #268]	; (800393c <HAL_RCC_OscConfig+0x568>)
 800382e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003834:	6593      	str	r3, [r2, #88]	; 0x58
 8003836:	4b41      	ldr	r3, [pc, #260]	; (800393c <HAL_RCC_OscConfig+0x568>)
 8003838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003842:	2301      	movs	r3, #1
 8003844:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003846:	4b3e      	ldr	r3, [pc, #248]	; (8003940 <HAL_RCC_OscConfig+0x56c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d118      	bne.n	8003884 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003852:	4a3b      	ldr	r2, [pc, #236]	; (8003940 <HAL_RCC_OscConfig+0x56c>)
 8003854:	4b3a      	ldr	r3, [pc, #232]	; (8003940 <HAL_RCC_OscConfig+0x56c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800385c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800385e:	f7fd ff31 	bl	80016c4 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003866:	f7fd ff2d 	bl	80016c4 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e10a      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003878:	4b31      	ldr	r3, [pc, #196]	; (8003940 <HAL_RCC_OscConfig+0x56c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d108      	bne.n	800389e <HAL_RCC_OscConfig+0x4ca>
 800388c:	4a2b      	ldr	r2, [pc, #172]	; (800393c <HAL_RCC_OscConfig+0x568>)
 800388e:	4b2b      	ldr	r3, [pc, #172]	; (800393c <HAL_RCC_OscConfig+0x568>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800389c:	e024      	b.n	80038e8 <HAL_RCC_OscConfig+0x514>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b05      	cmp	r3, #5
 80038a4:	d110      	bne.n	80038c8 <HAL_RCC_OscConfig+0x4f4>
 80038a6:	4a25      	ldr	r2, [pc, #148]	; (800393c <HAL_RCC_OscConfig+0x568>)
 80038a8:	4b24      	ldr	r3, [pc, #144]	; (800393c <HAL_RCC_OscConfig+0x568>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	f043 0304 	orr.w	r3, r3, #4
 80038b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038b6:	4a21      	ldr	r2, [pc, #132]	; (800393c <HAL_RCC_OscConfig+0x568>)
 80038b8:	4b20      	ldr	r3, [pc, #128]	; (800393c <HAL_RCC_OscConfig+0x568>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038c6:	e00f      	b.n	80038e8 <HAL_RCC_OscConfig+0x514>
 80038c8:	4a1c      	ldr	r2, [pc, #112]	; (800393c <HAL_RCC_OscConfig+0x568>)
 80038ca:	4b1c      	ldr	r3, [pc, #112]	; (800393c <HAL_RCC_OscConfig+0x568>)
 80038cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d0:	f023 0301 	bic.w	r3, r3, #1
 80038d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038d8:	4a18      	ldr	r2, [pc, #96]	; (800393c <HAL_RCC_OscConfig+0x568>)
 80038da:	4b18      	ldr	r3, [pc, #96]	; (800393c <HAL_RCC_OscConfig+0x568>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e0:	f023 0304 	bic.w	r3, r3, #4
 80038e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d016      	beq.n	800391e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f0:	f7fd fee8 	bl	80016c4 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f6:	e00a      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f8:	f7fd fee4 	bl	80016c4 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	; 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e0bf      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800390e:	4b0b      	ldr	r3, [pc, #44]	; (800393c <HAL_RCC_OscConfig+0x568>)
 8003910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0ed      	beq.n	80038f8 <HAL_RCC_OscConfig+0x524>
 800391c:	e019      	b.n	8003952 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391e:	f7fd fed1 	bl	80016c4 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003924:	e00e      	b.n	8003944 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003926:	f7fd fecd 	bl	80016c4 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	f241 3288 	movw	r2, #5000	; 0x1388
 8003934:	4293      	cmp	r3, r2
 8003936:	d905      	bls.n	8003944 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e0a8      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
 800393c:	40021000 	.word	0x40021000
 8003940:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003944:	4b54      	ldr	r3, [pc, #336]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e9      	bne.n	8003926 <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003952:	7ffb      	ldrb	r3, [r7, #31]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d105      	bne.n	8003964 <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003958:	4a4f      	ldr	r2, [pc, #316]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 800395a:	4b4f      	ldr	r3, [pc, #316]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 800395c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003962:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 808f 	beq.w	8003a8c <HAL_RCC_OscConfig+0x6b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b0c      	cmp	r3, #12
 8003972:	f000 8089 	beq.w	8003a88 <HAL_RCC_OscConfig+0x6b4>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397a:	2b02      	cmp	r3, #2
 800397c:	d156      	bne.n	8003a2c <HAL_RCC_OscConfig+0x658>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397e:	4a46      	ldr	r2, [pc, #280]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003980:	4b45      	ldr	r3, [pc, #276]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7fd fe9b 	bl	80016c4 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003992:	f7fd fe97 	bl	80016c4 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e074      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a4:	4b3c      	ldr	r3, [pc, #240]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f0      	bne.n	8003992 <HAL_RCC_OscConfig+0x5be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039b0:	4939      	ldr	r1, [pc, #228]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	3b01      	subs	r3, #1
 80039b8:	011a      	lsls	r2, r3, #4
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	045b      	lsls	r3, r3, #17
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d6:	085b      	lsrs	r3, r3, #1
 80039d8:	3b01      	subs	r3, #1
 80039da:	055b      	lsls	r3, r3, #21
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	3b01      	subs	r3, #1
 80039e6:	065b      	lsls	r3, r3, #25
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ec:	4a2a      	ldr	r2, [pc, #168]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80039ee:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039f8:	4a27      	ldr	r2, [pc, #156]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80039fa:	4b27      	ldr	r3, [pc, #156]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a02:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7fd fe5e 	bl	80016c4 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x64a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0c:	f7fd fe5a 	bl	80016c4 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x64a>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e037      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a1e:	4b1e      	ldr	r3, [pc, #120]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0x638>
 8003a2a:	e02f      	b.n	8003a8c <HAL_RCC_OscConfig+0x6b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2c:	4a1a      	ldr	r2, [pc, #104]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a2e:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a36:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003a38:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d105      	bne.n	8003a50 <HAL_RCC_OscConfig+0x67c>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a44:	4a14      	ldr	r2, [pc, #80]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a46:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a50:	4a11      	ldr	r2, [pc, #68]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a52:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5e:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fd fe30 	bl	80016c4 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x6a6>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a68:	f7fd fe2c 	bl	80016c4 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e009      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x694>
 8003a86:	e001      	b.n	8003a8c <HAL_RCC_OscConfig+0x6b8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <HAL_RCC_OscConfig+0x6ba>
    }
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3720      	adds	r7, #32
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000

08003a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0c6      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab0:	4b65      	ldr	r3, [pc, #404]	; (8003c48 <HAL_RCC_ClockConfig+0x1ac>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0207 	and.w	r2, r3, #7
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d210      	bcs.n	8003ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003abe:	4962      	ldr	r1, [pc, #392]	; (8003c48 <HAL_RCC_ClockConfig+0x1ac>)
 8003ac0:	4b61      	ldr	r3, [pc, #388]	; (8003c48 <HAL_RCC_ClockConfig+0x1ac>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f023 0207 	bic.w	r2, r3, #7
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ace:	4b5e      	ldr	r3, [pc, #376]	; (8003c48 <HAL_RCC_ClockConfig+0x1ac>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0207 	and.w	r2, r3, #7
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0ae      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d04c      	beq.n	8003b86 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d107      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af4:	4b55      	ldr	r3, [pc, #340]	; (8003c4c <HAL_RCC_ClockConfig+0x1b0>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d121      	bne.n	8003b44 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e09c      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d107      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b0c:	4b4f      	ldr	r3, [pc, #316]	; (8003c4c <HAL_RCC_ClockConfig+0x1b0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d115      	bne.n	8003b44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e090      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b24:	4b49      	ldr	r3, [pc, #292]	; (8003c4c <HAL_RCC_ClockConfig+0x1b0>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d109      	bne.n	8003b44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e084      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b34:	4b45      	ldr	r3, [pc, #276]	; (8003c4c <HAL_RCC_ClockConfig+0x1b0>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e07c      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b44:	4941      	ldr	r1, [pc, #260]	; (8003c4c <HAL_RCC_ClockConfig+0x1b0>)
 8003b46:	4b41      	ldr	r3, [pc, #260]	; (8003c4c <HAL_RCC_ClockConfig+0x1b0>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f023 0203 	bic.w	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b56:	f7fd fdb5 	bl	80016c4 <HAL_GetTick>
 8003b5a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5c:	e00a      	b.n	8003b74 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b5e:	f7fd fdb1 	bl	80016c4 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e064      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b74:	4b35      	ldr	r3, [pc, #212]	; (8003c4c <HAL_RCC_ClockConfig+0x1b0>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 020c 	and.w	r2, r3, #12
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d1eb      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b92:	492e      	ldr	r1, [pc, #184]	; (8003c4c <HAL_RCC_ClockConfig+0x1b0>)
 8003b94:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <HAL_RCC_ClockConfig+0x1b0>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba4:	4b28      	ldr	r3, [pc, #160]	; (8003c48 <HAL_RCC_ClockConfig+0x1ac>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0207 	and.w	r2, r3, #7
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d910      	bls.n	8003bd4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb2:	4925      	ldr	r1, [pc, #148]	; (8003c48 <HAL_RCC_ClockConfig+0x1ac>)
 8003bb4:	4b24      	ldr	r3, [pc, #144]	; (8003c48 <HAL_RCC_ClockConfig+0x1ac>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 0207 	bic.w	r2, r3, #7
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc2:	4b21      	ldr	r3, [pc, #132]	; (8003c48 <HAL_RCC_ClockConfig+0x1ac>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0207 	and.w	r2, r3, #7
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e034      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be0:	491a      	ldr	r1, [pc, #104]	; (8003c4c <HAL_RCC_ClockConfig+0x1b0>)
 8003be2:	4b1a      	ldr	r3, [pc, #104]	; (8003c4c <HAL_RCC_ClockConfig+0x1b0>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bfe:	4913      	ldr	r1, [pc, #76]	; (8003c4c <HAL_RCC_ClockConfig+0x1b0>)
 8003c00:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <HAL_RCC_ClockConfig+0x1b0>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c12:	f000 f821 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8003c16:	4601      	mov	r1, r0
 8003c18:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <HAL_RCC_ClockConfig+0x1b0>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	091b      	lsrs	r3, r3, #4
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	4a0b      	ldr	r2, [pc, #44]	; (8003c50 <HAL_RCC_ClockConfig+0x1b4>)
 8003c24:	5cd3      	ldrb	r3, [r2, r3]
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8003c2e:	4a09      	ldr	r2, [pc, #36]	; (8003c54 <HAL_RCC_ClockConfig+0x1b8>)
 8003c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8003c32:	200f      	movs	r0, #15
 8003c34:	f7fd fd14 	bl	8001660 <HAL_InitTick>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c3c:	7afb      	ldrb	r3, [r7, #11]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40022000 	.word	0x40022000
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	08007374 	.word	0x08007374
 8003c54:	2000003c 	.word	0x2000003c

08003c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b089      	sub	sp, #36	; 0x24
 8003c5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	2300      	movs	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c66:	4b46      	ldr	r3, [pc, #280]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x128>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c70:	4b43      	ldr	r3, [pc, #268]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x128>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_RCC_GetSysClockFreq+0x34>
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b0c      	cmp	r3, #12
 8003c84:	d121      	bne.n	8003cca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d11e      	bne.n	8003cca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c8c:	4b3c      	ldr	r3, [pc, #240]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x128>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d107      	bne.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c98:	4b39      	ldr	r3, [pc, #228]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x128>)
 8003c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	e005      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ca8:	4b35      	ldr	r3, [pc, #212]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x128>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003cb4:	4a33      	ldr	r2, [pc, #204]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10d      	bne.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cc8:	e00a      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d102      	bne.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cd0:	4b2d      	ldr	r3, [pc, #180]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x130>)
 8003cd2:	61bb      	str	r3, [r7, #24]
 8003cd4:	e004      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d101      	bne.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cdc:	4b2b      	ldr	r3, [pc, #172]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x134>)
 8003cde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b0c      	cmp	r3, #12
 8003ce4:	d145      	bne.n	8003d72 <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ce6:	4b26      	ldr	r3, [pc, #152]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x128>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cf0:	4b23      	ldr	r3, [pc, #140]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x128>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d002      	beq.n	8003d0a <HAL_RCC_GetSysClockFreq+0xb2>
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d00d      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0xcc>
 8003d08:	e019      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0xe6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d0a:	4a1f      	ldr	r2, [pc, #124]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x130>)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d12:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x128>)
 8003d14:	68d2      	ldr	r2, [r2, #12]
 8003d16:	0a12      	lsrs	r2, r2, #8
 8003d18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d1c:	fb02 f303 	mul.w	r3, r2, r3
 8003d20:	617b      	str	r3, [r7, #20]
      break;
 8003d22:	e019      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d24:	4a19      	ldr	r2, [pc, #100]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x134>)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x128>)
 8003d2e:	68d2      	ldr	r2, [r2, #12]
 8003d30:	0a12      	lsrs	r2, r2, #8
 8003d32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	617b      	str	r3, [r7, #20]
      break;
 8003d3c:	e00c      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d46:	4a0e      	ldr	r2, [pc, #56]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x128>)
 8003d48:	68d2      	ldr	r2, [r2, #12]
 8003d4a:	0a12      	lsrs	r2, r2, #8
 8003d4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d50:	fb02 f303 	mul.w	r3, r2, r3
 8003d54:	617b      	str	r3, [r7, #20]
      break;
 8003d56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x128>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	0e5b      	lsrs	r3, r3, #25
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	3301      	adds	r3, #1
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d72:	69bb      	ldr	r3, [r7, #24]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3724      	adds	r7, #36	; 0x24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	40021000 	.word	0x40021000
 8003d84:	0800738c 	.word	0x0800738c
 8003d88:	00f42400 	.word	0x00f42400
 8003d8c:	007a1200 	.word	0x007a1200

08003d90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d94:	4b03      	ldr	r3, [pc, #12]	; (8003da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d96:	681b      	ldr	r3, [r3, #0]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	2000003c 	.word	0x2000003c

08003da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dac:	f7ff fff0 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003db0:	4601      	mov	r1, r0
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dbe:	5cd3      	ldrb	r3, [r2, r3]
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	08007384 	.word	0x08007384

08003dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003dd8:	f7ff ffda 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003ddc:	4601      	mov	r1, r0
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	0adb      	lsrs	r3, r3, #11
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	4a04      	ldr	r2, [pc, #16]	; (8003dfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dea:	5cd3      	ldrb	r3, [r2, r3]
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	08007384 	.word	0x08007384

08003e00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e08:	2300      	movs	r3, #0
 8003e0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e0c:	4b2a      	ldr	r3, [pc, #168]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e18:	f7ff faae 	bl	8003378 <HAL_PWREx_GetVoltageRange>
 8003e1c:	6178      	str	r0, [r7, #20]
 8003e1e:	e014      	b.n	8003e4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e20:	4a25      	ldr	r2, [pc, #148]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e22:	4b25      	ldr	r3, [pc, #148]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e2c:	4b22      	ldr	r3, [pc, #136]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e38:	f7ff fa9e 	bl	8003378 <HAL_PWREx_GetVoltageRange>
 8003e3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e3e:	4a1e      	ldr	r2, [pc, #120]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e40:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e50:	d10b      	bne.n	8003e6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b80      	cmp	r3, #128	; 0x80
 8003e56:	d919      	bls.n	8003e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2ba0      	cmp	r3, #160	; 0xa0
 8003e5c:	d902      	bls.n	8003e64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e5e:	2302      	movs	r3, #2
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	e013      	b.n	8003e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e64:	2301      	movs	r3, #1
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	e010      	b.n	8003e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b80      	cmp	r3, #128	; 0x80
 8003e6e:	d902      	bls.n	8003e76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e70:	2303      	movs	r3, #3
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	e00a      	b.n	8003e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b80      	cmp	r3, #128	; 0x80
 8003e7a:	d102      	bne.n	8003e82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	e004      	b.n	8003e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b70      	cmp	r3, #112	; 0x70
 8003e86:	d101      	bne.n	8003e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e88:	2301      	movs	r3, #1
 8003e8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e8c:	490b      	ldr	r1, [pc, #44]	; (8003ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 0207 	bic.w	r2, r3, #7
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e9c:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0207 	and.w	r2, r3, #7
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d001      	beq.n	8003eae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40022000 	.word	0x40022000

08003ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ec8:	2300      	movs	r3, #0
 8003eca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ecc:	2300      	movs	r3, #0
 8003ece:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d03f      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ee4:	d01c      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eea:	d802      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00e      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003ef0:	e01f      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003ef2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ef6:	d003      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003ef8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003efc:	d01c      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003efe:	e018      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f00:	4a85      	ldr	r2, [pc, #532]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f02:	4b85      	ldr	r3, [pc, #532]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f0c:	e015      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3304      	adds	r3, #4
 8003f12:	2100      	movs	r1, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 ff31 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f1e:	e00c      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3320      	adds	r3, #32
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f001 f818 	bl	8004f5c <RCCEx_PLLSAI2_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f30:	e003      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	74fb      	strb	r3, [r7, #19]
      break;
 8003f36:	e000      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003f38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f3a:	7cfb      	ldrb	r3, [r7, #19]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10b      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f40:	4975      	ldr	r1, [pc, #468]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f42:	4b75      	ldr	r3, [pc, #468]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f56:	e001      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f58:	7cfb      	ldrb	r3, [r7, #19]
 8003f5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d03f      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f70:	d01c      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003f72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f76:	d802      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00e      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003f7c:	e01f      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003f7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f82:	d003      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003f84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f88:	d01c      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003f8a:	e018      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f8c:	4a62      	ldr	r2, [pc, #392]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f8e:	4b62      	ldr	r3, [pc, #392]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f98:	e015      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 feeb 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003faa:	e00c      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3320      	adds	r3, #32
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 ffd2 	bl	8004f5c <RCCEx_PLLSAI2_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fbc:	e003      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	74fb      	strb	r3, [r7, #19]
      break;
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc6:	7cfb      	ldrb	r3, [r7, #19]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10b      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fcc:	4952      	ldr	r1, [pc, #328]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fce:	4b52      	ldr	r3, [pc, #328]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fe2:	e001      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80a0 	beq.w	8004136 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ffa:	4b47      	ldr	r3, [pc, #284]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800400a:	2300      	movs	r3, #0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00d      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004010:	4a41      	ldr	r2, [pc, #260]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004012:	4b41      	ldr	r3, [pc, #260]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401a:	6593      	str	r3, [r2, #88]	; 0x58
 800401c:	4b3e      	ldr	r3, [pc, #248]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800401e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004028:	2301      	movs	r3, #1
 800402a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800402c:	4a3b      	ldr	r2, [pc, #236]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800402e:	4b3b      	ldr	r3, [pc, #236]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004036:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004038:	f7fd fb44 	bl	80016c4 <HAL_GetTick>
 800403c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800403e:	e009      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004040:	f7fd fb40 	bl	80016c4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d902      	bls.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	74fb      	strb	r3, [r7, #19]
        break;
 8004052:	e005      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004054:	4b31      	ldr	r3, [pc, #196]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0ef      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004060:	7cfb      	ldrb	r3, [r7, #19]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d15c      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004066:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004070:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01f      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	429a      	cmp	r2, r3
 8004082:	d019      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004084:	4b24      	ldr	r3, [pc, #144]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004090:	4a21      	ldr	r2, [pc, #132]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004092:	4b21      	ldr	r3, [pc, #132]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040a0:	4a1d      	ldr	r2, [pc, #116]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040a2:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040b0:	4a19      	ldr	r2, [pc, #100]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d016      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fd faff 	bl	80016c4 <HAL_GetTick>
 80040c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c8:	e00b      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ca:	f7fd fafb 	bl	80016c4 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d8:	4293      	cmp	r3, r2
 80040da:	d902      	bls.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	74fb      	strb	r3, [r7, #19]
            break;
 80040e0:	e006      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e2:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0ec      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80040f0:	7cfb      	ldrb	r3, [r7, #19]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10c      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040f6:	4908      	ldr	r1, [pc, #32]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040f8:	4b07      	ldr	r3, [pc, #28]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800410e:	e009      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004110:	7cfb      	ldrb	r3, [r7, #19]
 8004112:	74bb      	strb	r3, [r7, #18]
 8004114:	e006      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004116:	bf00      	nop
 8004118:	40021000 	.word	0x40021000
 800411c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004120:	7cfb      	ldrb	r3, [r7, #19]
 8004122:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004124:	7c7b      	ldrb	r3, [r7, #17]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d105      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800412a:	4a9e      	ldr	r2, [pc, #632]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800412c:	4b9d      	ldr	r3, [pc, #628]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800412e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004134:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004142:	4998      	ldr	r1, [pc, #608]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004144:	4b97      	ldr	r3, [pc, #604]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414a:	f023 0203 	bic.w	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004164:	498f      	ldr	r1, [pc, #572]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004166:	4b8f      	ldr	r3, [pc, #572]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416c:	f023 020c 	bic.w	r2, r3, #12
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004186:	4987      	ldr	r1, [pc, #540]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004188:	4b86      	ldr	r3, [pc, #536]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041a8:	497e      	ldr	r1, [pc, #504]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041aa:	4b7e      	ldr	r3, [pc, #504]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041ca:	4976      	ldr	r1, [pc, #472]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041cc:	4b75      	ldr	r3, [pc, #468]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041ec:	496d      	ldr	r1, [pc, #436]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041ee:	4b6d      	ldr	r3, [pc, #436]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800420e:	4965      	ldr	r1, [pc, #404]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004210:	4b64      	ldr	r3, [pc, #400]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004230:	495c      	ldr	r1, [pc, #368]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004232:	4b5c      	ldr	r3, [pc, #368]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004238:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004252:	4954      	ldr	r1, [pc, #336]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004254:	4b53      	ldr	r3, [pc, #332]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004274:	494b      	ldr	r1, [pc, #300]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004276:	4b4b      	ldr	r3, [pc, #300]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004296:	4943      	ldr	r1, [pc, #268]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004298:	4b42      	ldr	r3, [pc, #264]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d028      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042b8:	493a      	ldr	r1, [pc, #232]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042ba:	4b3a      	ldr	r3, [pc, #232]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042d6:	d106      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d8:	4a32      	ldr	r2, [pc, #200]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042da:	4b32      	ldr	r3, [pc, #200]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042e2:	60d3      	str	r3, [r2, #12]
 80042e4:	e011      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042ee:	d10c      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	2101      	movs	r1, #1
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fd40 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004306:	7cfb      	ldrb	r3, [r7, #19]
 8004308:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d028      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004316:	4923      	ldr	r1, [pc, #140]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004318:	4b22      	ldr	r3, [pc, #136]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004334:	d106      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004336:	4a1b      	ldr	r2, [pc, #108]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004338:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004340:	60d3      	str	r3, [r2, #12]
 8004342:	e011      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800434c:	d10c      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3304      	adds	r3, #4
 8004352:	2101      	movs	r1, #1
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fd11 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 800435a:	4603      	mov	r3, r0
 800435c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800435e:	7cfb      	ldrb	r3, [r7, #19]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004364:	7cfb      	ldrb	r3, [r7, #19]
 8004366:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d02b      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004374:	490b      	ldr	r1, [pc, #44]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004392:	d109      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004394:	4a03      	ldr	r2, [pc, #12]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004396:	4b03      	ldr	r3, [pc, #12]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800439e:	60d3      	str	r3, [r2, #12]
 80043a0:	e014      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80043a2:	bf00      	nop
 80043a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043b0:	d10c      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3304      	adds	r3, #4
 80043b6:	2101      	movs	r1, #1
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fcdf 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043c2:	7cfb      	ldrb	r3, [r7, #19]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d02f      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043d8:	492b      	ldr	r1, [pc, #172]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043da:	4b2b      	ldr	r3, [pc, #172]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043f6:	d10d      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	2102      	movs	r1, #2
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fcbc 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d014      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800440e:	7cfb      	ldrb	r3, [r7, #19]
 8004410:	74bb      	strb	r3, [r7, #18]
 8004412:	e011      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800441c:	d10c      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3320      	adds	r3, #32
 8004422:	2102      	movs	r1, #2
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fd99 	bl	8004f5c <RCCEx_PLLSAI2_Config>
 800442a:	4603      	mov	r3, r0
 800442c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800442e:	7cfb      	ldrb	r3, [r7, #19]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004434:	7cfb      	ldrb	r3, [r7, #19]
 8004436:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004444:	4910      	ldr	r1, [pc, #64]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004446:	4b10      	ldr	r3, [pc, #64]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00b      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004466:	4908      	ldr	r1, [pc, #32]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004468:	4b07      	ldr	r3, [pc, #28]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800447e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000

0800448c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800449e:	d137      	bne.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80044a0:	4bb8      	ldr	r3, [pc, #736]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044aa:	617b      	str	r3, [r7, #20]

    switch(srcclk)
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b2:	d014      	beq.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80044b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b8:	d01e      	beq.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 80044ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044be:	d001      	beq.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80044c0:	f000 bc53 	b.w	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80044c4:	4baf      	ldr	r3, [pc, #700]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	f040 8446 	bne.w	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 80044d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044d8:	61fb      	str	r3, [r7, #28]
      break;
 80044da:	f000 bc41 	b.w	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80044de:	4ba9      	ldr	r3, [pc, #676]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	f040 843b 	bne.w	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
        frequency = LSI_VALUE;
 80044ee:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80044f2:	61fb      	str	r3, [r7, #28]
      break;
 80044f4:	f000 bc36 	b.w	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80044f8:	4ba2      	ldr	r3, [pc, #648]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004504:	f040 8430 	bne.w	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 8004508:	4b9f      	ldr	r3, [pc, #636]	; (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800450a:	61fb      	str	r3, [r7, #28]
      break;
 800450c:	f000 bc2c 	b.w	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004510:	4b9c      	ldr	r3, [pc, #624]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2b02      	cmp	r3, #2
 800451e:	d023      	beq.n	8004568 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004520:	2b03      	cmp	r3, #3
 8004522:	d02e      	beq.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004524:	2b01      	cmp	r3, #1
 8004526:	d139      	bne.n	800459c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004528:	4b96      	ldr	r3, [pc, #600]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b02      	cmp	r3, #2
 8004532:	d116      	bne.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004534:	4b93      	ldr	r3, [pc, #588]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8004540:	4b90      	ldr	r3, [pc, #576]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	e005      	b.n	8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 800454c:	4b8d      	ldr	r3, [pc, #564]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800454e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	4a8c      	ldr	r2, [pc, #560]	; (800478c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800455a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800455e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004560:	e01f      	b.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	61bb      	str	r3, [r7, #24]
      break;
 8004566:	e01c      	b.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004568:	4b86      	ldr	r3, [pc, #536]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004574:	d102      	bne.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8004576:	4b86      	ldr	r3, [pc, #536]	; (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004578:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800457a:	e012      	b.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	61bb      	str	r3, [r7, #24]
      break;
 8004580:	e00f      	b.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004582:	4b80      	ldr	r3, [pc, #512]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800458e:	d102      	bne.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8004590:	4b80      	ldr	r3, [pc, #512]	; (8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8004592:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004594:	e005      	b.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
      break;
 800459a:	e002      	b.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	61bb      	str	r3, [r7, #24]
      break;
 80045a0:	bf00      	nop
    }

    switch(PeriphClk)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045a8:	f000 8337 	beq.w	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 80045ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b0:	d825      	bhi.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 80045b2:	2b10      	cmp	r3, #16
 80045b4:	f000 81df 	beq.w	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80045b8:	2b10      	cmp	r3, #16
 80045ba:	d80f      	bhi.n	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 80045bc:	2b02      	cmp	r3, #2
 80045be:	f000 8128 	beq.w	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d803      	bhi.n	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	f000 80ec 	beq.w	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80045cc:	e3cd      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	f000 8169 	beq.w	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	f000 819a 	beq.w	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 80045da:	e3c6      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	f000 82b3 	beq.w	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 80045e2:	2b40      	cmp	r3, #64	; 0x40
 80045e4:	d803      	bhi.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80045e6:	2b20      	cmp	r3, #32
 80045e8:	f000 81fd 	beq.w	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 80045ec:	e3bd      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80045ee:	2b80      	cmp	r3, #128	; 0x80
 80045f0:	f000 82cd 	beq.w	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80045f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f8:	f000 82ec 	beq.w	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 80045fc:	e3b5      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80045fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004602:	f000 822d 	beq.w	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8004606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800460a:	d811      	bhi.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800460c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004610:	d021      	beq.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8004612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004616:	d804      	bhi.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8004618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461c:	f000 833e 	beq.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 8004620:	e3a3      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8004622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004626:	d01d      	beq.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8004628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800462c:	d021      	beq.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 800462e:	e39c      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8004630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004634:	f000 8277 	beq.w	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 8004638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800463c:	d804      	bhi.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800463e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004642:	f000 8371 	beq.w	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 8004646:	e390      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8004648:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800464c:	d011      	beq.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800464e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004652:	d00e      	beq.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8004654:	e389      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004656:	69b9      	ldr	r1, [r7, #24]
 8004658:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800465c:	f000 fd58 	bl	8005110 <RCCEx_GetSAIxPeriphCLKFreq>
 8004660:	61f8      	str	r0, [r7, #28]
      break;
 8004662:	e382      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004664:	69b9      	ldr	r1, [r7, #24]
 8004666:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800466a:	f000 fd51 	bl	8005110 <RCCEx_GetSAIxPeriphCLKFreq>
 800466e:	61f8      	str	r0, [r7, #28]
      break;
 8004670:	e37b      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004672:	4b44      	ldr	r3, [pc, #272]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004678:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800467c:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004684:	d023      	beq.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 8004686:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800468a:	d003      	beq.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800468c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004690:	d04a      	beq.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8004692:	e086      	b.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004694:	4b3b      	ldr	r3, [pc, #236]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b02      	cmp	r3, #2
 800469e:	d17b      	bne.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80046a0:	4b38      	ldr	r3, [pc, #224]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d005      	beq.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80046ac:	4b35      	ldr	r3, [pc, #212]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	091b      	lsrs	r3, r3, #4
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	e005      	b.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 80046b8:	4b32      	ldr	r3, [pc, #200]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046be:	0a1b      	lsrs	r3, r3, #8
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	4a31      	ldr	r2, [pc, #196]	; (800478c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80046c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ca:	61fb      	str	r3, [r7, #28]
          break;
 80046cc:	e064      	b.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80046ce:	4b2d      	ldr	r3, [pc, #180]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046da:	d15f      	bne.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80046dc:	4b29      	ldr	r3, [pc, #164]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046e8:	d158      	bne.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80046ea:	4b26      	ldr	r3, [pc, #152]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	091b      	lsrs	r3, r3, #4
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	3301      	adds	r3, #1
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80046fe:	4b21      	ldr	r3, [pc, #132]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	0a1b      	lsrs	r3, r3, #8
 8004704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004708:	60fb      	str	r3, [r7, #12]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	fb02 f203 	mul.w	r2, r2, r3
 8004712:	4b1c      	ldr	r3, [pc, #112]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	0d5b      	lsrs	r3, r3, #21
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	3301      	adds	r3, #1
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	61fb      	str	r3, [r7, #28]
          break;
 8004726:	e039      	b.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004728:	4b16      	ldr	r3, [pc, #88]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004730:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004734:	d134      	bne.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004736:	4b13      	ldr	r3, [pc, #76]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800473e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004742:	d12d      	bne.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004744:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	3301      	adds	r3, #1
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	fbb2 f3f3 	udiv	r3, r2, r3
 8004756:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	0a1b      	lsrs	r3, r3, #8
 800475e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004762:	60fb      	str	r3, [r7, #12]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	fb02 f203 	mul.w	r2, r2, r3
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	0d5b      	lsrs	r3, r3, #21
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	3301      	adds	r3, #1
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	fbb2 f3f3 	udiv	r3, r2, r3
 800477e:	61fb      	str	r3, [r7, #28]
          break;
 8004780:	e00e      	b.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004782:	bf00      	nop
 8004784:	40021000 	.word	0x40021000
 8004788:	0003d090 	.word	0x0003d090
 800478c:	0800738c 	.word	0x0800738c
 8004790:	00f42400 	.word	0x00f42400
 8004794:	007a1200 	.word	0x007a1200
          break;
 8004798:	bf00      	nop
 800479a:	e2e6      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800479c:	bf00      	nop
 800479e:	e2e4      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80047a0:	bf00      	nop
        break;
 80047a2:	e2e2      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80047a4:	4bac      	ldr	r3, [pc, #688]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d827      	bhi.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80047b6:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80047b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047bc:	080047cd 	.word	0x080047cd
 80047c0:	080047d5 	.word	0x080047d5
 80047c4:	080047dd 	.word	0x080047dd
 80047c8:	080047f1 	.word	0x080047f1
          frequency = HAL_RCC_GetPCLK2Freq();
 80047cc:	f7ff fb02 	bl	8003dd4 <HAL_RCC_GetPCLK2Freq>
 80047d0:	61f8      	str	r0, [r7, #28]
          break;
 80047d2:	e01d      	b.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 80047d4:	f7ff fa40 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 80047d8:	61f8      	str	r0, [r7, #28]
          break;
 80047da:	e019      	b.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047dc:	4b9e      	ldr	r3, [pc, #632]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e8:	d10f      	bne.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 80047ea:	4b9c      	ldr	r3, [pc, #624]	; (8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80047ec:	61fb      	str	r3, [r7, #28]
          break;
 80047ee:	e00c      	b.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80047f0:	4b99      	ldr	r3, [pc, #612]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d107      	bne.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 80047fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004802:	61fb      	str	r3, [r7, #28]
          break;
 8004804:	e003      	b.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 8004806:	bf00      	nop
 8004808:	e2af      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800480a:	bf00      	nop
 800480c:	e2ad      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800480e:	bf00      	nop
        break;
 8004810:	e2ab      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004812:	4b91      	ldr	r3, [pc, #580]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004818:	f003 030c 	and.w	r3, r3, #12
 800481c:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b0c      	cmp	r3, #12
 8004822:	d83a      	bhi.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8004824:	a201      	add	r2, pc, #4	; (adr r2, 800482c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8004826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482a:	bf00      	nop
 800482c:	08004861 	.word	0x08004861
 8004830:	0800489b 	.word	0x0800489b
 8004834:	0800489b 	.word	0x0800489b
 8004838:	0800489b 	.word	0x0800489b
 800483c:	08004869 	.word	0x08004869
 8004840:	0800489b 	.word	0x0800489b
 8004844:	0800489b 	.word	0x0800489b
 8004848:	0800489b 	.word	0x0800489b
 800484c:	08004871 	.word	0x08004871
 8004850:	0800489b 	.word	0x0800489b
 8004854:	0800489b 	.word	0x0800489b
 8004858:	0800489b 	.word	0x0800489b
 800485c:	08004885 	.word	0x08004885
          frequency = HAL_RCC_GetPCLK1Freq();
 8004860:	f7ff faa2 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8004864:	61f8      	str	r0, [r7, #28]
          break;
 8004866:	e01d      	b.n	80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 8004868:	f7ff f9f6 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 800486c:	61f8      	str	r0, [r7, #28]
          break;
 800486e:	e019      	b.n	80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004870:	4b79      	ldr	r3, [pc, #484]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487c:	d10f      	bne.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 800487e:	4b77      	ldr	r3, [pc, #476]	; (8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004880:	61fb      	str	r3, [r7, #28]
          break;
 8004882:	e00c      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004884:	4b74      	ldr	r3, [pc, #464]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b02      	cmp	r3, #2
 8004890:	d107      	bne.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 8004892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004896:	61fb      	str	r3, [r7, #28]
          break;
 8004898:	e003      	b.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 800489a:	bf00      	nop
 800489c:	e265      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800489e:	bf00      	nop
 80048a0:	e263      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80048a2:	bf00      	nop
        break;
 80048a4:	e261      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80048a6:	4b6c      	ldr	r3, [pc, #432]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048b0:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d00d      	beq.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 80048b8:	2b10      	cmp	r3, #16
 80048ba:	d802      	bhi.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 80048c0:	e024      	b.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80048c6:	2b30      	cmp	r3, #48	; 0x30
 80048c8:	d012      	beq.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 80048ca:	e01f      	b.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 80048cc:	f7ff fa6c 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 80048d0:	61f8      	str	r0, [r7, #28]
          break;
 80048d2:	e01b      	b.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 80048d4:	f7ff f9c0 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 80048d8:	61f8      	str	r0, [r7, #28]
          break;
 80048da:	e017      	b.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048dc:	4b5e      	ldr	r3, [pc, #376]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e8:	d10d      	bne.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 80048ea:	4b5c      	ldr	r3, [pc, #368]	; (8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80048ec:	61fb      	str	r3, [r7, #28]
          break;
 80048ee:	e00a      	b.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80048f0:	4b59      	ldr	r3, [pc, #356]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80048f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d105      	bne.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 80048fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004902:	61fb      	str	r3, [r7, #28]
          break;
 8004904:	e001      	b.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8004906:	bf00      	nop
 8004908:	e22f      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800490a:	bf00      	nop
        break;
 800490c:	e22d      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800490e:	4b52      	ldr	r3, [pc, #328]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004918:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d00d      	beq.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8004920:	2b40      	cmp	r3, #64	; 0x40
 8004922:	d802      	bhi.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 8004928:	e024      	b.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 800492a:	2b80      	cmp	r3, #128	; 0x80
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800492e:	2bc0      	cmp	r3, #192	; 0xc0
 8004930:	d012      	beq.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 8004932:	e01f      	b.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004934:	f7ff fa38 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8004938:	61f8      	str	r0, [r7, #28]
          break;
 800493a:	e01b      	b.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 800493c:	f7ff f98c 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8004940:	61f8      	str	r0, [r7, #28]
          break;
 8004942:	e017      	b.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004944:	4b44      	ldr	r3, [pc, #272]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004950:	d10d      	bne.n	800496e <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 8004952:	4b42      	ldr	r3, [pc, #264]	; (8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004954:	61fb      	str	r3, [r7, #28]
          break;
 8004956:	e00a      	b.n	800496e <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004958:	4b3f      	ldr	r3, [pc, #252]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b02      	cmp	r3, #2
 8004964:	d105      	bne.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 8004966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800496a:	61fb      	str	r3, [r7, #28]
          break;
 800496c:	e001      	b.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 800496e:	bf00      	nop
 8004970:	e1fb      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004972:	bf00      	nop
        break;
 8004974:	e1f9      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004976:	4b38      	ldr	r3, [pc, #224]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004980:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004988:	d010      	beq.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 800498a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800498e:	d802      	bhi.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 8004994:	e026      	b.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 8004996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800499a:	d00b      	beq.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800499c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049a0:	d012      	beq.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 80049a2:	e01f      	b.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 80049a4:	f7ff fa00 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 80049a8:	61f8      	str	r0, [r7, #28]
          break;
 80049aa:	e01b      	b.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 80049ac:	f7ff f954 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 80049b0:	61f8      	str	r0, [r7, #28]
          break;
 80049b2:	e017      	b.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049b4:	4b28      	ldr	r3, [pc, #160]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c0:	d10d      	bne.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 80049c2:	4b26      	ldr	r3, [pc, #152]	; (8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80049c4:	61fb      	str	r3, [r7, #28]
          break;
 80049c6:	e00a      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049c8:	4b23      	ldr	r3, [pc, #140]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d105      	bne.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 80049d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049da:	61fb      	str	r3, [r7, #28]
          break;
 80049dc:	e001      	b.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 80049de:	bf00      	nop
 80049e0:	e1c3      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80049e2:	bf00      	nop
        break;
 80049e4:	e1c1      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80049e6:	4b1c      	ldr	r3, [pc, #112]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80049e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049f0:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f8:	d010      	beq.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 80049fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049fe:	d802      	bhi.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8004a04:	e026      	b.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 8004a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a0a:	d00b      	beq.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8004a0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a10:	d012      	beq.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 8004a12:	e01f      	b.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a14:	f7ff f9c8 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8004a18:	61f8      	str	r0, [r7, #28]
          break;
 8004a1a:	e01b      	b.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a1c:	f7ff f91c 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8004a20:	61f8      	str	r0, [r7, #28]
          break;
 8004a22:	e017      	b.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a24:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a30:	d10d      	bne.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 8004a32:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004a34:	61fb      	str	r3, [r7, #28]
          break;
 8004a36:	e00a      	b.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a38:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d105      	bne.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 8004a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a4a:	61fb      	str	r3, [r7, #28]
          break;
 8004a4c:	e001      	b.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 8004a4e:	bf00      	nop
 8004a50:	e18b      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004a52:	bf00      	nop
        break;
 8004a54:	e189      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004a56:	bf00      	nop
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004a60:	4bae      	ldr	r3, [pc, #696]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a6a:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a72:	d02f      	beq.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8004a74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a78:	d003      	beq.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004a7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a7e:	d004      	beq.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 8004a80:	e050      	b.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a82:	f7ff f8e9 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8004a86:	61f8      	str	r0, [r7, #28]
          break;
 8004a88:	e04c      	b.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8004a8a:	4ba4      	ldr	r3, [pc, #656]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d043      	beq.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a96:	4ba1      	ldr	r3, [pc, #644]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	091b      	lsrs	r3, r3, #4
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa8:	61bb      	str	r3, [r7, #24]
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004aaa:	4b9c      	ldr	r3, [pc, #624]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	0a1b      	lsrs	r3, r3, #8
 8004ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ab4:	60fb      	str	r3, [r7, #12]
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	fb02 f203 	mul.w	r2, r2, r3
 8004abe:	4b97      	ldr	r3, [pc, #604]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	0e5b      	lsrs	r3, r3, #25
 8004ac4:	f003 0303 	and.w	r3, r3, #3
 8004ac8:	3301      	adds	r3, #1
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	61fb      	str	r3, [r7, #28]
          break;
 8004ad2:	e024      	b.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 8004ad4:	4b91      	ldr	r3, [pc, #580]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d020      	beq.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004ae0:	4b8e      	ldr	r3, [pc, #568]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	3301      	adds	r3, #1
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af2:	61bb      	str	r3, [r7, #24]
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004af4:	4b89      	ldr	r3, [pc, #548]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	0a1b      	lsrs	r3, r3, #8
 8004afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004afe:	60fb      	str	r3, [r7, #12]
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U);
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	fb02 f203 	mul.w	r2, r2, r3
 8004b08:	4b84      	ldr	r3, [pc, #528]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	0e5b      	lsrs	r3, r3, #25
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	3301      	adds	r3, #1
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1a:	61fb      	str	r3, [r7, #28]
          break;
 8004b1c:	e001      	b.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 8004b1e:	bf00      	nop
 8004b20:	e123      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004b22:	bf00      	nop
        break;
 8004b24:	e121      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004b26:	4b7d      	ldr	r3, [pc, #500]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b30:	617b      	str	r3, [r7, #20]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d103      	bne.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004b38:	f7ff f94c 	bl	8003dd4 <HAL_RCC_GetPCLK2Freq>
 8004b3c:	61f8      	str	r0, [r7, #28]
        break;
 8004b3e:	e114      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b40:	f7ff f88a 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8004b44:	61f8      	str	r0, [r7, #28]
        break;
 8004b46:	e110      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004b48:	4b74      	ldr	r3, [pc, #464]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004b52:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5a:	d009      	beq.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8004b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b60:	d00a      	beq.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d000      	beq.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 8004b66:	e011      	b.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b68:	f7ff f91e 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8004b6c:	61f8      	str	r0, [r7, #28]
          break;
 8004b6e:	e00d      	b.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b70:	f7ff f872 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8004b74:	61f8      	str	r0, [r7, #28]
          break;
 8004b76:	e009      	b.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b78:	4b68      	ldr	r3, [pc, #416]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b84:	d101      	bne.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 8004b86:	4b66      	ldr	r3, [pc, #408]	; (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004b88:	61fb      	str	r3, [r7, #28]
          break;
 8004b8a:	bf00      	nop
        break;
 8004b8c:	e0ed      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004b8e:	4b63      	ldr	r3, [pc, #396]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b98:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ba0:	d009      	beq.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8004ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba6:	d00a      	beq.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d000      	beq.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8004bac:	e011      	b.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bae:	f7ff f8fb 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8004bb2:	61f8      	str	r0, [r7, #28]
          break;
 8004bb4:	e00d      	b.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 8004bb6:	f7ff f84f 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8004bba:	61f8      	str	r0, [r7, #28]
          break;
 8004bbc:	e009      	b.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bbe:	4b57      	ldr	r3, [pc, #348]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bca:	d101      	bne.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 8004bcc:	4b54      	ldr	r3, [pc, #336]	; (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004bce:	61fb      	str	r3, [r7, #28]
          break;
 8004bd0:	bf00      	nop
        break;
 8004bd2:	e0ca      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004bd4:	4b51      	ldr	r3, [pc, #324]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bde:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be6:	d009      	beq.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8004be8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bec:	d00a      	beq.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d000      	beq.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 8004bf2:	e011      	b.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bf4:	f7ff f8d8 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8004bf8:	61f8      	str	r0, [r7, #28]
          break;
 8004bfa:	e00d      	b.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004bfc:	f7ff f82c 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8004c00:	61f8      	str	r0, [r7, #28]
          break;
 8004c02:	e009      	b.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c04:	4b45      	ldr	r3, [pc, #276]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c10:	d101      	bne.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 8004c12:	4b43      	ldr	r3, [pc, #268]	; (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004c14:	61fb      	str	r3, [r7, #28]
          break;
 8004c16:	bf00      	nop
        break;
 8004c18:	e0a7      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004c1a:	4b40      	ldr	r3, [pc, #256]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c20:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004c24:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c2c:	d010      	beq.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8004c2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c32:	d802      	bhi.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d007      	beq.n	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 8004c38:	e02f      	b.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 8004c3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c3e:	d012      	beq.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8004c40:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c44:	d019      	beq.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8004c46:	e028      	b.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c48:	f7ff f8ae 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8004c4c:	61f8      	str	r0, [r7, #28]
          break;
 8004c4e:	e024      	b.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004c50:	4b32      	ldr	r3, [pc, #200]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d118      	bne.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
            frequency = LSI_VALUE;
 8004c5e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004c62:	61fb      	str	r3, [r7, #28]
          break;
 8004c64:	e014      	b.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c66:	4b2d      	ldr	r3, [pc, #180]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c72:	d10f      	bne.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 8004c74:	4b2a      	ldr	r3, [pc, #168]	; (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004c76:	61fb      	str	r3, [r7, #28]
          break;
 8004c78:	e00c      	b.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c7a:	4b28      	ldr	r3, [pc, #160]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d107      	bne.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 8004c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c8c:	61fb      	str	r3, [r7, #28]
          break;
 8004c8e:	e003      	b.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 8004c90:	bf00      	nop
 8004c92:	e06a      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004c94:	bf00      	nop
 8004c96:	e068      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004c98:	bf00      	nop
        break;
 8004c9a:	e066      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004c9c:	4b1f      	ldr	r3, [pc, #124]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004ca6:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cae:	d010      	beq.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cb4:	d802      	bhi.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 8004cba:	e034      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 8004cbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cc0:	d012      	beq.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8004cc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cc6:	d019      	beq.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 8004cc8:	e02d      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cca:	f7ff f86d 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8004cce:	61f8      	str	r0, [r7, #28]
          break;
 8004cd0:	e029      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004cd2:	4b12      	ldr	r3, [pc, #72]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d118      	bne.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
            frequency = LSI_VALUE;
 8004ce0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004ce4:	61fb      	str	r3, [r7, #28]
          break;
 8004ce6:	e014      	b.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf4:	d10f      	bne.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 8004cf6:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004cf8:	61fb      	str	r3, [r7, #28]
          break;
 8004cfa:	e00c      	b.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004cfc:	4b07      	ldr	r3, [pc, #28]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 8004d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d0e:	61fb      	str	r3, [r7, #28]
          break;
 8004d10:	e008      	b.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 8004d12:	bf00      	nop
 8004d14:	e029      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004d16:	bf00      	nop
 8004d18:	e027      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004d1a:	bf00      	nop
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	00f42400 	.word	0x00f42400
          break;
 8004d24:	bf00      	nop
        break;
 8004d26:	e020      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004d28:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d32:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 8004d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3e:	d004      	beq.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 8004d40:	e00d      	b.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d42:	f7ff f831 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8004d46:	61f8      	str	r0, [r7, #28]
          break;
 8004d48:	e009      	b.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d4a:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d56:	d101      	bne.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 8004d58:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 8004d5a:	61fb      	str	r3, [r7, #28]
          break;
 8004d5c:	bf00      	nop
        break;
 8004d5e:	e004      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004d60:	bf00      	nop
 8004d62:	e002      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004d64:	bf00      	nop
 8004d66:	e000      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004d68:	bf00      	nop
    }
  }

  return(frequency);
 8004d6a:	69fb      	ldr	r3, [r7, #28]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3720      	adds	r7, #32
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40021000 	.word	0x40021000
 8004d78:	00f42400 	.word	0x00f42400

08004d7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d8a:	4b73      	ldr	r3, [pc, #460]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d018      	beq.n	8004dc8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d96:	4b70      	ldr	r3, [pc, #448]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f003 0203 	and.w	r2, r3, #3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d10d      	bne.n	8004dc2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
       ||
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004dae:	4b6a      	ldr	r3, [pc, #424]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	091b      	lsrs	r3, r3, #4
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
       ||
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d044      	beq.n	8004e4c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	73fb      	strb	r3, [r7, #15]
 8004dc6:	e041      	b.n	8004e4c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d00c      	beq.n	8004dea <RCCEx_PLLSAI1_Config+0x6e>
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d013      	beq.n	8004dfc <RCCEx_PLLSAI1_Config+0x80>
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d120      	bne.n	8004e1a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dd8:	4b5f      	ldr	r3, [pc, #380]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d11d      	bne.n	8004e20 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004de8:	e01a      	b.n	8004e20 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dea:	4b5b      	ldr	r3, [pc, #364]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d116      	bne.n	8004e24 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dfa:	e013      	b.n	8004e24 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dfc:	4b56      	ldr	r3, [pc, #344]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10f      	bne.n	8004e28 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e08:	4b53      	ldr	r3, [pc, #332]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e18:	e006      	b.n	8004e28 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e1e:	e004      	b.n	8004e2a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004e20:	bf00      	nop
 8004e22:	e002      	b.n	8004e2a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004e24:	bf00      	nop
 8004e26:	e000      	b.n	8004e2a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004e28:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10d      	bne.n	8004e4c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e30:	4849      	ldr	r0, [pc, #292]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e32:	4b49      	ldr	r3, [pc, #292]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6819      	ldr	r1, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	430b      	orrs	r3, r1
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d17d      	bne.n	8004f4e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e52:	4a41      	ldr	r2, [pc, #260]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e54:	4b40      	ldr	r3, [pc, #256]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e5e:	f7fc fc31 	bl	80016c4 <HAL_GetTick>
 8004e62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e64:	e009      	b.n	8004e7a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e66:	f7fc fc2d 	bl	80016c4 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d902      	bls.n	8004e7a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	73fb      	strb	r3, [r7, #15]
        break;
 8004e78:	e005      	b.n	8004e86 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e7a:	4b37      	ldr	r3, [pc, #220]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1ef      	bne.n	8004e66 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d160      	bne.n	8004f4e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d111      	bne.n	8004eb6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e92:	4831      	ldr	r0, [pc, #196]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e94:	4b30      	ldr	r3, [pc, #192]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6892      	ldr	r2, [r2, #8]
 8004ea4:	0211      	lsls	r1, r2, #8
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	68d2      	ldr	r2, [r2, #12]
 8004eaa:	0912      	lsrs	r2, r2, #4
 8004eac:	0452      	lsls	r2, r2, #17
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	6103      	str	r3, [r0, #16]
 8004eb4:	e027      	b.n	8004f06 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d112      	bne.n	8004ee2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ebc:	4826      	ldr	r0, [pc, #152]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ebe:	4b26      	ldr	r3, [pc, #152]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ec6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6892      	ldr	r2, [r2, #8]
 8004ece:	0211      	lsls	r1, r2, #8
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6912      	ldr	r2, [r2, #16]
 8004ed4:	0852      	lsrs	r2, r2, #1
 8004ed6:	3a01      	subs	r2, #1
 8004ed8:	0552      	lsls	r2, r2, #21
 8004eda:	430a      	orrs	r2, r1
 8004edc:	4313      	orrs	r3, r2
 8004ede:	6103      	str	r3, [r0, #16]
 8004ee0:	e011      	b.n	8004f06 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ee2:	481d      	ldr	r0, [pc, #116]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ee4:	4b1c      	ldr	r3, [pc, #112]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004eec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6892      	ldr	r2, [r2, #8]
 8004ef4:	0211      	lsls	r1, r2, #8
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6952      	ldr	r2, [r2, #20]
 8004efa:	0852      	lsrs	r2, r2, #1
 8004efc:	3a01      	subs	r2, #1
 8004efe:	0652      	lsls	r2, r2, #25
 8004f00:	430a      	orrs	r2, r1
 8004f02:	4313      	orrs	r3, r2
 8004f04:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f06:	4a14      	ldr	r2, [pc, #80]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f08:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f10:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f12:	f7fc fbd7 	bl	80016c4 <HAL_GetTick>
 8004f16:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f18:	e009      	b.n	8004f2e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f1a:	f7fc fbd3 	bl	80016c4 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d902      	bls.n	8004f2e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	73fb      	strb	r3, [r7, #15]
          break;
 8004f2c:	e005      	b.n	8004f3a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f2e:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0ef      	beq.n	8004f1a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d106      	bne.n	8004f4e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f40:	4905      	ldr	r1, [pc, #20]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f42:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f44:	691a      	ldr	r2, [r3, #16]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000

08004f5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f6a:	4b68      	ldr	r3, [pc, #416]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d018      	beq.n	8004fa8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f76:	4b65      	ldr	r3, [pc, #404]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f003 0203 	and.w	r2, r3, #3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d10d      	bne.n	8004fa2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
       ||
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d009      	beq.n	8004fa2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004f8e:	4b5f      	ldr	r3, [pc, #380]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	091b      	lsrs	r3, r3, #4
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
       ||
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d044      	beq.n	800502c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	73fb      	strb	r3, [r7, #15]
 8004fa6:	e041      	b.n	800502c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d00c      	beq.n	8004fca <RCCEx_PLLSAI2_Config+0x6e>
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d013      	beq.n	8004fdc <RCCEx_PLLSAI2_Config+0x80>
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d120      	bne.n	8004ffa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fb8:	4b54      	ldr	r3, [pc, #336]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d11d      	bne.n	8005000 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fc8:	e01a      	b.n	8005000 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fca:	4b50      	ldr	r3, [pc, #320]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d116      	bne.n	8005004 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fda:	e013      	b.n	8005004 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fdc:	4b4b      	ldr	r3, [pc, #300]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10f      	bne.n	8005008 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fe8:	4b48      	ldr	r3, [pc, #288]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ff8:	e006      	b.n	8005008 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8004ffe:	e004      	b.n	800500a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005000:	bf00      	nop
 8005002:	e002      	b.n	800500a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005004:	bf00      	nop
 8005006:	e000      	b.n	800500a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005008:	bf00      	nop
    }

    if(status == HAL_OK)
 800500a:	7bfb      	ldrb	r3, [r7, #15]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10d      	bne.n	800502c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005010:	483e      	ldr	r0, [pc, #248]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005012:	4b3e      	ldr	r3, [pc, #248]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6819      	ldr	r1, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	3b01      	subs	r3, #1
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	430b      	orrs	r3, r1
 8005028:	4313      	orrs	r3, r2
 800502a:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d167      	bne.n	8005102 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005032:	4a36      	ldr	r2, [pc, #216]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005034:	4b35      	ldr	r3, [pc, #212]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800503c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503e:	f7fc fb41 	bl	80016c4 <HAL_GetTick>
 8005042:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005044:	e009      	b.n	800505a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005046:	f7fc fb3d 	bl	80016c4 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d902      	bls.n	800505a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	73fb      	strb	r3, [r7, #15]
        break;
 8005058:	e005      	b.n	8005066 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800505a:	4b2c      	ldr	r3, [pc, #176]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1ef      	bne.n	8005046 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d14a      	bne.n	8005102 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d111      	bne.n	8005096 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005072:	4826      	ldr	r0, [pc, #152]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005074:	4b25      	ldr	r3, [pc, #148]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800507c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6892      	ldr	r2, [r2, #8]
 8005084:	0211      	lsls	r1, r2, #8
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	68d2      	ldr	r2, [r2, #12]
 800508a:	0912      	lsrs	r2, r2, #4
 800508c:	0452      	lsls	r2, r2, #17
 800508e:	430a      	orrs	r2, r1
 8005090:	4313      	orrs	r3, r2
 8005092:	6143      	str	r3, [r0, #20]
 8005094:	e011      	b.n	80050ba <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005096:	481d      	ldr	r0, [pc, #116]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005098:	4b1c      	ldr	r3, [pc, #112]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6892      	ldr	r2, [r2, #8]
 80050a8:	0211      	lsls	r1, r2, #8
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6912      	ldr	r2, [r2, #16]
 80050ae:	0852      	lsrs	r2, r2, #1
 80050b0:	3a01      	subs	r2, #1
 80050b2:	0652      	lsls	r2, r2, #25
 80050b4:	430a      	orrs	r2, r1
 80050b6:	4313      	orrs	r3, r2
 80050b8:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80050ba:	4a14      	ldr	r2, [pc, #80]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050bc:	4b13      	ldr	r3, [pc, #76]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c6:	f7fc fafd 	bl	80016c4 <HAL_GetTick>
 80050ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050cc:	e009      	b.n	80050e2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050ce:	f7fc faf9 	bl	80016c4 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d902      	bls.n	80050e2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	73fb      	strb	r3, [r7, #15]
          break;
 80050e0:	e005      	b.n	80050ee <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050e2:	4b0a      	ldr	r3, [pc, #40]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0ef      	beq.n	80050ce <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d106      	bne.n	8005102 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050f4:	4905      	ldr	r1, [pc, #20]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050f8:	695a      	ldr	r2, [r3, #20]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	4313      	orrs	r3, r2
 8005100:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005102:	7bfb      	ldrb	r3, [r7, #15]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40021000 	.word	0x40021000

08005110 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005110:	b480      	push	{r7}
 8005112:	b089      	sub	sp, #36	; 0x24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800512c:	d10d      	bne.n	800514a <RCCEx_GetSAIxPeriphCLKFreq+0x3a>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800512e:	4b63      	ldr	r3, [pc, #396]	; (80052bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005134:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005138:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005140:	d114      	bne.n	800516c <RCCEx_GetSAIxPeriphCLKFreq+0x5c>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005142:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005146:	61fb      	str	r3, [r7, #28]
 8005148:	e010      	b.n	800516c <RCCEx_GetSAIxPeriphCLKFreq+0x5c>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005150:	d10c      	bne.n	800516c <RCCEx_GetSAIxPeriphCLKFreq+0x5c>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005152:	4b5a      	ldr	r3, [pc, #360]	; (80052bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8005154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005158:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800515c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005164:	d102      	bne.n	800516c <RCCEx_GetSAIxPeriphCLKFreq+0x5c>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005166:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800516a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b00      	cmp	r3, #0
 8005170:	f040 809c 	bne.w	80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
  {
    pllvco = InputFrequency;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800517e:	d003      	beq.n	8005188 <RCCEx_GetSAIxPeriphCLKFreq+0x78>
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005186:	d12d      	bne.n	80051e4 <RCCEx_GetSAIxPeriphCLKFreq+0xd4>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8005188:	4b4c      	ldr	r3, [pc, #304]	; (80052bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 808b 	beq.w	80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005196:	4b49      	ldr	r3, [pc, #292]	; (80052bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	091b      	lsrs	r3, r3, #4
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	3301      	adds	r3, #1
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80051aa:	4b44      	ldr	r3, [pc, #272]	; (80052bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	0a1b      	lsrs	r3, r3, #8
 80051b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051b4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10a      	bne.n	80051d2 <RCCEx_GetSAIxPeriphCLKFreq+0xc2>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80051bc:	4b3f      	ldr	r3, [pc, #252]	; (80052bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          {
            pllp = 17U;
 80051c8:	2311      	movs	r3, #17
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	e001      	b.n	80051d2 <RCCEx_GetSAIxPeriphCLKFreq+0xc2>
          }
          else
          {
            pllp = 7U;
 80051ce:	2307      	movs	r3, #7
 80051d0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	fb02 f203 	mul.w	r2, r2, r3
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e0:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80051e2:	e063      	b.n	80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d12c      	bne.n	8005244 <RCCEx_GetSAIxPeriphCLKFreq+0x134>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 80051ea:	4b34      	ldr	r3, [pc, #208]	; (80052bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d05a      	beq.n	80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80051f6:	4b31      	ldr	r3, [pc, #196]	; (80052bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	091b      	lsrs	r3, r3, #4
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	3301      	adds	r3, #1
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	fbb2 f3f3 	udiv	r3, r2, r3
 8005208:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800520a:	4b2c      	ldr	r3, [pc, #176]	; (80052bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	0a1b      	lsrs	r3, r3, #8
 8005210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005214:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <RCCEx_GetSAIxPeriphCLKFreq+0x122>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800521c:	4b27      	ldr	r3, [pc, #156]	; (80052bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          {
            pllp = 17U;
 8005228:	2311      	movs	r3, #17
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	e001      	b.n	8005232 <RCCEx_GetSAIxPeriphCLKFreq+0x122>
          }
          else
          {
            pllp = 7U;
 800522e:	2307      	movs	r3, #7
 8005230:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	fb02 f203 	mul.w	r2, r2, r3
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	e033      	b.n	80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800524a:	d003      	beq.n	8005254 <RCCEx_GetSAIxPeriphCLKFreq+0x144>
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005252:	d12b      	bne.n	80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8005254:	4b19      	ldr	r3, [pc, #100]	; (80052bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d025      	beq.n	80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005260:	4b16      	ldr	r3, [pc, #88]	; (80052bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	091b      	lsrs	r3, r3, #4
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	3301      	adds	r3, #1
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005272:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005274:	4b11      	ldr	r3, [pc, #68]	; (80052bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	0a1b      	lsrs	r3, r3, #8
 800527a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800527e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10a      	bne.n	800529c <RCCEx_GetSAIxPeriphCLKFreq+0x18c>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005286:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          {
            pllp = 17U;
 8005292:	2311      	movs	r3, #17
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	e001      	b.n	800529c <RCCEx_GetSAIxPeriphCLKFreq+0x18c>
          }
          else
          {
            pllp = 7U;
 8005298:	2307      	movs	r3, #7
 800529a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	fb02 f203 	mul.w	r2, r2, r3
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052aa:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80052ac:	69fb      	ldr	r3, [r7, #28]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3724      	adds	r7, #36	; 0x24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	40021000 	.word	0x40021000

080052c0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e14a      	b.n	8005568 <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f001 fa36 	bl	8006758 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fa35 	bl	800575c <SAI_Disable>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e135      	b.n	8005568 <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d007      	beq.n	800531c <HAL_SAI_Init+0x5c>
 800530c:	2b01      	cmp	r3, #1
 800530e:	d302      	bcc.n	8005316 <HAL_SAI_Init+0x56>
 8005310:	2b02      	cmp	r3, #2
 8005312:	d006      	beq.n	8005322 <HAL_SAI_Init+0x62>
 8005314:	e008      	b.n	8005328 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	61fb      	str	r3, [r7, #28]
      break;
 800531a:	e008      	b.n	800532e <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800531c:	2310      	movs	r3, #16
 800531e:	61fb      	str	r3, [r7, #28]
      break;
 8005320:	e005      	b.n	800532e <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005322:	2320      	movs	r3, #32
 8005324:	61fb      	str	r3, [r7, #28]
      break;
 8005326:	e002      	b.n	800532e <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8005328:	2300      	movs	r3, #0
 800532a:	61fb      	str	r3, [r7, #28]
      break;
 800532c:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2b03      	cmp	r3, #3
 8005334:	d81d      	bhi.n	8005372 <HAL_SAI_Init+0xb2>
 8005336:	a201      	add	r2, pc, #4	; (adr r2, 800533c <HAL_SAI_Init+0x7c>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	0800534d 	.word	0x0800534d
 8005340:	08005353 	.word	0x08005353
 8005344:	0800535b 	.word	0x0800535b
 8005348:	08005363 	.word	0x08005363
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	617b      	str	r3, [r7, #20]
      break;
 8005350:	e012      	b.n	8005378 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005356:	617b      	str	r3, [r7, #20]
      break;
 8005358:	e00e      	b.n	8005378 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800535a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800535e:	617b      	str	r3, [r7, #20]
      break;
 8005360:	e00a      	b.n	8005378 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005362:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005366:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f043 0301 	orr.w	r3, r3, #1
 800536e:	61fb      	str	r3, [r7, #28]
      break;
 8005370:	e002      	b.n	8005378 <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	617b      	str	r3, [r7, #20]
      break;
 8005376:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a7c      	ldr	r2, [pc, #496]	; (8005570 <HAL_SAI_Init+0x2b0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d004      	beq.n	800538c <HAL_SAI_Init+0xcc>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a7b      	ldr	r2, [pc, #492]	; (8005574 <HAL_SAI_Init+0x2b4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d103      	bne.n	8005394 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800538c:	4a7a      	ldr	r2, [pc, #488]	; (8005578 <HAL_SAI_Init+0x2b8>)
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	e002      	b.n	800539a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005394:	4a79      	ldr	r2, [pc, #484]	; (800557c <HAL_SAI_Init+0x2bc>)
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d038      	beq.n	8005414 <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a72      	ldr	r2, [pc, #456]	; (8005570 <HAL_SAI_Init+0x2b0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d004      	beq.n	80053b6 <HAL_SAI_Init+0xf6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a70      	ldr	r2, [pc, #448]	; (8005574 <HAL_SAI_Init+0x2b4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d105      	bne.n	80053c2 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80053b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80053ba:	f7ff f867 	bl	800448c <HAL_RCCEx_GetPeriphCLKFreq>
 80053be:	6138      	str	r0, [r7, #16]
 80053c0:	e004      	b.n	80053cc <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80053c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80053c6:	f7ff f861 	bl	800448c <HAL_RCCEx_GetPeriphCLKFreq>
 80053ca:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	461a      	mov	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	025b      	lsls	r3, r3, #9
 80053de:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e2:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4a66      	ldr	r2, [pc, #408]	; (8005580 <HAL_SAI_Init+0x2c0>)
 80053e8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ec:	08da      	lsrs	r2, r3, #3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80053f2:	68f9      	ldr	r1, [r7, #12]
 80053f4:	4b62      	ldr	r3, [pc, #392]	; (8005580 <HAL_SAI_Init+0x2c0>)
 80053f6:	fba3 2301 	umull	r2, r3, r3, r1
 80053fa:	08da      	lsrs	r2, r3, #3
 80053fc:	4613      	mov	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	1aca      	subs	r2, r1, r3
 8005406:	2a08      	cmp	r2, #8
 8005408:	d904      	bls.n	8005414 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_SAI_Init+0x164>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b02      	cmp	r3, #2
 8005422:	d109      	bne.n	8005438 <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_SAI_Init+0x170>
 800542c:	2300      	movs	r3, #0
 800542e:	e001      	b.n	8005434 <HAL_SAI_Init+0x174>
 8005430:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	e008      	b.n	800544a <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543c:	2b01      	cmp	r3, #1
 800543e:	d102      	bne.n	8005446 <HAL_SAI_Init+0x186>
 8005440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005444:	e000      	b.n	8005448 <HAL_SAI_Init+0x188>
 8005446:	2300      	movs	r3, #0
 8005448:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	4b4b      	ldr	r3, [pc, #300]	; (8005584 <HAL_SAI_Init+0x2c4>)
 8005456:	400b      	ands	r3, r1
 8005458:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6812      	ldr	r2, [r2, #0]
 8005462:	6811      	ldr	r1, [r2, #0]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6850      	ldr	r0, [r2, #4]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800546c:	4310      	orrs	r0, r2
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6b52      	ldr	r2, [r2, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005472:	4310      	orrs	r0, r2
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005478:	4310      	orrs	r0, r2
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	4310      	orrs	r0, r2
                          ckstr_bits | syncen_bits |                             \
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4310      	orrs	r0, r2
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6a52      	ldr	r2, [r2, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8005486:	4310      	orrs	r0, r2
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6912      	ldr	r2, [r2, #16]
 800548c:	4310      	orrs	r0, r2
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6952      	ldr	r2, [r2, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005492:	4310      	orrs	r0, r2
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6a12      	ldr	r2, [r2, #32]
 8005498:	0512      	lsls	r2, r2, #20
 800549a:	4302      	orrs	r2, r0
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800549c:	430a      	orrs	r2, r1
 800549e:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80054ae:	f023 030f 	bic.w	r3, r3, #15
 80054b2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6812      	ldr	r2, [r2, #0]
 80054bc:	6851      	ldr	r1, [r2, #4]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6990      	ldr	r0, [r2, #24]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80054c6:	4310      	orrs	r0, r2
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054cc:	4302      	orrs	r2, r0
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6899      	ldr	r1, [r3, #8]
 80054dc:	4b2a      	ldr	r3, [pc, #168]	; (8005588 <HAL_SAI_Init+0x2c8>)
 80054de:	400b      	ands	r3, r1
 80054e0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6812      	ldr	r2, [r2, #0]
 80054ea:	6891      	ldr	r1, [r2, #8]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054f0:	1e50      	subs	r0, r2, #1
                           hsai->FrameInit.FSOffset |
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80054f6:	4310      	orrs	r0, r2
                           hsai->FrameInit.FSDefinition |
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80054fc:	4310      	orrs	r0, r2
                           hsai->FrameInit.FSPolarity   |
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005502:	4310      	orrs	r0, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005508:	3a01      	subs	r2, #1
 800550a:	0212      	lsls	r2, r2, #8
                           hsai->FrameInit.FSPolarity   |
 800550c:	4302      	orrs	r2, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800550e:	430a      	orrs	r2, r1
 8005510:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68d9      	ldr	r1, [r3, #12]
 800551c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005520:	400b      	ands	r3, r1
 8005522:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6812      	ldr	r2, [r2, #0]
 800552c:	68d1      	ldr	r1, [r2, #12]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005536:	4310      	orrs	r0, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800553c:	0412      	lsls	r2, r2, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800553e:	4310      	orrs	r0, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005544:	3a01      	subs	r2, #1
 8005546:	0212      	lsls	r2, r2, #8
 8005548:	4302      	orrs	r2, r0
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800554a:	430a      	orrs	r2, r1
 800554c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3720      	adds	r7, #32
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40015404 	.word	0x40015404
 8005574:	40015424 	.word	0x40015424
 8005578:	40015400 	.word	0x40015400
 800557c:	40015800 	.word	0x40015800
 8005580:	cccccccd 	.word	0xcccccccd
 8005584:	ff05c010 	.word	0xff05c010
 8005588:	fff88000 	.word	0xfff88000

0800558c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	4613      	mov	r3, r2
 8005598:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800559a:	f7fc f893 	bl	80016c4 <HAL_GetTick>
 800559e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_SAI_Transmit_DMA+0x20>
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e093      	b.n	80056d8 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	f040 808c 	bne.w	80056d6 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_SAI_Transmit_DMA+0x40>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e085      	b.n	80056d8 <HAL_SAI_Transmit_DMA+0x14c>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	88fa      	ldrh	r2, [r7, #6]
 80055de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	88fa      	ldrh	r2, [r7, #6]
 80055e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2212      	movs	r2, #18
 80055f6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055fe:	4a38      	ldr	r2, [pc, #224]	; (80056e0 <HAL_SAI_Transmit_DMA+0x154>)
 8005600:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005606:	4a37      	ldr	r2, [pc, #220]	; (80056e4 <HAL_SAI_Transmit_DMA+0x158>)
 8005608:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800560e:	4a36      	ldr	r2, [pc, #216]	; (80056e8 <HAL_SAI_Transmit_DMA+0x15c>)
 8005610:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005616:	2200      	movs	r2, #0
 8005618:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005622:	4619      	mov	r1, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	331c      	adds	r3, #28
 800562a:	461a      	mov	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005632:	f7fc fd99 	bl	8002168 <HAL_DMA_Start_IT>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e047      	b.n	80056d8 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005648:	2100      	movs	r1, #0
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 f84e 	bl	80056ec <SAI_InterruptFlag>
 8005650:	4601      	mov	r1, r0
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	6912      	ldr	r2, [r2, #16]
 800565c:	430a      	orrs	r2, r1
 800565e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	6812      	ldr	r2, [r2, #0]
 800566a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800566e:	601a      	str	r2, [r3, #0]

    /* Wait untill FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005670:	e015      	b.n	800569e <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005672:	f7fc f827 	bl	80016c4 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005680:	d90d      	bls.n	800569e <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005688:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e01c      	b.n	80056d8 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0e2      	beq.n	8005672 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d107      	bne.n	80056ca <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	6812      	ldr	r2, [r2, #0]
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80056c8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	e000      	b.n	80056d8 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80056d6:	2302      	movs	r3, #2
  }
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	08005823 	.word	0x08005823
 80056e4:	080057c5 	.word	0x080057c5
 80056e8:	0800583f 	.word	0x0800583f

080056ec <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d103      	bne.n	800570a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f043 0308 	orr.w	r3, r3, #8
 8005708:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	2b08      	cmp	r3, #8
 8005710:	d10b      	bne.n	800572a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005716:	2b03      	cmp	r3, #3
 8005718:	d003      	beq.n	8005722 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d103      	bne.n	800572a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f043 0310 	orr.w	r3, r3, #16
 8005728:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2b03      	cmp	r3, #3
 8005730:	d003      	beq.n	800573a <SAI_InterruptFlag+0x4e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d104      	bne.n	8005744 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	e003      	b.n	800574c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f043 0304 	orr.w	r3, r3, #4
 800574a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800574c:	68fb      	ldr	r3, [r7, #12]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
	...

0800575c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800575c:	b490      	push	{r4, r7}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005764:	4b15      	ldr	r3, [pc, #84]	; (80057bc <SAI_Disable+0x60>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a15      	ldr	r2, [pc, #84]	; (80057c0 <SAI_Disable+0x64>)
 800576a:	fba2 2303 	umull	r2, r3, r2, r3
 800576e:	0b1b      	lsrs	r3, r3, #12
 8005770:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	6812      	ldr	r2, [r2, #0]
 8005780:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005784:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005786:	2c00      	cmp	r4, #0
 8005788:	d10a      	bne.n	80057a0 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005790:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	73fb      	strb	r3, [r7, #15]
      break;
 800579e:	e007      	b.n	80057b0 <SAI_Disable+0x54>
    }
    count--;
 80057a0:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1ea      	bne.n	8005786 <SAI_Disable+0x2a>

  return status;
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc90      	pop	{r4, r7}
 80057ba:	4770      	bx	lr
 80057bc:	2000003c 	.word	0x2000003c
 80057c0:	95cbec1b 	.word	0x95cbec1b

080057c4 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	2b20      	cmp	r3, #32
 80057d8:	d01c      	beq.n	8005814 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	6812      	ldr	r2, [r2, #0]
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80057f0:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80057f2:	2100      	movs	r1, #0
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f7ff ff79 	bl	80056ec <SAI_InterruptFlag>
 80057fa:	4603      	mov	r3, r0
 80057fc:	43da      	mvns	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68f9      	ldr	r1, [r7, #12]
 8005804:	6809      	ldr	r1, [r1, #0]
 8005806:	6909      	ldr	r1, [r1, #16]
 8005808:	400a      	ands	r2, r1
 800580a:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f001 f837 	bl	8006888 <HAL_SAI_TxCpltCallback>
#endif
}
 800581a:	bf00      	nop
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f7fb fec5 	bl	80015c0 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8005836:	bf00      	nop
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584a:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005852:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	6812      	ldr	r2, [r2, #0]
 8005864:	6812      	ldr	r2, [r2, #0]
 8005866:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800586a:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f7ff ff75 	bl	800575c <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f7fb feae 	bl	80015e4 <HAL_SAI_ErrorCallback>
#endif
}
 8005888:	bf00      	nop
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <Init_MPU>:

#include "Filtr.h"
#include <math.h>
#include <stdlib.h>
extern I2C_HandleTypeDef I2c1Handle;
void Init_MPU(){
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af04      	add	r7, sp, #16
	uint8_t power = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	71fb      	strb	r3, [r7, #7]
	uint8_t data[3]={0b00000001,
 800589a:	4a1a      	ldr	r2, [pc, #104]	; (8005904 <Init_MPU+0x74>)
 800589c:	1d3b      	adds	r3, r7, #4
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	4611      	mov	r1, r2
 80058a2:	8019      	strh	r1, [r3, #0]
 80058a4:	3302      	adds	r3, #2
 80058a6:	0c12      	lsrs	r2, r2, #16
 80058a8:	701a      	strb	r2, [r3, #0]
				     0b00011000,
				     0b00001000};
	HAL_I2C_Mem_Write(&I2c1Handle,GYRO,0x6B,1,&power,1,1000);
 80058aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058ae:	9302      	str	r3, [sp, #8]
 80058b0:	2301      	movs	r3, #1
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	1dfb      	adds	r3, r7, #7
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	2301      	movs	r3, #1
 80058ba:	226b      	movs	r2, #107	; 0x6b
 80058bc:	21d2      	movs	r1, #210	; 0xd2
 80058be:	4812      	ldr	r0, [pc, #72]	; (8005908 <Init_MPU+0x78>)
 80058c0:	f7fd f904 	bl	8002acc <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&I2c1Handle,GYRO,0x1A,1,data,3,1000);
 80058c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058c8:	9302      	str	r3, [sp, #8]
 80058ca:	2303      	movs	r3, #3
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	1d3b      	adds	r3, r7, #4
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	2301      	movs	r3, #1
 80058d4:	221a      	movs	r2, #26
 80058d6:	21d2      	movs	r1, #210	; 0xd2
 80058d8:	480b      	ldr	r0, [pc, #44]	; (8005908 <Init_MPU+0x78>)
 80058da:	f7fd f8f7 	bl	8002acc <HAL_I2C_Mem_Write>
    data[0]=0b01111000;
 80058de:	2378      	movs	r3, #120	; 0x78
 80058e0:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Mem_Write(&I2c1Handle,GYRO,0x23,1,data,1,1000);
 80058e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058e6:	9302      	str	r3, [sp, #8]
 80058e8:	2301      	movs	r3, #1
 80058ea:	9301      	str	r3, [sp, #4]
 80058ec:	1d3b      	adds	r3, r7, #4
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	2301      	movs	r3, #1
 80058f2:	2223      	movs	r2, #35	; 0x23
 80058f4:	21d2      	movs	r1, #210	; 0xd2
 80058f6:	4804      	ldr	r0, [pc, #16]	; (8005908 <Init_MPU+0x78>)
 80058f8:	f7fd f8e8 	bl	8002acc <HAL_I2C_Mem_Write>

}
 80058fc:	bf00      	nop
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	08007370 	.word	0x08007370
 8005908:	2000fbf4 	.word	0x2000fbf4

0800590c <Read_MPU_Gyro>:
void Read_MPU_Gyro(){
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af04      	add	r7, sp, #16
	uint8_t data[6]={};
 8005912:	463b      	mov	r3, r7
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	809a      	strh	r2, [r3, #4]
	HAL_I2C_Mem_Read(&I2c1Handle,GYRO,0x43,1,data,6,1000);
 800591a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800591e:	9302      	str	r3, [sp, #8]
 8005920:	2306      	movs	r3, #6
 8005922:	9301      	str	r3, [sp, #4]
 8005924:	463b      	mov	r3, r7
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	2301      	movs	r3, #1
 800592a:	2243      	movs	r2, #67	; 0x43
 800592c:	21d2      	movs	r1, #210	; 0xd2
 800592e:	4818      	ldr	r0, [pc, #96]	; (8005990 <Read_MPU_Gyro+0x84>)
 8005930:	f7fd f9e0 	bl	8002cf4 <HAL_I2C_Mem_Read>

	gyro[0] = (int16_t)((data[0]<<8) | data[1]);
 8005934:	783b      	ldrb	r3, [r7, #0]
 8005936:	021b      	lsls	r3, r3, #8
 8005938:	b21a      	sxth	r2, r3
 800593a:	787b      	ldrb	r3, [r7, #1]
 800593c:	b21b      	sxth	r3, r3
 800593e:	4313      	orrs	r3, r2
 8005940:	b21b      	sxth	r3, r3
 8005942:	ee07 3a90 	vmov	s15, r3
 8005946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800594a:	4b12      	ldr	r3, [pc, #72]	; (8005994 <Read_MPU_Gyro+0x88>)
 800594c:	edc3 7a00 	vstr	s15, [r3]
	gyro[1] = (int16_t)((data[2]<<8) | data[3]);
 8005950:	78bb      	ldrb	r3, [r7, #2]
 8005952:	021b      	lsls	r3, r3, #8
 8005954:	b21a      	sxth	r2, r3
 8005956:	78fb      	ldrb	r3, [r7, #3]
 8005958:	b21b      	sxth	r3, r3
 800595a:	4313      	orrs	r3, r2
 800595c:	b21b      	sxth	r3, r3
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005966:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <Read_MPU_Gyro+0x88>)
 8005968:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro[2] = (int16_t)((data[4]<<8) | data[5]);
 800596c:	793b      	ldrb	r3, [r7, #4]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	b21a      	sxth	r2, r3
 8005972:	797b      	ldrb	r3, [r7, #5]
 8005974:	b21b      	sxth	r3, r3
 8005976:	4313      	orrs	r3, r2
 8005978:	b21b      	sxth	r3, r3
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005982:	4b04      	ldr	r3, [pc, #16]	; (8005994 <Read_MPU_Gyro+0x88>)
 8005984:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8005988:	bf00      	nop
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	2000fbf4 	.word	0x2000fbf4
 8005994:	20013d90 	.word	0x20013d90

08005998 <Read_MPU_Accl>:
void Read_MPU_Accl(){
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af04      	add	r7, sp, #16
	uint8_t data[6]={};
 800599e:	463b      	mov	r3, r7
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	809a      	strh	r2, [r3, #4]
	HAL_I2C_Mem_Read(&I2c1Handle,GYRO,0x3B,1,data,6,1000);
 80059a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059aa:	9302      	str	r3, [sp, #8]
 80059ac:	2306      	movs	r3, #6
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	463b      	mov	r3, r7
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	2301      	movs	r3, #1
 80059b6:	223b      	movs	r2, #59	; 0x3b
 80059b8:	21d2      	movs	r1, #210	; 0xd2
 80059ba:	481e      	ldr	r0, [pc, #120]	; (8005a34 <Read_MPU_Accl+0x9c>)
 80059bc:	f7fd f99a 	bl	8002cf4 <HAL_I2C_Mem_Read>

	accel[0] = (int16_t)((data[0]<<8) | data[1]) - ACCEL_X_OFFSET;
 80059c0:	783b      	ldrb	r3, [r7, #0]
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	b21a      	sxth	r2, r3
 80059c6:	787b      	ldrb	r3, [r7, #1]
 80059c8:	b21b      	sxth	r3, r3
 80059ca:	4313      	orrs	r3, r2
 80059cc:	b21b      	sxth	r3, r3
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059d6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005a38 <Read_MPU_Accl+0xa0>
 80059da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059de:	4b17      	ldr	r3, [pc, #92]	; (8005a3c <Read_MPU_Accl+0xa4>)
 80059e0:	edc3 7a00 	vstr	s15, [r3]
	accel[1] = (int16_t)((data[2]<<8) | data[3]) - ACCEL_Y_OFFSET;
 80059e4:	78bb      	ldrb	r3, [r7, #2]
 80059e6:	021b      	lsls	r3, r3, #8
 80059e8:	b21a      	sxth	r2, r3
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	b21b      	sxth	r3, r3
 80059ee:	4313      	orrs	r3, r2
 80059f0:	b21b      	sxth	r3, r3
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059fa:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005a40 <Read_MPU_Accl+0xa8>
 80059fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a02:	4b0e      	ldr	r3, [pc, #56]	; (8005a3c <Read_MPU_Accl+0xa4>)
 8005a04:	edc3 7a01 	vstr	s15, [r3, #4]
	accel[2] = (int16_t)((data[4]<<8) | data[5]) - ACCEL_Z_OFFSET;
 8005a08:	793b      	ldrb	r3, [r7, #4]
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	b21a      	sxth	r2, r3
 8005a0e:	797b      	ldrb	r3, [r7, #5]
 8005a10:	b21b      	sxth	r3, r3
 8005a12:	4313      	orrs	r3, r2
 8005a14:	b21b      	sxth	r3, r3
 8005a16:	ee07 3a90 	vmov	s15, r3
 8005a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a1e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005a44 <Read_MPU_Accl+0xac>
 8005a22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a26:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <Read_MPU_Accl+0xa4>)
 8005a28:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8005a2c:	bf00      	nop
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	2000fbf4 	.word	0x2000fbf4
 8005a38:	433e8000 	.word	0x433e8000
 8005a3c:	20011cf0 	.word	0x20011cf0
 8005a40:	42a00000 	.word	0x42a00000
 8005a44:	4473e000 	.word	0x4473e000

08005a48 <Exchange>:
void Exchange(){
 8005a48:	b598      	push	{r3, r4, r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
	lacceleration_g[0] = acceleration_g[0];
 8005a4c:	4b3a      	ldr	r3, [pc, #232]	; (8005b38 <Exchange+0xf0>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a3a      	ldr	r2, [pc, #232]	; (8005b3c <Exchange+0xf4>)
 8005a52:	6013      	str	r3, [r2, #0]
	lacceleration_g[1] = acceleration_g[1];
 8005a54:	4b38      	ldr	r3, [pc, #224]	; (8005b38 <Exchange+0xf0>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	4a38      	ldr	r2, [pc, #224]	; (8005b3c <Exchange+0xf4>)
 8005a5a:	6053      	str	r3, [r2, #4]
	lacceleration_g[2] = acceleration_g[2];
 8005a5c:	4b36      	ldr	r3, [pc, #216]	; (8005b38 <Exchange+0xf0>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	4a36      	ldr	r2, [pc, #216]	; (8005b3c <Exchange+0xf4>)
 8005a62:	6093      	str	r3, [r2, #8]
	langular_rate_dps[0] = angular_rate_dps[0];
 8005a64:	4b36      	ldr	r3, [pc, #216]	; (8005b40 <Exchange+0xf8>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a36      	ldr	r2, [pc, #216]	; (8005b44 <Exchange+0xfc>)
 8005a6a:	6013      	str	r3, [r2, #0]
	langular_rate_dps[1] = angular_rate_dps[1];
 8005a6c:	4b34      	ldr	r3, [pc, #208]	; (8005b40 <Exchange+0xf8>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	4a34      	ldr	r2, [pc, #208]	; (8005b44 <Exchange+0xfc>)
 8005a72:	6053      	str	r3, [r2, #4]
	langular_rate_dps[2] = angular_rate_dps[2];
 8005a74:	4b32      	ldr	r3, [pc, #200]	; (8005b40 <Exchange+0xf8>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	4a32      	ldr	r2, [pc, #200]	; (8005b44 <Exchange+0xfc>)
 8005a7a:	6093      	str	r3, [r2, #8]

	acceleration_g[0] = (accel[0] / 8192) ;
 8005a7c:	4b32      	ldr	r3, [pc, #200]	; (8005b48 <Exchange+0x100>)
 8005a7e:	ed93 7a00 	vldr	s14, [r3]
 8005a82:	eddf 6a32 	vldr	s13, [pc, #200]	; 8005b4c <Exchange+0x104>
 8005a86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a8a:	4b2b      	ldr	r3, [pc, #172]	; (8005b38 <Exchange+0xf0>)
 8005a8c:	edc3 7a00 	vstr	s15, [r3]
	acceleration_g[1] = (accel[1] / 8192) ;
 8005a90:	4b2d      	ldr	r3, [pc, #180]	; (8005b48 <Exchange+0x100>)
 8005a92:	ed93 7a01 	vldr	s14, [r3, #4]
 8005a96:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8005b4c <Exchange+0x104>
 8005a9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a9e:	4b26      	ldr	r3, [pc, #152]	; (8005b38 <Exchange+0xf0>)
 8005aa0:	edc3 7a01 	vstr	s15, [r3, #4]
	acceleration_g[2] = (accel[2] / 8192) ;
 8005aa4:	4b28      	ldr	r3, [pc, #160]	; (8005b48 <Exchange+0x100>)
 8005aa6:	ed93 7a02 	vldr	s14, [r3, #8]
 8005aaa:	eddf 6a28 	vldr	s13, [pc, #160]	; 8005b4c <Exchange+0x104>
 8005aae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ab2:	4b21      	ldr	r3, [pc, #132]	; (8005b38 <Exchange+0xf0>)
 8005ab4:	edc3 7a02 	vstr	s15, [r3, #8]

	angular_rate_dps[0] = (gyro[0] /16.4);
 8005ab8:	4b25      	ldr	r3, [pc, #148]	; (8005b50 <Exchange+0x108>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fa fce7 	bl	8000490 <__aeabi_f2d>
 8005ac2:	a31b      	add	r3, pc, #108	; (adr r3, 8005b30 <Exchange+0xe8>)
 8005ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac8:	f7fa fe60 	bl	800078c <__aeabi_ddiv>
 8005acc:	4603      	mov	r3, r0
 8005ace:	460c      	mov	r4, r1
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	f7fa ffe0 	bl	8000a98 <__aeabi_d2f>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	4b19      	ldr	r3, [pc, #100]	; (8005b40 <Exchange+0xf8>)
 8005adc:	601a      	str	r2, [r3, #0]
	angular_rate_dps[1] = (gyro[1] /16.4);
 8005ade:	4b1c      	ldr	r3, [pc, #112]	; (8005b50 <Exchange+0x108>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fa fcd4 	bl	8000490 <__aeabi_f2d>
 8005ae8:	a311      	add	r3, pc, #68	; (adr r3, 8005b30 <Exchange+0xe8>)
 8005aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aee:	f7fa fe4d 	bl	800078c <__aeabi_ddiv>
 8005af2:	4603      	mov	r3, r0
 8005af4:	460c      	mov	r4, r1
 8005af6:	4618      	mov	r0, r3
 8005af8:	4621      	mov	r1, r4
 8005afa:	f7fa ffcd 	bl	8000a98 <__aeabi_d2f>
 8005afe:	4602      	mov	r2, r0
 8005b00:	4b0f      	ldr	r3, [pc, #60]	; (8005b40 <Exchange+0xf8>)
 8005b02:	605a      	str	r2, [r3, #4]
	angular_rate_dps[2] = (gyro[2] /16.4);
 8005b04:	4b12      	ldr	r3, [pc, #72]	; (8005b50 <Exchange+0x108>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fa fcc1 	bl	8000490 <__aeabi_f2d>
 8005b0e:	a308      	add	r3, pc, #32	; (adr r3, 8005b30 <Exchange+0xe8>)
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f7fa fe3a 	bl	800078c <__aeabi_ddiv>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	4621      	mov	r1, r4
 8005b20:	f7fa ffba 	bl	8000a98 <__aeabi_d2f>
 8005b24:	4602      	mov	r2, r0
 8005b26:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <Exchange+0xf8>)
 8005b28:	609a      	str	r2, [r3, #8]
}
 8005b2a:	bf00      	nop
 8005b2c:	bd98      	pop	{r3, r4, r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	66666666 	.word	0x66666666
 8005b34:	40306666 	.word	0x40306666
 8005b38:	20013eac 	.word	0x20013eac
 8005b3c:	2000fce4 	.word	0x2000fce4
 8005b40:	20013ea0 	.word	0x20013ea0
 8005b44:	20013de8 	.word	0x20013de8
 8005b48:	20011cf0 	.word	0x20011cf0
 8005b4c:	46000000 	.word	0x46000000
 8005b50:	20013d90 	.word	0x20013d90
 8005b54:	00000000 	.word	0x00000000

08005b58 <Filter>:
void Filter(){
 8005b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b5c:	af00      	add	r7, sp, #0

	laccRoll = accRoll;
 8005b5e:	4bc2      	ldr	r3, [pc, #776]	; (8005e68 <Filter+0x310>)
 8005b60:	cb18      	ldmia	r3, {r3, r4}
 8005b62:	4ac2      	ldr	r2, [pc, #776]	; (8005e6c <Filter+0x314>)
 8005b64:	e882 0018 	stmia.w	r2, {r3, r4}
	laccPitch = accPitch;
 8005b68:	4bc1      	ldr	r3, [pc, #772]	; (8005e70 <Filter+0x318>)
 8005b6a:	cb18      	ldmia	r3, {r3, r4}
 8005b6c:	4ac1      	ldr	r2, [pc, #772]	; (8005e74 <Filter+0x31c>)
 8005b6e:	e882 0018 	stmia.w	r2, {r3, r4}
	//laccYaw = accYaw;
	accRoll = (1-alpha) * TO_DEG(atan2(acceleration_g[0],sqrt(acceleration_g[0] * acceleration_g[0] + acceleration_g[1] * acceleration_g[1] + acceleration_g[2] * acceleration_g[2]))) + alpha * laccRoll;
 8005b72:	4bc1      	ldr	r3, [pc, #772]	; (8005e78 <Filter+0x320>)
 8005b74:	cb18      	ldmia	r3, {r3, r4}
 8005b76:	461a      	mov	r2, r3
 8005b78:	4623      	mov	r3, r4
 8005b7a:	f04f 0000 	mov.w	r0, #0
 8005b7e:	49bf      	ldr	r1, [pc, #764]	; (8005e7c <Filter+0x324>)
 8005b80:	f7fa fb26 	bl	80001d0 <__aeabi_dsub>
 8005b84:	4603      	mov	r3, r0
 8005b86:	460c      	mov	r4, r1
 8005b88:	4625      	mov	r5, r4
 8005b8a:	461c      	mov	r4, r3
 8005b8c:	4bbc      	ldr	r3, [pc, #752]	; (8005e80 <Filter+0x328>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fa fc7d 	bl	8000490 <__aeabi_f2d>
 8005b96:	4680      	mov	r8, r0
 8005b98:	4689      	mov	r9, r1
 8005b9a:	4bb9      	ldr	r3, [pc, #740]	; (8005e80 <Filter+0x328>)
 8005b9c:	ed93 7a00 	vldr	s14, [r3]
 8005ba0:	4bb7      	ldr	r3, [pc, #732]	; (8005e80 <Filter+0x328>)
 8005ba2:	edd3 7a00 	vldr	s15, [r3]
 8005ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005baa:	4bb5      	ldr	r3, [pc, #724]	; (8005e80 <Filter+0x328>)
 8005bac:	edd3 6a01 	vldr	s13, [r3, #4]
 8005bb0:	4bb3      	ldr	r3, [pc, #716]	; (8005e80 <Filter+0x328>)
 8005bb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8005bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bbe:	4bb0      	ldr	r3, [pc, #704]	; (8005e80 <Filter+0x328>)
 8005bc0:	edd3 6a02 	vldr	s13, [r3, #8]
 8005bc4:	4bae      	ldr	r3, [pc, #696]	; (8005e80 <Filter+0x328>)
 8005bc6:	edd3 7a02 	vldr	s15, [r3, #8]
 8005bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bd2:	ee17 0a90 	vmov	r0, s15
 8005bd6:	f7fa fc5b 	bl	8000490 <__aeabi_f2d>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	ec43 2b10 	vmov	d0, r2, r3
 8005be2:	f001 f819 	bl	8006c18 <sqrt>
 8005be6:	eeb0 7a40 	vmov.f32	s14, s0
 8005bea:	eef0 7a60 	vmov.f32	s15, s1
 8005bee:	eeb0 1a47 	vmov.f32	s2, s14
 8005bf2:	eef0 1a67 	vmov.f32	s3, s15
 8005bf6:	ec49 8b10 	vmov	d0, r8, r9
 8005bfa:	f001 f80a 	bl	8006c12 <atan2>
 8005bfe:	ec51 0b10 	vmov	r0, r1, d0
 8005c02:	a397      	add	r3, pc, #604	; (adr r3, 8005e60 <Filter+0x308>)
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f7fa fc96 	bl	8000538 <__aeabi_dmul>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4620      	mov	r0, r4
 8005c12:	4629      	mov	r1, r5
 8005c14:	f7fa fc90 	bl	8000538 <__aeabi_dmul>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	461d      	mov	r5, r3
 8005c1e:	4626      	mov	r6, r4
 8005c20:	4b95      	ldr	r3, [pc, #596]	; (8005e78 <Filter+0x320>)
 8005c22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c26:	4b91      	ldr	r3, [pc, #580]	; (8005e6c <Filter+0x314>)
 8005c28:	cb18      	ldmia	r3, {r3, r4}
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	4623      	mov	r3, r4
 8005c2e:	f7fa fc83 	bl	8000538 <__aeabi_dmul>
 8005c32:	4603      	mov	r3, r0
 8005c34:	460c      	mov	r4, r1
 8005c36:	461a      	mov	r2, r3
 8005c38:	4623      	mov	r3, r4
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	f7fa fac9 	bl	80001d4 <__adddf3>
 8005c42:	4603      	mov	r3, r0
 8005c44:	460c      	mov	r4, r1
 8005c46:	4a88      	ldr	r2, [pc, #544]	; (8005e68 <Filter+0x310>)
 8005c48:	e882 0018 	stmia.w	r2, {r3, r4}
	accPitch = (1-alpha) * TO_DEG(atan2(acceleration_g[1],sqrt(acceleration_g[0] * acceleration_g[0] + acceleration_g[1] * acceleration_g[1] + acceleration_g[2] * acceleration_g[2]))) + alpha * laccPitch;
 8005c4c:	4b8a      	ldr	r3, [pc, #552]	; (8005e78 <Filter+0x320>)
 8005c4e:	cb18      	ldmia	r3, {r3, r4}
 8005c50:	461a      	mov	r2, r3
 8005c52:	4623      	mov	r3, r4
 8005c54:	f04f 0000 	mov.w	r0, #0
 8005c58:	4988      	ldr	r1, [pc, #544]	; (8005e7c <Filter+0x324>)
 8005c5a:	f7fa fab9 	bl	80001d0 <__aeabi_dsub>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	460c      	mov	r4, r1
 8005c62:	4625      	mov	r5, r4
 8005c64:	461c      	mov	r4, r3
 8005c66:	4b86      	ldr	r3, [pc, #536]	; (8005e80 <Filter+0x328>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fa fc10 	bl	8000490 <__aeabi_f2d>
 8005c70:	4680      	mov	r8, r0
 8005c72:	4689      	mov	r9, r1
 8005c74:	4b82      	ldr	r3, [pc, #520]	; (8005e80 <Filter+0x328>)
 8005c76:	ed93 7a00 	vldr	s14, [r3]
 8005c7a:	4b81      	ldr	r3, [pc, #516]	; (8005e80 <Filter+0x328>)
 8005c7c:	edd3 7a00 	vldr	s15, [r3]
 8005c80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c84:	4b7e      	ldr	r3, [pc, #504]	; (8005e80 <Filter+0x328>)
 8005c86:	edd3 6a01 	vldr	s13, [r3, #4]
 8005c8a:	4b7d      	ldr	r3, [pc, #500]	; (8005e80 <Filter+0x328>)
 8005c8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c98:	4b79      	ldr	r3, [pc, #484]	; (8005e80 <Filter+0x328>)
 8005c9a:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c9e:	4b78      	ldr	r3, [pc, #480]	; (8005e80 <Filter+0x328>)
 8005ca0:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cac:	ee17 0a90 	vmov	r0, s15
 8005cb0:	f7fa fbee 	bl	8000490 <__aeabi_f2d>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	ec43 2b10 	vmov	d0, r2, r3
 8005cbc:	f000 ffac 	bl	8006c18 <sqrt>
 8005cc0:	eeb0 7a40 	vmov.f32	s14, s0
 8005cc4:	eef0 7a60 	vmov.f32	s15, s1
 8005cc8:	eeb0 1a47 	vmov.f32	s2, s14
 8005ccc:	eef0 1a67 	vmov.f32	s3, s15
 8005cd0:	ec49 8b10 	vmov	d0, r8, r9
 8005cd4:	f000 ff9d 	bl	8006c12 <atan2>
 8005cd8:	ec51 0b10 	vmov	r0, r1, d0
 8005cdc:	a360      	add	r3, pc, #384	; (adr r3, 8005e60 <Filter+0x308>)
 8005cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce2:	f7fa fc29 	bl	8000538 <__aeabi_dmul>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4620      	mov	r0, r4
 8005cec:	4629      	mov	r1, r5
 8005cee:	f7fa fc23 	bl	8000538 <__aeabi_dmul>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	460c      	mov	r4, r1
 8005cf6:	461d      	mov	r5, r3
 8005cf8:	4626      	mov	r6, r4
 8005cfa:	4b5f      	ldr	r3, [pc, #380]	; (8005e78 <Filter+0x320>)
 8005cfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d00:	4b5c      	ldr	r3, [pc, #368]	; (8005e74 <Filter+0x31c>)
 8005d02:	cb18      	ldmia	r3, {r3, r4}
 8005d04:	461a      	mov	r2, r3
 8005d06:	4623      	mov	r3, r4
 8005d08:	f7fa fc16 	bl	8000538 <__aeabi_dmul>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	460c      	mov	r4, r1
 8005d10:	461a      	mov	r2, r3
 8005d12:	4623      	mov	r3, r4
 8005d14:	4628      	mov	r0, r5
 8005d16:	4631      	mov	r1, r6
 8005d18:	f7fa fa5c 	bl	80001d4 <__adddf3>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	4a53      	ldr	r2, [pc, #332]	; (8005e70 <Filter+0x318>)
 8005d22:	e882 0018 	stmia.w	r2, {r3, r4}
	//accYaw = (1-alpha) * TO_DEG(atan2(acceleration_g[2],sqrt(acceleration_g[0] * acceleration_g[0] + acceleration_g[1] * acceleration_g[1] + acceleration_g[2] * acceleration_g[2]))) + alpha * laccYaw;

	lgyroRoll = gyroRoll;
 8005d26:	4b57      	ldr	r3, [pc, #348]	; (8005e84 <Filter+0x32c>)
 8005d28:	cb18      	ldmia	r3, {r3, r4}
 8005d2a:	4a57      	ldr	r2, [pc, #348]	; (8005e88 <Filter+0x330>)
 8005d2c:	e882 0018 	stmia.w	r2, {r3, r4}
	lgyroPitch = gyroPitch;
 8005d30:	4b56      	ldr	r3, [pc, #344]	; (8005e8c <Filter+0x334>)
 8005d32:	cb18      	ldmia	r3, {r3, r4}
 8005d34:	4a56      	ldr	r2, [pc, #344]	; (8005e90 <Filter+0x338>)
 8005d36:	e882 0018 	stmia.w	r2, {r3, r4}
	//lgyroYaw = gyroYaw;
	gyroRoll = (1-alpha) * lgyroRoll + (1-alpha)*(angular_rate_dps[0]-langular_rate_dps[0]);
 8005d3a:	4b4f      	ldr	r3, [pc, #316]	; (8005e78 <Filter+0x320>)
 8005d3c:	cb18      	ldmia	r3, {r3, r4}
 8005d3e:	461a      	mov	r2, r3
 8005d40:	4623      	mov	r3, r4
 8005d42:	f04f 0000 	mov.w	r0, #0
 8005d46:	494d      	ldr	r1, [pc, #308]	; (8005e7c <Filter+0x324>)
 8005d48:	f7fa fa42 	bl	80001d0 <__aeabi_dsub>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	460c      	mov	r4, r1
 8005d50:	4618      	mov	r0, r3
 8005d52:	4621      	mov	r1, r4
 8005d54:	4b4c      	ldr	r3, [pc, #304]	; (8005e88 <Filter+0x330>)
 8005d56:	cb18      	ldmia	r3, {r3, r4}
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4623      	mov	r3, r4
 8005d5c:	f7fa fbec 	bl	8000538 <__aeabi_dmul>
 8005d60:	4603      	mov	r3, r0
 8005d62:	460c      	mov	r4, r1
 8005d64:	461d      	mov	r5, r3
 8005d66:	4626      	mov	r6, r4
 8005d68:	4b43      	ldr	r3, [pc, #268]	; (8005e78 <Filter+0x320>)
 8005d6a:	cb18      	ldmia	r3, {r3, r4}
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	4623      	mov	r3, r4
 8005d70:	f04f 0000 	mov.w	r0, #0
 8005d74:	4941      	ldr	r1, [pc, #260]	; (8005e7c <Filter+0x324>)
 8005d76:	f7fa fa2b 	bl	80001d0 <__aeabi_dsub>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	4698      	mov	r8, r3
 8005d80:	46a1      	mov	r9, r4
 8005d82:	4b44      	ldr	r3, [pc, #272]	; (8005e94 <Filter+0x33c>)
 8005d84:	ed93 7a00 	vldr	s14, [r3]
 8005d88:	4b43      	ldr	r3, [pc, #268]	; (8005e98 <Filter+0x340>)
 8005d8a:	edd3 7a00 	vldr	s15, [r3]
 8005d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d92:	ee17 0a90 	vmov	r0, s15
 8005d96:	f7fa fb7b 	bl	8000490 <__aeabi_f2d>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	461a      	mov	r2, r3
 8005da0:	4623      	mov	r3, r4
 8005da2:	4640      	mov	r0, r8
 8005da4:	4649      	mov	r1, r9
 8005da6:	f7fa fbc7 	bl	8000538 <__aeabi_dmul>
 8005daa:	4603      	mov	r3, r0
 8005dac:	460c      	mov	r4, r1
 8005dae:	461a      	mov	r2, r3
 8005db0:	4623      	mov	r3, r4
 8005db2:	4628      	mov	r0, r5
 8005db4:	4631      	mov	r1, r6
 8005db6:	f7fa fa0d 	bl	80001d4 <__adddf3>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	4a31      	ldr	r2, [pc, #196]	; (8005e84 <Filter+0x32c>)
 8005dc0:	e882 0018 	stmia.w	r2, {r3, r4}
	gyroPitch =(1-alpha) * lgyroPitch + (1-alpha)*(angular_rate_dps[1]-langular_rate_dps[1]);
 8005dc4:	4b2c      	ldr	r3, [pc, #176]	; (8005e78 <Filter+0x320>)
 8005dc6:	cb18      	ldmia	r3, {r3, r4}
 8005dc8:	461a      	mov	r2, r3
 8005dca:	4623      	mov	r3, r4
 8005dcc:	f04f 0000 	mov.w	r0, #0
 8005dd0:	492a      	ldr	r1, [pc, #168]	; (8005e7c <Filter+0x324>)
 8005dd2:	f7fa f9fd 	bl	80001d0 <__aeabi_dsub>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	460c      	mov	r4, r1
 8005dda:	4618      	mov	r0, r3
 8005ddc:	4621      	mov	r1, r4
 8005dde:	4b2c      	ldr	r3, [pc, #176]	; (8005e90 <Filter+0x338>)
 8005de0:	cb18      	ldmia	r3, {r3, r4}
 8005de2:	461a      	mov	r2, r3
 8005de4:	4623      	mov	r3, r4
 8005de6:	f7fa fba7 	bl	8000538 <__aeabi_dmul>
 8005dea:	4603      	mov	r3, r0
 8005dec:	460c      	mov	r4, r1
 8005dee:	461d      	mov	r5, r3
 8005df0:	4626      	mov	r6, r4
 8005df2:	4b21      	ldr	r3, [pc, #132]	; (8005e78 <Filter+0x320>)
 8005df4:	cb18      	ldmia	r3, {r3, r4}
 8005df6:	461a      	mov	r2, r3
 8005df8:	4623      	mov	r3, r4
 8005dfa:	f04f 0000 	mov.w	r0, #0
 8005dfe:	491f      	ldr	r1, [pc, #124]	; (8005e7c <Filter+0x324>)
 8005e00:	f7fa f9e6 	bl	80001d0 <__aeabi_dsub>
 8005e04:	4603      	mov	r3, r0
 8005e06:	460c      	mov	r4, r1
 8005e08:	4698      	mov	r8, r3
 8005e0a:	46a1      	mov	r9, r4
 8005e0c:	4b21      	ldr	r3, [pc, #132]	; (8005e94 <Filter+0x33c>)
 8005e0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005e12:	4b21      	ldr	r3, [pc, #132]	; (8005e98 <Filter+0x340>)
 8005e14:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e1c:	ee17 0a90 	vmov	r0, s15
 8005e20:	f7fa fb36 	bl	8000490 <__aeabi_f2d>
 8005e24:	4603      	mov	r3, r0
 8005e26:	460c      	mov	r4, r1
 8005e28:	461a      	mov	r2, r3
 8005e2a:	4623      	mov	r3, r4
 8005e2c:	4640      	mov	r0, r8
 8005e2e:	4649      	mov	r1, r9
 8005e30:	f7fa fb82 	bl	8000538 <__aeabi_dmul>
 8005e34:	4603      	mov	r3, r0
 8005e36:	460c      	mov	r4, r1
 8005e38:	461a      	mov	r2, r3
 8005e3a:	4623      	mov	r3, r4
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	4631      	mov	r1, r6
 8005e40:	f7fa f9c8 	bl	80001d4 <__adddf3>
 8005e44:	4603      	mov	r3, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	4a10      	ldr	r2, [pc, #64]	; (8005e8c <Filter+0x334>)
 8005e4a:	e882 0018 	stmia.w	r2, {r3, r4}
	//gyroPitch =(1-alpha) * lgyroYaw + (1-alpha)*(angular_rate_dps[2]-langular_rate_dps[2]);


	timeElapsed = HAL_GetTick() - lastMeasurment;
 8005e4e:	f7fb fc39 	bl	80016c4 <HAL_GetTick>
 8005e52:	4603      	mov	r3, r0
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fa faf9 	bl	800044c <__aeabi_ui2d>
 8005e5a:	4b10      	ldr	r3, [pc, #64]	; (8005e9c <Filter+0x344>)
 8005e5c:	e020      	b.n	8005ea0 <Filter+0x348>
 8005e5e:	bf00      	nop
 8005e60:	1a63cbb0 	.word	0x1a63cbb0
 8005e64:	404ca5dc 	.word	0x404ca5dc
 8005e68:	2000fc80 	.word	0x2000fc80
 8005e6c:	2000fc68 	.word	0x2000fc68
 8005e70:	2000fc98 	.word	0x2000fc98
 8005e74:	2000fca0 	.word	0x2000fca0
 8005e78:	20013ed0 	.word	0x20013ed0
 8005e7c:	3ff00000 	.word	0x3ff00000
 8005e80:	20013eac 	.word	0x20013eac
 8005e84:	2000fc48 	.word	0x2000fc48
 8005e88:	2000fc78 	.word	0x2000fc78
 8005e8c:	2000fc58 	.word	0x2000fc58
 8005e90:	2000fc88 	.word	0x2000fc88
 8005e94:	20013ea0 	.word	0x20013ea0
 8005e98:	20013de8 	.word	0x20013de8
 8005e9c:	20013e50 	.word	0x20013e50
 8005ea0:	cb18      	ldmia	r3, {r3, r4}
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	4623      	mov	r3, r4
 8005ea6:	f7fa f993 	bl	80001d0 <__aeabi_dsub>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	460c      	mov	r4, r1
 8005eae:	4a60      	ldr	r2, [pc, #384]	; (8006030 <Filter+0x4d8>)
 8005eb0:	e882 0018 	stmia.w	r2, {r3, r4}
	lastMeasurment = HAL_GetTick();
 8005eb4:	f7fb fc06 	bl	80016c4 <HAL_GetTick>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fa fac6 	bl	800044c <__aeabi_ui2d>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	4a5b      	ldr	r2, [pc, #364]	; (8006034 <Filter+0x4dc>)
 8005ec6:	e882 0018 	stmia.w	r2, {r3, r4}

	roll_tmp = ((1 - alpha) * (roll_tmp + gyroRoll * timeElapsed / 1000.0) + alpha * accRoll);
 8005eca:	4b5b      	ldr	r3, [pc, #364]	; (8006038 <Filter+0x4e0>)
 8005ecc:	cb18      	ldmia	r3, {r3, r4}
 8005ece:	461a      	mov	r2, r3
 8005ed0:	4623      	mov	r3, r4
 8005ed2:	f04f 0000 	mov.w	r0, #0
 8005ed6:	4959      	ldr	r1, [pc, #356]	; (800603c <Filter+0x4e4>)
 8005ed8:	f7fa f97a 	bl	80001d0 <__aeabi_dsub>
 8005edc:	4603      	mov	r3, r0
 8005ede:	460c      	mov	r4, r1
 8005ee0:	461d      	mov	r5, r3
 8005ee2:	4626      	mov	r6, r4
 8005ee4:	4b56      	ldr	r3, [pc, #344]	; (8006040 <Filter+0x4e8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fa fad1 	bl	8000490 <__aeabi_f2d>
 8005eee:	4680      	mov	r8, r0
 8005ef0:	4689      	mov	r9, r1
 8005ef2:	4b54      	ldr	r3, [pc, #336]	; (8006044 <Filter+0x4ec>)
 8005ef4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ef8:	4b4d      	ldr	r3, [pc, #308]	; (8006030 <Filter+0x4d8>)
 8005efa:	cb18      	ldmia	r3, {r3, r4}
 8005efc:	461a      	mov	r2, r3
 8005efe:	4623      	mov	r3, r4
 8005f00:	f7fa fb1a 	bl	8000538 <__aeabi_dmul>
 8005f04:	4603      	mov	r3, r0
 8005f06:	460c      	mov	r4, r1
 8005f08:	4618      	mov	r0, r3
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	4b4d      	ldr	r3, [pc, #308]	; (8006048 <Filter+0x4f0>)
 8005f12:	f7fa fc3b 	bl	800078c <__aeabi_ddiv>
 8005f16:	4603      	mov	r3, r0
 8005f18:	460c      	mov	r4, r1
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	4623      	mov	r3, r4
 8005f1e:	4640      	mov	r0, r8
 8005f20:	4649      	mov	r1, r9
 8005f22:	f7fa f957 	bl	80001d4 <__adddf3>
 8005f26:	4603      	mov	r3, r0
 8005f28:	460c      	mov	r4, r1
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4623      	mov	r3, r4
 8005f2e:	4628      	mov	r0, r5
 8005f30:	4631      	mov	r1, r6
 8005f32:	f7fa fb01 	bl	8000538 <__aeabi_dmul>
 8005f36:	4603      	mov	r3, r0
 8005f38:	460c      	mov	r4, r1
 8005f3a:	461d      	mov	r5, r3
 8005f3c:	4626      	mov	r6, r4
 8005f3e:	4b3e      	ldr	r3, [pc, #248]	; (8006038 <Filter+0x4e0>)
 8005f40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f44:	4b41      	ldr	r3, [pc, #260]	; (800604c <Filter+0x4f4>)
 8005f46:	cb18      	ldmia	r3, {r3, r4}
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4623      	mov	r3, r4
 8005f4c:	f7fa faf4 	bl	8000538 <__aeabi_dmul>
 8005f50:	4603      	mov	r3, r0
 8005f52:	460c      	mov	r4, r1
 8005f54:	461a      	mov	r2, r3
 8005f56:	4623      	mov	r3, r4
 8005f58:	4628      	mov	r0, r5
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	f7fa f93a 	bl	80001d4 <__adddf3>
 8005f60:	4603      	mov	r3, r0
 8005f62:	460c      	mov	r4, r1
 8005f64:	4618      	mov	r0, r3
 8005f66:	4621      	mov	r1, r4
 8005f68:	f7fa fd96 	bl	8000a98 <__aeabi_d2f>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	4b34      	ldr	r3, [pc, #208]	; (8006040 <Filter+0x4e8>)
 8005f70:	601a      	str	r2, [r3, #0]
	pitch_tmp = ((1 - alpha) * (pitch_tmp + gyroPitch * timeElapsed / 1000.0) + alpha * accPitch);
 8005f72:	4b31      	ldr	r3, [pc, #196]	; (8006038 <Filter+0x4e0>)
 8005f74:	cb18      	ldmia	r3, {r3, r4}
 8005f76:	461a      	mov	r2, r3
 8005f78:	4623      	mov	r3, r4
 8005f7a:	f04f 0000 	mov.w	r0, #0
 8005f7e:	492f      	ldr	r1, [pc, #188]	; (800603c <Filter+0x4e4>)
 8005f80:	f7fa f926 	bl	80001d0 <__aeabi_dsub>
 8005f84:	4603      	mov	r3, r0
 8005f86:	460c      	mov	r4, r1
 8005f88:	461d      	mov	r5, r3
 8005f8a:	4626      	mov	r6, r4
 8005f8c:	4b30      	ldr	r3, [pc, #192]	; (8006050 <Filter+0x4f8>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fa fa7d 	bl	8000490 <__aeabi_f2d>
 8005f96:	4680      	mov	r8, r0
 8005f98:	4689      	mov	r9, r1
 8005f9a:	4b2e      	ldr	r3, [pc, #184]	; (8006054 <Filter+0x4fc>)
 8005f9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fa0:	4b23      	ldr	r3, [pc, #140]	; (8006030 <Filter+0x4d8>)
 8005fa2:	cb18      	ldmia	r3, {r3, r4}
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4623      	mov	r3, r4
 8005fa8:	f7fa fac6 	bl	8000538 <__aeabi_dmul>
 8005fac:	4603      	mov	r3, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	4b23      	ldr	r3, [pc, #140]	; (8006048 <Filter+0x4f0>)
 8005fba:	f7fa fbe7 	bl	800078c <__aeabi_ddiv>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	4623      	mov	r3, r4
 8005fc6:	4640      	mov	r0, r8
 8005fc8:	4649      	mov	r1, r9
 8005fca:	f7fa f903 	bl	80001d4 <__adddf3>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	4623      	mov	r3, r4
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	4631      	mov	r1, r6
 8005fda:	f7fa faad 	bl	8000538 <__aeabi_dmul>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	461d      	mov	r5, r3
 8005fe4:	4626      	mov	r6, r4
 8005fe6:	4b14      	ldr	r3, [pc, #80]	; (8006038 <Filter+0x4e0>)
 8005fe8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fec:	4b1a      	ldr	r3, [pc, #104]	; (8006058 <Filter+0x500>)
 8005fee:	cb18      	ldmia	r3, {r3, r4}
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4623      	mov	r3, r4
 8005ff4:	f7fa faa0 	bl	8000538 <__aeabi_dmul>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	4623      	mov	r3, r4
 8006000:	4628      	mov	r0, r5
 8006002:	4631      	mov	r1, r6
 8006004:	f7fa f8e6 	bl	80001d4 <__adddf3>
 8006008:	4603      	mov	r3, r0
 800600a:	460c      	mov	r4, r1
 800600c:	4618      	mov	r0, r3
 800600e:	4621      	mov	r1, r4
 8006010:	f7fa fd42 	bl	8000a98 <__aeabi_d2f>
 8006014:	4602      	mov	r2, r0
 8006016:	4b0e      	ldr	r3, [pc, #56]	; (8006050 <Filter+0x4f8>)
 8006018:	601a      	str	r2, [r3, #0]
	//yaw = ((1 - alpha) * (yaw + gyroYaw * timeElapsed / 1000.0) + alpha * accYaw);

	roll = roll_tmp;
 800601a:	4b09      	ldr	r3, [pc, #36]	; (8006040 <Filter+0x4e8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a0f      	ldr	r2, [pc, #60]	; (800605c <Filter+0x504>)
 8006020:	6013      	str	r3, [r2, #0]
	pitch = pitch_tmp;
 8006022:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <Filter+0x4f8>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a0e      	ldr	r2, [pc, #56]	; (8006060 <Filter+0x508>)
 8006028:	6013      	str	r3, [r2, #0]
}
 800602a:	bf00      	nop
 800602c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006030:	20013ec8 	.word	0x20013ec8
 8006034:	20013e50 	.word	0x20013e50
 8006038:	20013ed0 	.word	0x20013ed0
 800603c:	3ff00000 	.word	0x3ff00000
 8006040:	2000fca8 	.word	0x2000fca8
 8006044:	2000fc48 	.word	0x2000fc48
 8006048:	408f4000 	.word	0x408f4000
 800604c:	2000fc80 	.word	0x2000fc80
 8006050:	20013e48 	.word	0x20013e48
 8006054:	2000fc58 	.word	0x2000fc58
 8006058:	2000fc98 	.word	0x2000fc98
 800605c:	20013ec0 	.word	0x20013ec0
 8006060:	20013ebc 	.word	0x20013ebc
 8006064:	00000000 	.word	0x00000000

08006068 <SineWave_generate>:
	hsin->amp = 1.0;
	hsin->freq = 1000;
}

void SineWave_generate(SineWaveHandler hsin, RangingData *dataFreq, RangingData *dataAmp)
{
 8006068:	b590      	push	{r4, r7, lr}
 800606a:	ed2d 8b02 	vpush	{d8}
 800606e:	b08b      	sub	sp, #44	; 0x2c
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
	hsin->freq = RANGE_MAX(dataFreq->range_mm, 40, 400);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	2b27      	cmp	r3, #39	; 0x27
 800607e:	d908      	bls.n	8006092 <SineWave_generate+0x2a>
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006088:	bf28      	it	cs
 800608a:	f44f 73c8 	movcs.w	r3, #400	; 0x190
 800608e:	b29a      	uxth	r2, r3
 8006090:	e000      	b.n	8006094 <SineWave_generate+0x2c>
 8006092:	2228      	movs	r2, #40	; 0x28
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	809a      	strh	r2, [r3, #4]
	float32_t temp = dataAmp->range_mm*0.001;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	4618      	mov	r0, r3
 800609e:	f7fa f9e5 	bl	800046c <__aeabi_i2d>
 80060a2:	a353      	add	r3, pc, #332	; (adr r3, 80061f0 <SineWave_generate+0x188>)
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f7fa fa46 	bl	8000538 <__aeabi_dmul>
 80060ac:	4603      	mov	r3, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	4618      	mov	r0, r3
 80060b2:	4621      	mov	r1, r4
 80060b4:	f7fa fcf0 	bl	8000a98 <__aeabi_d2f>
 80060b8:	4603      	mov	r3, r0
 80060ba:	61fb      	str	r3, [r7, #28]
	hsin->amp = RANGE_MAX(temp, 0.1, 0.4);
 80060bc:	69f8      	ldr	r0, [r7, #28]
 80060be:	f7fa f9e7 	bl	8000490 <__aeabi_f2d>
 80060c2:	a34d      	add	r3, pc, #308	; (adr r3, 80061f8 <SineWave_generate+0x190>)
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	f7fa fca8 	bl	8000a1c <__aeabi_dcmplt>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <SineWave_generate+0x6e>
 80060d2:	4b43      	ldr	r3, [pc, #268]	; (80061e0 <SineWave_generate+0x178>)
 80060d4:	e00d      	b.n	80060f2 <SineWave_generate+0x8a>
 80060d6:	69f8      	ldr	r0, [r7, #28]
 80060d8:	f7fa f9da 	bl	8000490 <__aeabi_f2d>
 80060dc:	a33c      	add	r3, pc, #240	; (adr r3, 80061d0 <SineWave_generate+0x168>)
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	f7fa fc9b 	bl	8000a1c <__aeabi_dcmplt>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <SineWave_generate+0x88>
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	e000      	b.n	80060f2 <SineWave_generate+0x8a>
 80060f0:	4b3c      	ldr	r3, [pc, #240]	; (80061e4 <SineWave_generate+0x17c>)
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	6013      	str	r3, [r2, #0]
	hsin->amp *=2;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	edd3 7a00 	vldr	s15, [r3]
 80060fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	edc3 7a00 	vstr	s15, [r3]
	hsin->sampleNum = hsin->freq;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	889b      	ldrh	r3, [r3, #4]
 800610a:	461a      	mov	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	60da      	str	r2, [r3, #12]
	float32_t step = 2.0*PI/hsin->sampleNum;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	4618      	mov	r0, r3
 8006116:	f7fa f999 	bl	800044c <__aeabi_ui2d>
 800611a:	4603      	mov	r3, r0
 800611c:	460c      	mov	r4, r1
 800611e:	461a      	mov	r2, r3
 8006120:	4623      	mov	r3, r4
 8006122:	a12d      	add	r1, pc, #180	; (adr r1, 80061d8 <SineWave_generate+0x170>)
 8006124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006128:	f7fa fb30 	bl	800078c <__aeabi_ddiv>
 800612c:	4603      	mov	r3, r0
 800612e:	460c      	mov	r4, r1
 8006130:	4618      	mov	r0, r3
 8006132:	4621      	mov	r1, r4
 8006134:	f7fa fcb0 	bl	8000a98 <__aeabi_d2f>
 8006138:	4603      	mov	r3, r0
 800613a:	61bb      	str	r3, [r7, #24]
	hsin->sampleNum = 2*hsin->sampleNum;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	005a      	lsls	r2, r3, #1
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	60da      	str	r2, [r3, #12]
	float32_t pos = 0;
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t sample;
	for(uint32_t i=0; i<hsin->sampleNum; i+=2)
 800614c:	2300      	movs	r3, #0
 800614e:	623b      	str	r3, [r7, #32]
 8006150:	e031      	b.n	80061b6 <SineWave_generate+0x14e>
	{
		sample = hsin->amp*((arm_sin_f32(pos))*(INT16_MAX));
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	ed93 8a00 	vldr	s16, [r3]
 8006158:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800615c:	f000 fcde 	bl	8006b1c <arm_sin_f32>
 8006160:	eeb0 7a40 	vmov.f32	s14, s0
 8006164:	eddf 7a20 	vldr	s15, [pc, #128]	; 80061e8 <SineWave_generate+0x180>
 8006168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8006170:	edc7 7a05 	vstr	s15, [r7, #20]
		prepare[i]= (uint16_t)sample;
 8006174:	edd7 7a05 	vldr	s15, [r7, #20]
 8006178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800617c:	edc7 7a00 	vstr	s15, [r7]
 8006180:	883b      	ldrh	r3, [r7, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	b219      	sxth	r1, r3
 8006186:	4a19      	ldr	r2, [pc, #100]	; (80061ec <SineWave_generate+0x184>)
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		prepare[i+1] = prepare[i];
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	3301      	adds	r3, #1
 8006192:	4916      	ldr	r1, [pc, #88]	; (80061ec <SineWave_generate+0x184>)
 8006194:	6a3a      	ldr	r2, [r7, #32]
 8006196:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800619a:	4a14      	ldr	r2, [pc, #80]	; (80061ec <SineWave_generate+0x184>)
 800619c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		//sampleShow = lookup[i];
		pos+=step;
 80061a0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80061a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80061a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061ac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for(uint32_t i=0; i<hsin->sampleNum; i+=2)
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	3302      	adds	r3, #2
 80061b4:	623b      	str	r3, [r7, #32]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d8c8      	bhi.n	8006152 <SineWave_generate+0xea>
	}
	//hsin->data = lookup;
}
 80061c0:	bf00      	nop
 80061c2:	372c      	adds	r7, #44	; 0x2c
 80061c4:	46bd      	mov	sp, r7
 80061c6:	ecbd 8b02 	vpop	{d8}
 80061ca:	bd90      	pop	{r4, r7, pc}
 80061cc:	f3af 8000 	nop.w
 80061d0:	9999999a 	.word	0x9999999a
 80061d4:	3fd99999 	.word	0x3fd99999
 80061d8:	60000000 	.word	0x60000000
 80061dc:	401921fb 	.word	0x401921fb
 80061e0:	3dcccccd 	.word	0x3dcccccd
 80061e4:	3ecccccd 	.word	0x3ecccccd
 80061e8:	46fffe00 	.word	0x46fffe00
 80061ec:	20007ea0 	.word	0x20007ea0
 80061f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80061f4:	3f50624d 	.word	0x3f50624d
 80061f8:	9999999a 	.word	0x9999999a
 80061fc:	3fb99999 	.word	0x3fb99999

08006200 <MX_GPIO_Init>:
void SystemClock_Config(void);
static void DFSDM_Init(void);
static void Playback_Init(void);
/* Private functions ---------------------------------------------------------*/
static void MX_GPIO_Init(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006206:	1d3b      	adds	r3, r7, #4
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	605a      	str	r2, [r3, #4]
 800620e:	609a      	str	r2, [r3, #8]
 8006210:	60da      	str	r2, [r3, #12]
 8006212:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006214:	4a11      	ldr	r2, [pc, #68]	; (800625c <MX_GPIO_Init+0x5c>)
 8006216:	4b11      	ldr	r3, [pc, #68]	; (800625c <MX_GPIO_Init+0x5c>)
 8006218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800621a:	f043 0301 	orr.w	r3, r3, #1
 800621e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006220:	4b0e      	ldr	r3, [pc, #56]	; (800625c <MX_GPIO_Init+0x5c>)
 8006222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	603b      	str	r3, [r7, #0]
 800622a:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XSHUT_GPIO_Port, XSHUT_Pin, GPIO_PIN_RESET);
 800622c:	2200      	movs	r2, #0
 800622e:	2101      	movs	r1, #1
 8006230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006234:	f7fc fb74 	bl	8002920 <HAL_GPIO_WritePin>


  /*Configure GPIO pin : XSHUT_Pin */
  GPIO_InitStruct.Pin = XSHUT_Pin;
 8006238:	2301      	movs	r3, #1
 800623a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800623c:	2301      	movs	r3, #1
 800623e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006240:	2300      	movs	r3, #0
 8006242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006244:	2300      	movs	r3, #0
 8006246:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(XSHUT_GPIO_Port, &GPIO_InitStruct);
 8006248:	1d3b      	adds	r3, r7, #4
 800624a:	4619      	mov	r1, r3
 800624c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006250:	f7fc f8ca 	bl	80023e8 <HAL_GPIO_Init>

}
 8006254:	bf00      	nop
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40021000 	.word	0x40021000

08006260 <main>:
int main(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
	HAL_Init();
 8006266:	f7fb f9e3 	bl	8001630 <HAL_Init>
//	ResultBuffer resultsFreq;

	RangingData dataAmp;
//	RangeStatus statusAmp;
//	ResultBuffer resultsAmp;
	SystemClock_Config();
 800626a:	f000 f855 	bl	8006318 <SystemClock_Config>
	MX_GPIO_Init();
 800626e:	f7ff ffc7 	bl	8006200 <MX_GPIO_Init>
	DFSDM_Init();
 8006272:	f000 f8b1 	bl	80063d8 <DFSDM_Init>
	Playback_Init();
 8006276:	f000 f92d 	bl	80064d4 <Playback_Init>
	Init_MPU();
 800627a:	f7ff fb09 	bl	8005890 <Init_MPU>

	if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&DfsdmFilterHandle, RecBuff, 2048))
 800627e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006282:	491f      	ldr	r1, [pc, #124]	; (8006300 <main+0xa0>)
 8006284:	481f      	ldr	r0, [pc, #124]	; (8006304 <main+0xa4>)
 8006286:	f7fb fd5b 	bl	8001d40 <HAL_DFSDM_FilterRegularStart_DMA>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <main+0x34>
	{
		Error_Handler();
 8006290:	f000 f9ae 	bl	80065f0 <Error_Handler>
	}


	SineWave_generate(hsin, &dataFreq, &dataAmp);
 8006294:	4b1c      	ldr	r3, [pc, #112]	; (8006308 <main+0xa8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	463a      	mov	r2, r7
 800629a:	f107 010c 	add.w	r1, r7, #12
 800629e:	4618      	mov	r0, r3
 80062a0:	f7ff fee2 	bl	8006068 <SineWave_generate>
	audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *) &lookup[0], hsin->sampleNum);
 80062a4:	4b19      	ldr	r3, [pc, #100]	; (800630c <main+0xac>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	4a17      	ldr	r2, [pc, #92]	; (8006308 <main+0xa8>)
 80062ac:	6812      	ldr	r2, [r2, #0]
 80062ae:	68d2      	ldr	r2, [r2, #12]
 80062b0:	b292      	uxth	r2, r2
 80062b2:	4917      	ldr	r1, [pc, #92]	; (8006310 <main+0xb0>)
 80062b4:	2094      	movs	r0, #148	; 0x94
 80062b6:	4798      	blx	r3
	HAL_SAI_Transmit_DMA(&SaiHandle, (uint8_t *) &lookup[0], hsin->sampleNum);
 80062b8:	4b13      	ldr	r3, [pc, #76]	; (8006308 <main+0xa8>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	461a      	mov	r2, r3
 80062c2:	4913      	ldr	r1, [pc, #76]	; (8006310 <main+0xb0>)
 80062c4:	4813      	ldr	r0, [pc, #76]	; (8006314 <main+0xb4>)
 80062c6:	f7ff f961 	bl	800558c <HAL_SAI_Transmit_DMA>

	while(1)
	{

		Read_MPU_Gyro();
 80062ca:	f7ff fb1f 	bl	800590c <Read_MPU_Gyro>
		Read_MPU_Accl();
 80062ce:	f7ff fb63 	bl	8005998 <Read_MPU_Accl>
		Exchange();
 80062d2:	f7ff fbb9 	bl	8005a48 <Exchange>
		Filter();
 80062d6:	f7ff fc3f 	bl	8005b58 <Filter>
		hsin->amp = 1;
 80062da:	4b0b      	ldr	r3, [pc, #44]	; (8006308 <main+0xa8>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80062e2:	601a      	str	r2, [r3, #0]
		hsin->freq =480;
 80062e4:	4b08      	ldr	r3, [pc, #32]	; (8006308 <main+0xa8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80062ec:	809a      	strh	r2, [r3, #4]
		SineWave_generate(hsin, &dataFreq, &dataAmp);
 80062ee:	4b06      	ldr	r3, [pc, #24]	; (8006308 <main+0xa8>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	463a      	mov	r2, r7
 80062f4:	f107 010c 	add.w	r1, r7, #12
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff feb5 	bl	8006068 <SineWave_generate>
		Read_MPU_Gyro();
 80062fe:	e7e4      	b.n	80062ca <main+0x6a>
 8006300:	2000fcf0 	.word	0x2000fcf0
 8006304:	20013df4 	.word	0x20013df4
 8006308:	20000038 	.word	0x20000038
 800630c:	20013de4 	.word	0x20013de4
 8006310:	200001a0 	.word	0x200001a0
 8006314:	20013cfc 	.word	0x20013cfc

08006318 <SystemClock_Config>:
 *            Flash Latency(WS)              = 4
 * @param  None
 * @retval None
 */
void SystemClock_Config(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b0b8      	sub	sp, #224	; 0xe0
 800631c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800631e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	605a      	str	r2, [r3, #4]
 8006328:	609a      	str	r2, [r3, #8]
 800632a:	60da      	str	r2, [r3, #12]
 800632c:	611a      	str	r2, [r3, #16]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800632e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006332:	2244      	movs	r2, #68	; 0x44
 8006334:	2100      	movs	r1, #0
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fc63 	bl	8006c02 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800633c:	463b      	mov	r3, r7
 800633e:	2288      	movs	r2, #136	; 0x88
 8006340:	2100      	movs	r1, #0
 8006342:	4618      	mov	r0, r3
 8006344:	f000 fc5d 	bl	8006c02 <memset>

	/* MSI is enabled after System reset, activate PLL with MSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8006348:	2310      	movs	r3, #16
 800634a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800634e:	2301      	movs	r3, #1
 8006350:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006354:	2360      	movs	r3, #96	; 0x60
 8006356:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800635a:	2300      	movs	r3, #0
 800635c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006360:	2302      	movs	r3, #2
 8006362:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006366:	2301      	movs	r3, #1
 8006368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLM = 1;
 800636c:	2301      	movs	r3, #1
 800636e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLN = 40;
 8006372:	2328      	movs	r3, #40	; 0x28
 8006374:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLR = 2;
 8006378:	2302      	movs	r3, #2
 800637a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLP = 7;
 800637e:	2307      	movs	r3, #7
 8006380:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8006384:	2304      	movs	r3, #4
 8006386:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800638a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800638e:	4618      	mov	r0, r3
 8006390:	f7fd f820 	bl	80033d4 <HAL_RCC_OscConfig>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d000      	beq.n	800639c <SystemClock_Config+0x84>
	{
		/* Initialization Error */
		while(1);
 800639a:	e7fe      	b.n	800639a <SystemClock_Config+0x82>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800639c:	230f      	movs	r3, #15
 800639e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80063a2:	2303      	movs	r3, #3
 80063a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80063a8:	2300      	movs	r3, #0
 80063aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80063ae:	2300      	movs	r3, #0
 80063b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80063b4:	2300      	movs	r3, #0
 80063b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80063ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80063be:	2104      	movs	r1, #4
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fd fb6b 	bl	8003a9c <HAL_RCC_ClockConfig>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d000      	beq.n	80063ce <SystemClock_Config+0xb6>
	{
		/* Initialization Error */
		while(1);
 80063cc:	e7fe      	b.n	80063cc <SystemClock_Config+0xb4>
	}
}
 80063ce:	bf00      	nop
 80063d0:	37e0      	adds	r7, #224	; 0xe0
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <DFSDM_Init>:
 * @brief  DFSDM channels and filter initialization
 * @param  None
 * @retval None
 */
static void DFSDM_Init(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
	/* Initialize channel 2 */
	__HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&DfsdmChannelHandle);
 80063dc:	4b38      	ldr	r3, [pc, #224]	; (80064c0 <DFSDM_Init+0xe8>)
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	DfsdmChannelHandle.Instance                      = DFSDM1_Channel2;
 80063e4:	4b36      	ldr	r3, [pc, #216]	; (80064c0 <DFSDM_Init+0xe8>)
 80063e6:	4a37      	ldr	r2, [pc, #220]	; (80064c4 <DFSDM_Init+0xec>)
 80063e8:	601a      	str	r2, [r3, #0]
	DfsdmChannelHandle.Init.OutputClock.Activation   = ENABLE;
 80063ea:	4b35      	ldr	r3, [pc, #212]	; (80064c0 <DFSDM_Init+0xe8>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	711a      	strb	r2, [r3, #4]
	DfsdmChannelHandle.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80063f0:	4b33      	ldr	r3, [pc, #204]	; (80064c0 <DFSDM_Init+0xe8>)
 80063f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80063f6:	609a      	str	r2, [r3, #8]
	DfsdmChannelHandle.Init.OutputClock.Divider      = 4; /* 11.294MHz/4 = 2.82MHz */
 80063f8:	4b31      	ldr	r3, [pc, #196]	; (80064c0 <DFSDM_Init+0xe8>)
 80063fa:	2204      	movs	r2, #4
 80063fc:	60da      	str	r2, [r3, #12]
	DfsdmChannelHandle.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80063fe:	4b30      	ldr	r3, [pc, #192]	; (80064c0 <DFSDM_Init+0xe8>)
 8006400:	2200      	movs	r2, #0
 8006402:	611a      	str	r2, [r3, #16]
	DfsdmChannelHandle.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE; /* N.U. */
 8006404:	4b2e      	ldr	r3, [pc, #184]	; (80064c0 <DFSDM_Init+0xe8>)
 8006406:	2200      	movs	r2, #0
 8006408:	615a      	str	r2, [r3, #20]
	DfsdmChannelHandle.Init.Input.Pins               = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800640a:	4b2d      	ldr	r3, [pc, #180]	; (80064c0 <DFSDM_Init+0xe8>)
 800640c:	2200      	movs	r2, #0
 800640e:	619a      	str	r2, [r3, #24]
	DfsdmChannelHandle.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_RISING;
 8006410:	4b2b      	ldr	r3, [pc, #172]	; (80064c0 <DFSDM_Init+0xe8>)
 8006412:	2200      	movs	r2, #0
 8006414:	61da      	str	r2, [r3, #28]
	DfsdmChannelHandle.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8006416:	4b2a      	ldr	r3, [pc, #168]	; (80064c0 <DFSDM_Init+0xe8>)
 8006418:	2204      	movs	r2, #4
 800641a:	621a      	str	r2, [r3, #32]
	DfsdmChannelHandle.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER; /* N.U. */
 800641c:	4b28      	ldr	r3, [pc, #160]	; (80064c0 <DFSDM_Init+0xe8>)
 800641e:	2200      	movs	r2, #0
 8006420:	625a      	str	r2, [r3, #36]	; 0x24
	DfsdmChannelHandle.Init.Awd.Oversampling         = 10; /* N.U. */
 8006422:	4b27      	ldr	r3, [pc, #156]	; (80064c0 <DFSDM_Init+0xe8>)
 8006424:	220a      	movs	r2, #10
 8006426:	629a      	str	r2, [r3, #40]	; 0x28
	DfsdmChannelHandle.Init.Offset                   = 0;
 8006428:	4b25      	ldr	r3, [pc, #148]	; (80064c0 <DFSDM_Init+0xe8>)
 800642a:	2200      	movs	r2, #0
 800642c:	62da      	str	r2, [r3, #44]	; 0x2c
	DfsdmChannelHandle.Init.RightBitShift            = 2;
 800642e:	4b24      	ldr	r3, [pc, #144]	; (80064c0 <DFSDM_Init+0xe8>)
 8006430:	2202      	movs	r2, #2
 8006432:	631a      	str	r2, [r3, #48]	; 0x30
	if(HAL_OK != HAL_DFSDM_ChannelInit(&DfsdmChannelHandle))
 8006434:	4822      	ldr	r0, [pc, #136]	; (80064c0 <DFSDM_Init+0xe8>)
 8006436:	f7fb faa3 	bl	8001980 <HAL_DFSDM_ChannelInit>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <DFSDM_Init+0x6c>
	{
		Error_Handler();
 8006440:	f000 f8d6 	bl	80065f0 <Error_Handler>
	}

	/* Initialize filter 0 */
	__HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&DfsdmFilterHandle);
 8006444:	4b20      	ldr	r3, [pc, #128]	; (80064c8 <DFSDM_Init+0xf0>)
 8006446:	2200      	movs	r2, #0
 8006448:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DfsdmFilterHandle.Instance                          = DFSDM1_Filter0;
 800644c:	4b1e      	ldr	r3, [pc, #120]	; (80064c8 <DFSDM_Init+0xf0>)
 800644e:	4a1f      	ldr	r2, [pc, #124]	; (80064cc <DFSDM_Init+0xf4>)
 8006450:	601a      	str	r2, [r3, #0]
	DfsdmFilterHandle.Init.RegularParam.Trigger         = DFSDM_FILTER_SW_TRIGGER;
 8006452:	4b1d      	ldr	r3, [pc, #116]	; (80064c8 <DFSDM_Init+0xf0>)
 8006454:	2200      	movs	r2, #0
 8006456:	605a      	str	r2, [r3, #4]
	DfsdmFilterHandle.Init.RegularParam.FastMode        = ENABLE;
 8006458:	4b1b      	ldr	r3, [pc, #108]	; (80064c8 <DFSDM_Init+0xf0>)
 800645a:	2201      	movs	r2, #1
 800645c:	721a      	strb	r2, [r3, #8]
	DfsdmFilterHandle.Init.RegularParam.DmaMode         = ENABLE;
 800645e:	4b1a      	ldr	r3, [pc, #104]	; (80064c8 <DFSDM_Init+0xf0>)
 8006460:	2201      	movs	r2, #1
 8006462:	725a      	strb	r2, [r3, #9]
	DfsdmFilterHandle.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER; /* N.U. */
 8006464:	4b18      	ldr	r3, [pc, #96]	; (80064c8 <DFSDM_Init+0xf0>)
 8006466:	2200      	movs	r2, #0
 8006468:	60da      	str	r2, [r3, #12]
	DfsdmFilterHandle.Init.InjectedParam.ScanMode       = ENABLE; /* N.U. */
 800646a:	4b17      	ldr	r3, [pc, #92]	; (80064c8 <DFSDM_Init+0xf0>)
 800646c:	2201      	movs	r2, #1
 800646e:	741a      	strb	r2, [r3, #16]
	DfsdmFilterHandle.Init.InjectedParam.DmaMode        = DISABLE; /* N.U. */
 8006470:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <DFSDM_Init+0xf0>)
 8006472:	2200      	movs	r2, #0
 8006474:	745a      	strb	r2, [r3, #17]
	DfsdmFilterHandle.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO; /* N.U. */
 8006476:	4b14      	ldr	r3, [pc, #80]	; (80064c8 <DFSDM_Init+0xf0>)
 8006478:	2200      	movs	r2, #0
 800647a:	615a      	str	r2, [r3, #20]
	DfsdmFilterHandle.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE; /* N.U. */
 800647c:	4b12      	ldr	r3, [pc, #72]	; (80064c8 <DFSDM_Init+0xf0>)
 800647e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006482:	619a      	str	r2, [r3, #24]
	DfsdmFilterHandle.Init.FilterParam.SincOrder        = DFSDM_FILTER_SINC3_ORDER;
 8006484:	4b10      	ldr	r3, [pc, #64]	; (80064c8 <DFSDM_Init+0xf0>)
 8006486:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800648a:	61da      	str	r2, [r3, #28]
	DfsdmFilterHandle.Init.FilterParam.Oversampling     = 64; /* 11.294MHz/(4*64) = 44.1KHz */
 800648c:	4b0e      	ldr	r3, [pc, #56]	; (80064c8 <DFSDM_Init+0xf0>)
 800648e:	2240      	movs	r2, #64	; 0x40
 8006490:	621a      	str	r2, [r3, #32]
	//DfsdmFilterHandle.Init.FilterParam.Oversampling     = 256; /* 11.294MHz/(4*64) = 44.1KHz */
	DfsdmFilterHandle.Init.FilterParam.IntOversampling  = 1;
 8006492:	4b0d      	ldr	r3, [pc, #52]	; (80064c8 <DFSDM_Init+0xf0>)
 8006494:	2201      	movs	r2, #1
 8006496:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_OK != HAL_DFSDM_FilterInit(&DfsdmFilterHandle))
 8006498:	480b      	ldr	r0, [pc, #44]	; (80064c8 <DFSDM_Init+0xf0>)
 800649a:	f7fb fb31 	bl	8001b00 <HAL_DFSDM_FilterInit>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <DFSDM_Init+0xd0>
	{
		Error_Handler();
 80064a4:	f000 f8a4 	bl	80065f0 <Error_Handler>
	}

	/* Configure regular channel and continuous mode for filter 0 */
	if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&DfsdmFilterHandle, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON))
 80064a8:	2201      	movs	r2, #1
 80064aa:	4909      	ldr	r1, [pc, #36]	; (80064d0 <DFSDM_Init+0xf8>)
 80064ac:	4806      	ldr	r0, [pc, #24]	; (80064c8 <DFSDM_Init+0xf0>)
 80064ae:	f7fb fc01 	bl	8001cb4 <HAL_DFSDM_FilterConfigRegChannel>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <DFSDM_Init+0xe4>
	{
		Error_Handler();
 80064b8:	f000 f89a 	bl	80065f0 <Error_Handler>
	}
}
 80064bc:	bf00      	nop
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	2000fcac 	.word	0x2000fcac
 80064c4:	40016040 	.word	0x40016040
 80064c8:	20013df4 	.word	0x20013df4
 80064cc:	40016100 	.word	0x40016100
 80064d0:	00020004 	.word	0x00020004

080064d4 <Playback_Init>:
 * @brief  Playback initialization
 * @param  None
 * @retval None
 */
static void Playback_Init(void)
{
 80064d4:	b598      	push	{r3, r4, r7, lr}
 80064d6:	af00      	add	r7, sp, #0
	/* Initialize SAI */
	__HAL_SAI_RESET_HANDLE_STATE(&SaiHandle);
 80064d8:	4b41      	ldr	r3, [pc, #260]	; (80065e0 <Playback_Init+0x10c>)
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	SaiHandle.Instance = SAI1_Block_A;
 80064e0:	4b3f      	ldr	r3, [pc, #252]	; (80065e0 <Playback_Init+0x10c>)
 80064e2:	4a40      	ldr	r2, [pc, #256]	; (80065e4 <Playback_Init+0x110>)
 80064e4:	601a      	str	r2, [r3, #0]

	SaiHandle.Init.AudioMode      = SAI_MODEMASTER_TX;
 80064e6:	4b3e      	ldr	r3, [pc, #248]	; (80065e0 <Playback_Init+0x10c>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	605a      	str	r2, [r3, #4]
	SaiHandle.Init.Synchro        = SAI_ASYNCHRONOUS;
 80064ec:	4b3c      	ldr	r3, [pc, #240]	; (80065e0 <Playback_Init+0x10c>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	609a      	str	r2, [r3, #8]
	SaiHandle.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 80064f2:	4b3b      	ldr	r3, [pc, #236]	; (80065e0 <Playback_Init+0x10c>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	60da      	str	r2, [r3, #12]
	SaiHandle.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 80064f8:	4b39      	ldr	r3, [pc, #228]	; (80065e0 <Playback_Init+0x10c>)
 80064fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80064fe:	611a      	str	r2, [r3, #16]
	SaiHandle.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8006500:	4b37      	ldr	r3, [pc, #220]	; (80065e0 <Playback_Init+0x10c>)
 8006502:	2200      	movs	r2, #0
 8006504:	615a      	str	r2, [r3, #20]
	SaiHandle.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8006506:	4b36      	ldr	r3, [pc, #216]	; (80065e0 <Playback_Init+0x10c>)
 8006508:	2201      	movs	r2, #1
 800650a:	619a      	str	r2, [r3, #24]
	//SaiHandle.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
	SaiHandle.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 800650c:	4b34      	ldr	r3, [pc, #208]	; (80065e0 <Playback_Init+0x10c>)
 800650e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8006512:	61da      	str	r2, [r3, #28]
	SaiHandle.Init.Mckdiv         = 0; /* N.U */
 8006514:	4b32      	ldr	r3, [pc, #200]	; (80065e0 <Playback_Init+0x10c>)
 8006516:	2200      	movs	r2, #0
 8006518:	621a      	str	r2, [r3, #32]
	SaiHandle.Init.MonoStereoMode = SAI_STEREOMODE;
 800651a:	4b31      	ldr	r3, [pc, #196]	; (80065e0 <Playback_Init+0x10c>)
 800651c:	2200      	movs	r2, #0
 800651e:	625a      	str	r2, [r3, #36]	; 0x24
	SaiHandle.Init.CompandingMode = SAI_NOCOMPANDING;
 8006520:	4b2f      	ldr	r3, [pc, #188]	; (80065e0 <Playback_Init+0x10c>)
 8006522:	2200      	movs	r2, #0
 8006524:	629a      	str	r2, [r3, #40]	; 0x28
	SaiHandle.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 8006526:	4b2e      	ldr	r3, [pc, #184]	; (80065e0 <Playback_Init+0x10c>)
 8006528:	2200      	movs	r2, #0
 800652a:	62da      	str	r2, [r3, #44]	; 0x2c
	SaiHandle.Init.Protocol       = SAI_FREE_PROTOCOL;
 800652c:	4b2c      	ldr	r3, [pc, #176]	; (80065e0 <Playback_Init+0x10c>)
 800652e:	2200      	movs	r2, #0
 8006530:	631a      	str	r2, [r3, #48]	; 0x30
	SaiHandle.Init.DataSize       = SAI_DATASIZE_16;
 8006532:	4b2b      	ldr	r3, [pc, #172]	; (80065e0 <Playback_Init+0x10c>)
 8006534:	2280      	movs	r2, #128	; 0x80
 8006536:	635a      	str	r2, [r3, #52]	; 0x34
	SaiHandle.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8006538:	4b29      	ldr	r3, [pc, #164]	; (80065e0 <Playback_Init+0x10c>)
 800653a:	2200      	movs	r2, #0
 800653c:	639a      	str	r2, [r3, #56]	; 0x38
	SaiHandle.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 800653e:	4b28      	ldr	r3, [pc, #160]	; (80065e0 <Playback_Init+0x10c>)
 8006540:	2200      	movs	r2, #0
 8006542:	63da      	str	r2, [r3, #60]	; 0x3c

	SaiHandle.FrameInit.FrameLength       = 32;
 8006544:	4b26      	ldr	r3, [pc, #152]	; (80065e0 <Playback_Init+0x10c>)
 8006546:	2220      	movs	r2, #32
 8006548:	641a      	str	r2, [r3, #64]	; 0x40
	SaiHandle.FrameInit.ActiveFrameLength = 16;
 800654a:	4b25      	ldr	r3, [pc, #148]	; (80065e0 <Playback_Init+0x10c>)
 800654c:	2210      	movs	r2, #16
 800654e:	645a      	str	r2, [r3, #68]	; 0x44
	SaiHandle.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8006550:	4b23      	ldr	r3, [pc, #140]	; (80065e0 <Playback_Init+0x10c>)
 8006552:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006556:	649a      	str	r2, [r3, #72]	; 0x48
	SaiHandle.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8006558:	4b21      	ldr	r3, [pc, #132]	; (80065e0 <Playback_Init+0x10c>)
 800655a:	2200      	movs	r2, #0
 800655c:	64da      	str	r2, [r3, #76]	; 0x4c
	SaiHandle.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800655e:	4b20      	ldr	r3, [pc, #128]	; (80065e0 <Playback_Init+0x10c>)
 8006560:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006564:	651a      	str	r2, [r3, #80]	; 0x50

	SaiHandle.SlotInit.FirstBitOffset = 0;
 8006566:	4b1e      	ldr	r3, [pc, #120]	; (80065e0 <Playback_Init+0x10c>)
 8006568:	2200      	movs	r2, #0
 800656a:	655a      	str	r2, [r3, #84]	; 0x54
	SaiHandle.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 800656c:	4b1c      	ldr	r3, [pc, #112]	; (80065e0 <Playback_Init+0x10c>)
 800656e:	2200      	movs	r2, #0
 8006570:	659a      	str	r2, [r3, #88]	; 0x58
	SaiHandle.SlotInit.SlotNumber     = 2;
 8006572:	4b1b      	ldr	r3, [pc, #108]	; (80065e0 <Playback_Init+0x10c>)
 8006574:	2202      	movs	r2, #2
 8006576:	65da      	str	r2, [r3, #92]	; 0x5c
	SaiHandle.SlotInit.SlotActive     = (SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1);
 8006578:	4b19      	ldr	r3, [pc, #100]	; (80065e0 <Playback_Init+0x10c>)
 800657a:	2203      	movs	r2, #3
 800657c:	661a      	str	r2, [r3, #96]	; 0x60

	if(HAL_OK != HAL_SAI_Init(&SaiHandle))
 800657e:	4818      	ldr	r0, [pc, #96]	; (80065e0 <Playback_Init+0x10c>)
 8006580:	f7fe fe9e 	bl	80052c0 <HAL_SAI_Init>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <Playback_Init+0xba>
	{
		Error_Handler();
 800658a:	f000 f831 	bl	80065f0 <Error_Handler>
	}

	/* Enable SAI to generate clock used by audio driver */
	__HAL_SAI_ENABLE(&SaiHandle);
 800658e:	4b14      	ldr	r3, [pc, #80]	; (80065e0 <Playback_Init+0x10c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a13      	ldr	r2, [pc, #76]	; (80065e0 <Playback_Init+0x10c>)
 8006594:	6812      	ldr	r2, [r2, #0]
 8006596:	6812      	ldr	r2, [r2, #0]
 8006598:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800659c:	601a      	str	r2, [r3, #0]

	/* Initialize audio driver */
	if(CS43L22_ID != cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS))
 800659e:	4b12      	ldr	r3, [pc, #72]	; (80065e8 <Playback_Init+0x114>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	2094      	movs	r0, #148	; 0x94
 80065a4:	4798      	blx	r3
 80065a6:	4603      	mov	r3, r0
 80065a8:	2be0      	cmp	r3, #224	; 0xe0
 80065aa:	d001      	beq.n	80065b0 <Playback_Init+0xdc>
	{
		Error_Handler();
 80065ac:	f000 f820 	bl	80065f0 <Error_Handler>
	}
	audio_drv = &cs43l22_drv;
 80065b0:	4b0e      	ldr	r3, [pc, #56]	; (80065ec <Playback_Init+0x118>)
 80065b2:	4a0d      	ldr	r2, [pc, #52]	; (80065e8 <Playback_Init+0x114>)
 80065b4:	601a      	str	r2, [r3, #0]
	audio_drv->Reset(AUDIO_I2C_ADDRESS);
 80065b6:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <Playback_Init+0x118>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	2094      	movs	r0, #148	; 0x94
 80065be:	4798      	blx	r3
	if(0 != audio_drv->Init(AUDIO_I2C_ADDRESS, OUTPUT_DEVICE_HEADPHONE, 60, AUDIO_FREQUENCY_44K))
 80065c0:	4b0a      	ldr	r3, [pc, #40]	; (80065ec <Playback_Init+0x118>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681c      	ldr	r4, [r3, #0]
 80065c6:	f64a 4344 	movw	r3, #44100	; 0xac44
 80065ca:	223c      	movs	r2, #60	; 0x3c
 80065cc:	2102      	movs	r1, #2
 80065ce:	2094      	movs	r0, #148	; 0x94
 80065d0:	47a0      	blx	r4
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <Playback_Init+0x108>
	{
		Error_Handler();
 80065d8:	f000 f80a 	bl	80065f0 <Error_Handler>
	}
}
 80065dc:	bf00      	nop
 80065de:	bd98      	pop	{r3, r4, r7, pc}
 80065e0:	20013cfc 	.word	0x20013cfc
 80065e4:	40015404 	.word	0x40015404
 80065e8:	20000000 	.word	0x20000000
 80065ec:	20013de4 	.word	0x20013de4

080065f0 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
	while (1)
	{
		/* Toggle LED4 with a period of one second */
		//BSP_LED_Toggle(LED4);
		//	HAL_GPIO_TogglePin(LD_Green_GPIO_Port, LD_Green_Pin);
		HAL_Delay(1000);
 80065f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065f8:	f7fb f870 	bl	80016dc <HAL_Delay>
 80065fc:	e7fa      	b.n	80065f4 <Error_Handler+0x4>
	...

08006600 <HAL_DFSDM_ChannelMspInit>:
 * @brief  Initializes the DFSDM channel MSP.
 * @param  hdfsdm_channel : DFSDM channel handle.
 * @retval None
 */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b0ac      	sub	sp, #176	; 0xb0
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
	/* Init of clock, gpio and PLLSAI1 clock */
	GPIO_InitTypeDef GPIO_Init;
	RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;

	/* Enable DFSDM clock */
	__HAL_RCC_DFSDM1_CLK_ENABLE();
 8006608:	4a2a      	ldr	r2, [pc, #168]	; (80066b4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 800660a:	4b2a      	ldr	r3, [pc, #168]	; (80066b4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 800660c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800660e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006612:	6613      	str	r3, [r2, #96]	; 0x60
 8006614:	4b27      	ldr	r3, [pc, #156]	; (80066b4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8006616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800661c:	613b      	str	r3, [r7, #16]
 800661e:	693b      	ldr	r3, [r7, #16]

	/* Configure PE9 for DFSDM_CKOUT and PE7 for DFSDM_DATIN2 */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8006620:	4a24      	ldr	r2, [pc, #144]	; (80066b4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8006622:	4b24      	ldr	r3, [pc, #144]	; (80066b4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8006624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006626:	f043 0310 	orr.w	r3, r3, #16
 800662a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800662c:	4b21      	ldr	r3, [pc, #132]	; (80066b4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 800662e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006630:	f003 0310 	and.w	r3, r3, #16
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	68fb      	ldr	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8006638:	2302      	movs	r3, #2
 800663a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	GPIO_Init.Pull      = GPIO_PULLDOWN;
 800663e:	2302      	movs	r3, #2
 8006640:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006644:	2303      	movs	r3, #3
 8006646:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	GPIO_Init.Alternate = GPIO_AF6_DFSDM1;
 800664a:	2306      	movs	r3, #6
 800664c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_Init.Pin = GPIO_PIN_9;
 8006650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006654:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_GPIO_Init(GPIOE, &GPIO_Init);
 8006658:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800665c:	4619      	mov	r1, r3
 800665e:	4816      	ldr	r0, [pc, #88]	; (80066b8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8006660:	f7fb fec2 	bl	80023e8 <HAL_GPIO_Init>
	GPIO_Init.Pin = GPIO_PIN_7;
 8006664:	2380      	movs	r3, #128	; 0x80
 8006666:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_GPIO_Init(GPIOE, &GPIO_Init);
 800666a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800666e:	4619      	mov	r1, r3
 8006670:	4811      	ldr	r0, [pc, #68]	; (80066b8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8006672:	f7fb feb9 	bl	80023e8 <HAL_GPIO_Init>

	/* Configure and enable PLLSAI1 clock to generate 11.294MHz */
	RCC_PeriphCLKInitStruct.PeriphClockSelection    = RCC_PERIPHCLK_SAI1;
 8006676:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800667a:	617b      	str	r3, [r7, #20]
	RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1Source   = RCC_PLLSOURCE_MSI;
 800667c:	2301      	movs	r3, #1
 800667e:	61bb      	str	r3, [r7, #24]
	RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1M        = 1;
 8006680:	2301      	movs	r3, #1
 8006682:	61fb      	str	r3, [r7, #28]
	RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1N        = 48;
 8006684:	2330      	movs	r3, #48	; 0x30
 8006686:	623b      	str	r3, [r7, #32]

	//RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1N        = 44;

	RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1P        = 17;
 8006688:	2311      	movs	r3, #17
 800668a:	627b      	str	r3, [r7, #36]	; 0x24

	//RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1P        = 17;

	RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 800668c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006690:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_PeriphCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI1;
 8006692:	2300      	movs	r3, #0
 8006694:	67bb      	str	r3, [r7, #120]	; 0x78
	if(HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
 8006696:	f107 0314 	add.w	r3, r7, #20
 800669a:	4618      	mov	r0, r3
 800669c:	f7fd fc10 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <HAL_DFSDM_ChannelMspInit+0xaa>
	{
		Error_Handler();
 80066a6:	f7ff ffa3 	bl	80065f0 <Error_Handler>
	}
}
 80066aa:	bf00      	nop
 80066ac:	37b0      	adds	r7, #176	; 0xb0
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	40021000 	.word	0x40021000
 80066b8:	48001000 	.word	0x48001000

080066bc <HAL_DFSDM_FilterMspInit>:
 * @brief  Initializes the DFSDM filter MSP.
 * @param  hdfsdm_filter : DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
	/* Configure DMA1_Channel4 */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80066c4:	4a21      	ldr	r2, [pc, #132]	; (800674c <HAL_DFSDM_FilterMspInit+0x90>)
 80066c6:	4b21      	ldr	r3, [pc, #132]	; (800674c <HAL_DFSDM_FilterMspInit+0x90>)
 80066c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ca:	f043 0301 	orr.w	r3, r3, #1
 80066ce:	6493      	str	r3, [r2, #72]	; 0x48
 80066d0:	4b1e      	ldr	r3, [pc, #120]	; (800674c <HAL_DFSDM_FilterMspInit+0x90>)
 80066d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	68fb      	ldr	r3, [r7, #12]
	hDfsdmDma.Init.Request             = DMA_REQUEST_0;
 80066dc:	4b1c      	ldr	r3, [pc, #112]	; (8006750 <HAL_DFSDM_FilterMspInit+0x94>)
 80066de:	2200      	movs	r2, #0
 80066e0:	605a      	str	r2, [r3, #4]
	hDfsdmDma.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80066e2:	4b1b      	ldr	r3, [pc, #108]	; (8006750 <HAL_DFSDM_FilterMspInit+0x94>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	609a      	str	r2, [r3, #8]
	hDfsdmDma.Init.PeriphInc           = DMA_PINC_DISABLE;
 80066e8:	4b19      	ldr	r3, [pc, #100]	; (8006750 <HAL_DFSDM_FilterMspInit+0x94>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	60da      	str	r2, [r3, #12]
	hDfsdmDma.Init.MemInc              = DMA_MINC_ENABLE;
 80066ee:	4b18      	ldr	r3, [pc, #96]	; (8006750 <HAL_DFSDM_FilterMspInit+0x94>)
 80066f0:	2280      	movs	r2, #128	; 0x80
 80066f2:	611a      	str	r2, [r3, #16]
	hDfsdmDma.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80066f4:	4b16      	ldr	r3, [pc, #88]	; (8006750 <HAL_DFSDM_FilterMspInit+0x94>)
 80066f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066fa:	615a      	str	r2, [r3, #20]
	hDfsdmDma.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80066fc:	4b14      	ldr	r3, [pc, #80]	; (8006750 <HAL_DFSDM_FilterMspInit+0x94>)
 80066fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006702:	619a      	str	r2, [r3, #24]
	hDfsdmDma.Init.Mode                = DMA_CIRCULAR;
 8006704:	4b12      	ldr	r3, [pc, #72]	; (8006750 <HAL_DFSDM_FilterMspInit+0x94>)
 8006706:	2220      	movs	r2, #32
 8006708:	61da      	str	r2, [r3, #28]
	hDfsdmDma.Init.Priority            = DMA_PRIORITY_HIGH;
 800670a:	4b11      	ldr	r3, [pc, #68]	; (8006750 <HAL_DFSDM_FilterMspInit+0x94>)
 800670c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006710:	621a      	str	r2, [r3, #32]
	hDfsdmDma.Instance                 = DMA1_Channel4;
 8006712:	4b0f      	ldr	r3, [pc, #60]	; (8006750 <HAL_DFSDM_FilterMspInit+0x94>)
 8006714:	4a0f      	ldr	r2, [pc, #60]	; (8006754 <HAL_DFSDM_FilterMspInit+0x98>)
 8006716:	601a      	str	r2, [r3, #0]
	__HAL_LINKDMA(hdfsdm_filter, hdmaReg, hDfsdmDma);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a0d      	ldr	r2, [pc, #52]	; (8006750 <HAL_DFSDM_FilterMspInit+0x94>)
 800671c:	629a      	str	r2, [r3, #40]	; 0x28
 800671e:	4a0c      	ldr	r2, [pc, #48]	; (8006750 <HAL_DFSDM_FilterMspInit+0x94>)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6293      	str	r3, [r2, #40]	; 0x28
	if (HAL_OK != HAL_DMA_Init(&hDfsdmDma))
 8006724:	480a      	ldr	r0, [pc, #40]	; (8006750 <HAL_DFSDM_FilterMspInit+0x94>)
 8006726:	f7fb fc67 	bl	8001ff8 <HAL_DMA_Init>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <HAL_DFSDM_FilterMspInit+0x78>
	{
		Error_Handler();
 8006730:	f7ff ff5e 	bl	80065f0 <Error_Handler>
	}
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0x01, 0);
 8006734:	2200      	movs	r2, #0
 8006736:	2101      	movs	r1, #1
 8006738:	200e      	movs	r0, #14
 800673a:	f7fb f8dc 	bl	80018f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800673e:	200e      	movs	r0, #14
 8006740:	f7fb f8f5 	bl	800192e <HAL_NVIC_EnableIRQ>
}
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40021000 	.word	0x40021000
 8006750:	20013e58 	.word	0x20013e58
 8006754:	40020044 	.word	0x40020044

08006758 <HAL_SAI_MspInit>:
 * @param  hsai : pointer to a SAI_HandleTypeDef structure that contains
 *                the configuration information for SAI module.
 * @retval None
 */
void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08a      	sub	sp, #40	; 0x28
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef  GPIO_Init;

	/* Enable SAI1 clock */
	__HAL_RCC_SAI1_CLK_ENABLE();
 8006760:	4a35      	ldr	r2, [pc, #212]	; (8006838 <HAL_SAI_MspInit+0xe0>)
 8006762:	4b35      	ldr	r3, [pc, #212]	; (8006838 <HAL_SAI_MspInit+0xe0>)
 8006764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006766:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800676a:	6613      	str	r3, [r2, #96]	; 0x60
 800676c:	4b32      	ldr	r3, [pc, #200]	; (8006838 <HAL_SAI_MspInit+0xe0>)
 800676e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006774:	613b      	str	r3, [r7, #16]
 8006776:	693b      	ldr	r3, [r7, #16]

	/* Configure GPIOs used for SAI1 */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8006778:	4a2f      	ldr	r2, [pc, #188]	; (8006838 <HAL_SAI_MspInit+0xe0>)
 800677a:	4b2f      	ldr	r3, [pc, #188]	; (8006838 <HAL_SAI_MspInit+0xe0>)
 800677c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677e:	f043 0310 	orr.w	r3, r3, #16
 8006782:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006784:	4b2c      	ldr	r3, [pc, #176]	; (8006838 <HAL_SAI_MspInit+0xe0>)
 8006786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006788:	f003 0310 	and.w	r3, r3, #16
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	68fb      	ldr	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8006790:	2302      	movs	r3, #2
 8006792:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Pull      = GPIO_NOPULL;
 8006794:	2300      	movs	r3, #0
 8006796:	61fb      	str	r3, [r7, #28]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006798:	2303      	movs	r3, #3
 800679a:	623b      	str	r3, [r7, #32]
	GPIO_Init.Alternate = GPIO_AF13_SAI1;
 800679c:	230d      	movs	r3, #13
 800679e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_Init.Pin       = (GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 80067a0:	2374      	movs	r3, #116	; 0x74
 80067a2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOE, &GPIO_Init);
 80067a4:	f107 0314 	add.w	r3, r7, #20
 80067a8:	4619      	mov	r1, r3
 80067aa:	4824      	ldr	r0, [pc, #144]	; (800683c <HAL_SAI_MspInit+0xe4>)
 80067ac:	f7fb fe1c 	bl	80023e8 <HAL_GPIO_Init>

	/* Configure DMA used for SAI1 */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80067b0:	4a21      	ldr	r2, [pc, #132]	; (8006838 <HAL_SAI_MspInit+0xe0>)
 80067b2:	4b21      	ldr	r3, [pc, #132]	; (8006838 <HAL_SAI_MspInit+0xe0>)
 80067b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067b6:	f043 0302 	orr.w	r3, r3, #2
 80067ba:	6493      	str	r3, [r2, #72]	; 0x48
 80067bc:	4b1e      	ldr	r3, [pc, #120]	; (8006838 <HAL_SAI_MspInit+0xe0>)
 80067be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	60bb      	str	r3, [r7, #8]
 80067c6:	68bb      	ldr	r3, [r7, #8]
	hSaiDma.Init.Request             = DMA_REQUEST_1;
 80067c8:	4b1d      	ldr	r3, [pc, #116]	; (8006840 <HAL_SAI_MspInit+0xe8>)
 80067ca:	2201      	movs	r2, #1
 80067cc:	605a      	str	r2, [r3, #4]
	hSaiDma.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80067ce:	4b1c      	ldr	r3, [pc, #112]	; (8006840 <HAL_SAI_MspInit+0xe8>)
 80067d0:	2210      	movs	r2, #16
 80067d2:	609a      	str	r2, [r3, #8]
	hSaiDma.Init.PeriphInc           = DMA_PINC_DISABLE;
 80067d4:	4b1a      	ldr	r3, [pc, #104]	; (8006840 <HAL_SAI_MspInit+0xe8>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	60da      	str	r2, [r3, #12]
	hSaiDma.Init.MemInc              = DMA_MINC_ENABLE;
 80067da:	4b19      	ldr	r3, [pc, #100]	; (8006840 <HAL_SAI_MspInit+0xe8>)
 80067dc:	2280      	movs	r2, #128	; 0x80
 80067de:	611a      	str	r2, [r3, #16]
	hSaiDma.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80067e0:	4b17      	ldr	r3, [pc, #92]	; (8006840 <HAL_SAI_MspInit+0xe8>)
 80067e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067e6:	615a      	str	r2, [r3, #20]
	hSaiDma.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 80067e8:	4b15      	ldr	r3, [pc, #84]	; (8006840 <HAL_SAI_MspInit+0xe8>)
 80067ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067ee:	619a      	str	r2, [r3, #24]
	hSaiDma.Init.Mode                = DMA_CIRCULAR;
 80067f0:	4b13      	ldr	r3, [pc, #76]	; (8006840 <HAL_SAI_MspInit+0xe8>)
 80067f2:	2220      	movs	r2, #32
 80067f4:	61da      	str	r2, [r3, #28]
	hSaiDma.Init.Priority            = DMA_PRIORITY_HIGH;
 80067f6:	4b12      	ldr	r3, [pc, #72]	; (8006840 <HAL_SAI_MspInit+0xe8>)
 80067f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80067fc:	621a      	str	r2, [r3, #32]
	hSaiDma.Instance                 = DMA2_Channel1;
 80067fe:	4b10      	ldr	r3, [pc, #64]	; (8006840 <HAL_SAI_MspInit+0xe8>)
 8006800:	4a10      	ldr	r2, [pc, #64]	; (8006844 <HAL_SAI_MspInit+0xec>)
 8006802:	601a      	str	r2, [r3, #0]
	__HAL_LINKDMA(hsai, hdmatx, hSaiDma);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a0e      	ldr	r2, [pc, #56]	; (8006840 <HAL_SAI_MspInit+0xe8>)
 8006808:	66da      	str	r2, [r3, #108]	; 0x6c
 800680a:	4a0d      	ldr	r2, [pc, #52]	; (8006840 <HAL_SAI_MspInit+0xe8>)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6293      	str	r3, [r2, #40]	; 0x28
	if (HAL_OK != HAL_DMA_Init(&hSaiDma))
 8006810:	480b      	ldr	r0, [pc, #44]	; (8006840 <HAL_SAI_MspInit+0xe8>)
 8006812:	f7fb fbf1 	bl	8001ff8 <HAL_DMA_Init>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <HAL_SAI_MspInit+0xc8>
	{
		Error_Handler();
 800681c:	f7ff fee8 	bl	80065f0 <Error_Handler>
	}
	HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0x01, 0);
 8006820:	2200      	movs	r2, #0
 8006822:	2101      	movs	r1, #1
 8006824:	2038      	movs	r0, #56	; 0x38
 8006826:	f7fb f866 	bl	80018f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800682a:	2038      	movs	r0, #56	; 0x38
 800682c:	f7fb f87f 	bl	800192e <HAL_NVIC_EnableIRQ>
}
 8006830:	bf00      	nop
 8006832:	3728      	adds	r7, #40	; 0x28
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	40021000 	.word	0x40021000
 800683c:	48001000 	.word	0x48001000
 8006840:	20013d9c 	.word	0x20013d9c
 8006844:	40020408 	.word	0x40020408

08006848 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
 * @brief  Half regular conversion complete callback.
 * @param  hdfsdm_filter : DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
	DmaRecHalfBuffCplt = 1;
 8006850:	4b04      	ldr	r3, [pc, #16]	; (8006864 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8006852:	2201      	movs	r2, #1
 8006854:	601a      	str	r2, [r3, #0]
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	2000fba0 	.word	0x2000fba0

08006868 <HAL_DFSDM_FilterRegConvCpltCallback>:
            using HAL_DFSDM_FilterGetRegularValue.
 * @param  hdfsdm_filter : DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
	DmaRecBuffCplt = 1;
 8006870:	4b04      	ldr	r3, [pc, #16]	; (8006884 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8006872:	2201      	movs	r2, #1
 8006874:	601a      	str	r2, [r3, #0]
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	2000fba4 	.word	0x2000fba4

08006888 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
	memcpy(lookup, prepare, 2*hsin->sampleNum);
 8006890:	4b0a      	ldr	r3, [pc, #40]	; (80068bc <HAL_SAI_TxCpltCallback+0x34>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	461a      	mov	r2, r3
 800689a:	4909      	ldr	r1, [pc, #36]	; (80068c0 <HAL_SAI_TxCpltCallback+0x38>)
 800689c:	4809      	ldr	r0, [pc, #36]	; (80068c4 <HAL_SAI_TxCpltCallback+0x3c>)
 800689e:	f000 f9a5 	bl	8006bec <memcpy>
	HAL_SAI_Transmit_DMA(hsai, (uint8_t*)&lookup[0], hsin->sampleNum);
 80068a2:	4b06      	ldr	r3, [pc, #24]	; (80068bc <HAL_SAI_TxCpltCallback+0x34>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	461a      	mov	r2, r3
 80068ac:	4905      	ldr	r1, [pc, #20]	; (80068c4 <HAL_SAI_TxCpltCallback+0x3c>)
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7fe fe6c 	bl	800558c <HAL_SAI_Transmit_DMA>
}
 80068b4:	bf00      	nop
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	20000038 	.word	0x20000038
 80068c0:	20007ea0 	.word	0x20007ea0
 80068c4:	200001a0 	.word	0x200001a0

080068c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068ce:	4a0f      	ldr	r2, [pc, #60]	; (800690c <HAL_MspInit+0x44>)
 80068d0:	4b0e      	ldr	r3, [pc, #56]	; (800690c <HAL_MspInit+0x44>)
 80068d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068d4:	f043 0301 	orr.w	r3, r3, #1
 80068d8:	6613      	str	r3, [r2, #96]	; 0x60
 80068da:	4b0c      	ldr	r3, [pc, #48]	; (800690c <HAL_MspInit+0x44>)
 80068dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	607b      	str	r3, [r7, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80068e6:	4a09      	ldr	r2, [pc, #36]	; (800690c <HAL_MspInit+0x44>)
 80068e8:	4b08      	ldr	r3, [pc, #32]	; (800690c <HAL_MspInit+0x44>)
 80068ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f0:	6593      	str	r3, [r2, #88]	; 0x58
 80068f2:	4b06      	ldr	r3, [pc, #24]	; (800690c <HAL_MspInit+0x44>)
 80068f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068fa:	603b      	str	r3, [r7, #0]
 80068fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	40021000 	.word	0x40021000

08006910 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b08a      	sub	sp, #40	; 0x28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006918:	f107 0314 	add.w	r3, r7, #20
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	605a      	str	r2, [r3, #4]
 8006922:	609a      	str	r2, [r3, #8]
 8006924:	60da      	str	r2, [r3, #12]
 8006926:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a17      	ldr	r2, [pc, #92]	; (800698c <HAL_I2C_MspInit+0x7c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d127      	bne.n	8006982 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006932:	4a17      	ldr	r2, [pc, #92]	; (8006990 <HAL_I2C_MspInit+0x80>)
 8006934:	4b16      	ldr	r3, [pc, #88]	; (8006990 <HAL_I2C_MspInit+0x80>)
 8006936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006938:	f043 0302 	orr.w	r3, r3, #2
 800693c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800693e:	4b14      	ldr	r3, [pc, #80]	; (8006990 <HAL_I2C_MspInit+0x80>)
 8006940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	613b      	str	r3, [r7, #16]
 8006948:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800694a:	23c0      	movs	r3, #192	; 0xc0
 800694c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800694e:	2312      	movs	r3, #18
 8006950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006952:	2301      	movs	r3, #1
 8006954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006956:	2303      	movs	r3, #3
 8006958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800695a:	2304      	movs	r3, #4
 800695c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800695e:	f107 0314 	add.w	r3, r7, #20
 8006962:	4619      	mov	r1, r3
 8006964:	480b      	ldr	r0, [pc, #44]	; (8006994 <HAL_I2C_MspInit+0x84>)
 8006966:	f7fb fd3f 	bl	80023e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800696a:	4a09      	ldr	r2, [pc, #36]	; (8006990 <HAL_I2C_MspInit+0x80>)
 800696c:	4b08      	ldr	r3, [pc, #32]	; (8006990 <HAL_I2C_MspInit+0x80>)
 800696e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006970:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006974:	6593      	str	r3, [r2, #88]	; 0x58
 8006976:	4b06      	ldr	r3, [pc, #24]	; (8006990 <HAL_I2C_MspInit+0x80>)
 8006978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800697a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006982:	bf00      	nop
 8006984:	3728      	adds	r7, #40	; 0x28
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	40005400 	.word	0x40005400
 8006990:	40021000 	.word	0x40021000
 8006994:	48000400 	.word	0x48000400

08006998 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]

  if(hi2c->Instance==I2C1)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a08      	ldr	r2, [pc, #32]	; (80069c8 <HAL_I2C_MspDeInit+0x30>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d109      	bne.n	80069be <HAL_I2C_MspDeInit+0x26>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80069aa:	4a08      	ldr	r2, [pc, #32]	; (80069cc <HAL_I2C_MspDeInit+0x34>)
 80069ac:	4b07      	ldr	r3, [pc, #28]	; (80069cc <HAL_I2C_MspDeInit+0x34>)
 80069ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069b4:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80069b6:	21c0      	movs	r1, #192	; 0xc0
 80069b8:	4805      	ldr	r0, [pc, #20]	; (80069d0 <HAL_I2C_MspDeInit+0x38>)
 80069ba:	f7fb febd 	bl	8002738 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80069be:	bf00      	nop
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	40005400 	.word	0x40005400
 80069cc:	40021000 	.word	0x40021000
 80069d0:	48000400 	.word	0x48000400

080069d4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
}
 80069d8:	bf00      	nop
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80069e2:	b480      	push	{r7}
 80069e4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80069e6:	e7fe      	b.n	80069e6 <HardFault_Handler+0x4>

080069e8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80069ec:	e7fe      	b.n	80069ec <MemManage_Handler+0x4>

080069ee <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80069ee:	b480      	push	{r7}
 80069f0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80069f2:	e7fe      	b.n	80069f2 <BusFault_Handler+0x4>

080069f4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80069f8:	e7fe      	b.n	80069f8 <UsageFault_Handler+0x4>

080069fa <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80069fa:	b480      	push	{r7}
 80069fc:	af00      	add	r7, sp, #0
}
 80069fe:	bf00      	nop
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	af00      	add	r7, sp, #0
}
 8006a0c:	bf00      	nop
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8006a16:	b480      	push	{r7}
 8006a18:	af00      	add	r7, sp, #0
}
 8006a1a:	bf00      	nop
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8006a28:	f7fa fe3e 	bl	80016a8 <HAL_IncTick>
}
 8006a2c:	bf00      	nop
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <DMA1_Channel4_IRQHandler>:
  * @brief  This function handles DMA1_Channel4 interrupt request.
  * @param  None
  * @retval None
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hDfsdmDma);
 8006a34:	4802      	ldr	r0, [pc, #8]	; (8006a40 <DMA1_Channel4_IRQHandler+0x10>)
 8006a36:	f7fb fbf7 	bl	8002228 <HAL_DMA_IRQHandler>
}
 8006a3a:	bf00      	nop
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20013e58 	.word	0x20013e58

08006a44 <DMA2_Channel1_IRQHandler>:
  * @brief  This function handles SAI DMA interrupt request.
  * @param  None
  * @retval None
  */
void DMA2_Channel1_IRQHandler(void)
{ 
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(SaiHandle.hdmatx);
 8006a48:	4b03      	ldr	r3, [pc, #12]	; (8006a58 <DMA2_Channel1_IRQHandler+0x14>)
 8006a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fb fbeb 	bl	8002228 <HAL_DMA_IRQHandler>
}
 8006a52:	bf00      	nop
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20013cfc 	.word	0x20013cfc

08006a5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a60:	4a17      	ldr	r2, [pc, #92]	; (8006ac0 <SystemInit+0x64>)
 8006a62:	4b17      	ldr	r3, [pc, #92]	; (8006ac0 <SystemInit+0x64>)
 8006a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006a70:	4a14      	ldr	r2, [pc, #80]	; (8006ac4 <SystemInit+0x68>)
 8006a72:	4b14      	ldr	r3, [pc, #80]	; (8006ac4 <SystemInit+0x68>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f043 0301 	orr.w	r3, r3, #1
 8006a7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006a7c:	4b11      	ldr	r3, [pc, #68]	; (8006ac4 <SystemInit+0x68>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8006a82:	4a10      	ldr	r2, [pc, #64]	; (8006ac4 <SystemInit+0x68>)
 8006a84:	4b0f      	ldr	r3, [pc, #60]	; (8006ac4 <SystemInit+0x68>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006a8c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006a90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8006a92:	4b0c      	ldr	r3, [pc, #48]	; (8006ac4 <SystemInit+0x68>)
 8006a94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a98:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006a9a:	4a0a      	ldr	r2, [pc, #40]	; (8006ac4 <SystemInit+0x68>)
 8006a9c:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <SystemInit+0x68>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aa4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006aa6:	4b07      	ldr	r3, [pc, #28]	; (8006ac4 <SystemInit+0x68>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006aac:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <SystemInit+0x64>)
 8006aae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ab2:	609a      	str	r2, [r3, #8]
#endif
}
 8006ab4:	bf00      	nop
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	e000ed00 	.word	0xe000ed00
 8006ac4:	40021000 	.word	0x40021000

08006ac8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006acc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006ace:	e003      	b.n	8006ad8 <LoopCopyDataInit>

08006ad0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006ad0:	4b0c      	ldr	r3, [pc, #48]	; (8006b04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006ad2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006ad4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006ad6:	3104      	adds	r1, #4

08006ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006ad8:	480b      	ldr	r0, [pc, #44]	; (8006b08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006ada:	4b0c      	ldr	r3, [pc, #48]	; (8006b0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8006adc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006ade:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006ae0:	d3f6      	bcc.n	8006ad0 <CopyDataInit>
	ldr	r2, =_sbss
 8006ae2:	4a0b      	ldr	r2, [pc, #44]	; (8006b10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006ae4:	e002      	b.n	8006aec <LoopFillZerobss>

08006ae6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006ae6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006ae8:	f842 3b04 	str.w	r3, [r2], #4

08006aec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006aec:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <LoopForever+0x16>)
	cmp	r2, r3
 8006aee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006af0:	d3f9      	bcc.n	8006ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006af2:	f7ff ffb3 	bl	8006a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006af6:	f000 f855 	bl	8006ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006afa:	f7ff fbb1 	bl	8006260 <main>

08006afe <LoopForever>:

LoopForever:
    b LoopForever
 8006afe:	e7fe      	b.n	8006afe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006b00:	20017fff 	.word	0x20017fff
	ldr	r3, =_sidata
 8006b04:	08007c10 	.word	0x08007c10
	ldr	r0, =_sdata
 8006b08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006b0c:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 8006b10:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 8006b14:	20013ed8 	.word	0x20013ed8

08006b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006b18:	e7fe      	b.n	8006b18 <ADC1_2_IRQHandler>
	...

08006b1c <arm_sin_f32>:
 8006b1c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006b98 <arm_sin_f32+0x7c>
 8006b20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b24:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b2c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8006b30:	d42c      	bmi.n	8006b8c <arm_sin_f32+0x70>
 8006b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b36:	eddf 6a19 	vldr	s13, [pc, #100]	; 8006b9c <arm_sin_f32+0x80>
 8006b3a:	4a19      	ldr	r2, [pc, #100]	; (8006ba0 <arm_sin_f32+0x84>)
 8006b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b40:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006b44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006b48:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b50:	bfa8      	it	ge
 8006b52:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 8006b56:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8006b5a:	ee17 3a10 	vmov	r3, s14
 8006b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b62:	ee07 3a10 	vmov	s14, r3
 8006b66:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006b6a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8006b6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b72:	edd1 6a01 	vldr	s13, [r1, #4]
 8006b76:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006b7a:	ed91 0a00 	vldr	s0, [r1]
 8006b7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006b82:	ee27 0a00 	vmul.f32	s0, s14, s0
 8006b86:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006b8a:	4770      	bx	lr
 8006b8c:	ee17 3a90 	vmov	r3, s15
 8006b90:	3b01      	subs	r3, #1
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	e7cc      	b.n	8006b32 <arm_sin_f32+0x16>
 8006b98:	3e22f983 	.word	0x3e22f983
 8006b9c:	44000000 	.word	0x44000000
 8006ba0:	080073bc 	.word	0x080073bc

08006ba4 <__libc_init_array>:
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	4e0d      	ldr	r6, [pc, #52]	; (8006bdc <__libc_init_array+0x38>)
 8006ba8:	4c0d      	ldr	r4, [pc, #52]	; (8006be0 <__libc_init_array+0x3c>)
 8006baa:	1ba4      	subs	r4, r4, r6
 8006bac:	10a4      	asrs	r4, r4, #2
 8006bae:	2500      	movs	r5, #0
 8006bb0:	42a5      	cmp	r5, r4
 8006bb2:	d109      	bne.n	8006bc8 <__libc_init_array+0x24>
 8006bb4:	4e0b      	ldr	r6, [pc, #44]	; (8006be4 <__libc_init_array+0x40>)
 8006bb6:	4c0c      	ldr	r4, [pc, #48]	; (8006be8 <__libc_init_array+0x44>)
 8006bb8:	f000 fbce 	bl	8007358 <_init>
 8006bbc:	1ba4      	subs	r4, r4, r6
 8006bbe:	10a4      	asrs	r4, r4, #2
 8006bc0:	2500      	movs	r5, #0
 8006bc2:	42a5      	cmp	r5, r4
 8006bc4:	d105      	bne.n	8006bd2 <__libc_init_array+0x2e>
 8006bc6:	bd70      	pop	{r4, r5, r6, pc}
 8006bc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bcc:	4798      	blx	r3
 8006bce:	3501      	adds	r5, #1
 8006bd0:	e7ee      	b.n	8006bb0 <__libc_init_array+0xc>
 8006bd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bd6:	4798      	blx	r3
 8006bd8:	3501      	adds	r5, #1
 8006bda:	e7f2      	b.n	8006bc2 <__libc_init_array+0x1e>
 8006bdc:	08007c08 	.word	0x08007c08
 8006be0:	08007c08 	.word	0x08007c08
 8006be4:	08007c08 	.word	0x08007c08
 8006be8:	08007c0c 	.word	0x08007c0c

08006bec <memcpy>:
 8006bec:	b510      	push	{r4, lr}
 8006bee:	1e43      	subs	r3, r0, #1
 8006bf0:	440a      	add	r2, r1
 8006bf2:	4291      	cmp	r1, r2
 8006bf4:	d100      	bne.n	8006bf8 <memcpy+0xc>
 8006bf6:	bd10      	pop	{r4, pc}
 8006bf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c00:	e7f7      	b.n	8006bf2 <memcpy+0x6>

08006c02 <memset>:
 8006c02:	4402      	add	r2, r0
 8006c04:	4603      	mov	r3, r0
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d100      	bne.n	8006c0c <memset+0xa>
 8006c0a:	4770      	bx	lr
 8006c0c:	f803 1b01 	strb.w	r1, [r3], #1
 8006c10:	e7f9      	b.n	8006c06 <memset+0x4>

08006c12 <atan2>:
 8006c12:	f000 b85d 	b.w	8006cd0 <__ieee754_atan2>
	...

08006c18 <sqrt>:
 8006c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c1c:	ed2d 8b02 	vpush	{d8}
 8006c20:	b08b      	sub	sp, #44	; 0x2c
 8006c22:	ec55 4b10 	vmov	r4, r5, d0
 8006c26:	f000 f92d 	bl	8006e84 <__ieee754_sqrt>
 8006c2a:	4b26      	ldr	r3, [pc, #152]	; (8006cc4 <sqrt+0xac>)
 8006c2c:	eeb0 8a40 	vmov.f32	s16, s0
 8006c30:	eef0 8a60 	vmov.f32	s17, s1
 8006c34:	f993 6000 	ldrsb.w	r6, [r3]
 8006c38:	1c73      	adds	r3, r6, #1
 8006c3a:	d02a      	beq.n	8006c92 <sqrt+0x7a>
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	462b      	mov	r3, r5
 8006c40:	4620      	mov	r0, r4
 8006c42:	4629      	mov	r1, r5
 8006c44:	f7f9 ff12 	bl	8000a6c <__aeabi_dcmpun>
 8006c48:	4607      	mov	r7, r0
 8006c4a:	bb10      	cbnz	r0, 8006c92 <sqrt+0x7a>
 8006c4c:	f04f 0800 	mov.w	r8, #0
 8006c50:	f04f 0900 	mov.w	r9, #0
 8006c54:	4642      	mov	r2, r8
 8006c56:	464b      	mov	r3, r9
 8006c58:	4620      	mov	r0, r4
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	f7f9 fede 	bl	8000a1c <__aeabi_dcmplt>
 8006c60:	b1b8      	cbz	r0, 8006c92 <sqrt+0x7a>
 8006c62:	2301      	movs	r3, #1
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	4b18      	ldr	r3, [pc, #96]	; (8006cc8 <sqrt+0xb0>)
 8006c68:	9301      	str	r3, [sp, #4]
 8006c6a:	9708      	str	r7, [sp, #32]
 8006c6c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006c70:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006c74:	b9b6      	cbnz	r6, 8006ca4 <sqrt+0x8c>
 8006c76:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006c7a:	4668      	mov	r0, sp
 8006c7c:	f000 fb63 	bl	8007346 <matherr>
 8006c80:	b1d0      	cbz	r0, 8006cb8 <sqrt+0xa0>
 8006c82:	9b08      	ldr	r3, [sp, #32]
 8006c84:	b11b      	cbz	r3, 8006c8e <sqrt+0x76>
 8006c86:	f000 fb61 	bl	800734c <__errno>
 8006c8a:	9b08      	ldr	r3, [sp, #32]
 8006c8c:	6003      	str	r3, [r0, #0]
 8006c8e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006c92:	eeb0 0a48 	vmov.f32	s0, s16
 8006c96:	eef0 0a68 	vmov.f32	s1, s17
 8006c9a:	b00b      	add	sp, #44	; 0x2c
 8006c9c:	ecbd 8b02 	vpop	{d8}
 8006ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ca4:	4642      	mov	r2, r8
 8006ca6:	464b      	mov	r3, r9
 8006ca8:	4640      	mov	r0, r8
 8006caa:	4649      	mov	r1, r9
 8006cac:	f7f9 fd6e 	bl	800078c <__aeabi_ddiv>
 8006cb0:	2e02      	cmp	r6, #2
 8006cb2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006cb6:	d1e0      	bne.n	8006c7a <sqrt+0x62>
 8006cb8:	f000 fb48 	bl	800734c <__errno>
 8006cbc:	2321      	movs	r3, #33	; 0x21
 8006cbe:	6003      	str	r3, [r0, #0]
 8006cc0:	e7df      	b.n	8006c82 <sqrt+0x6a>
 8006cc2:	bf00      	nop
 8006cc4:	200000a4 	.word	0x200000a4
 8006cc8:	08007bc0 	.word	0x08007bc0
 8006ccc:	00000000 	.word	0x00000000

08006cd0 <__ieee754_atan2>:
 8006cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cd4:	ec57 6b11 	vmov	r6, r7, d1
 8006cd8:	4273      	negs	r3, r6
 8006cda:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006cde:	4333      	orrs	r3, r6
 8006ce0:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8006e80 <__ieee754_atan2+0x1b0>
 8006ce4:	ec51 0b10 	vmov	r0, r1, d0
 8006ce8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006cec:	4563      	cmp	r3, ip
 8006cee:	ee11 8a10 	vmov	r8, s2
 8006cf2:	ee10 9a10 	vmov	r9, s0
 8006cf6:	468e      	mov	lr, r1
 8006cf8:	d807      	bhi.n	8006d0a <__ieee754_atan2+0x3a>
 8006cfa:	4244      	negs	r4, r0
 8006cfc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006d00:	4304      	orrs	r4, r0
 8006d02:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006d06:	4564      	cmp	r4, ip
 8006d08:	d907      	bls.n	8006d1a <__ieee754_atan2+0x4a>
 8006d0a:	4632      	mov	r2, r6
 8006d0c:	463b      	mov	r3, r7
 8006d0e:	f7f9 fa61 	bl	80001d4 <__adddf3>
 8006d12:	ec41 0b10 	vmov	d0, r0, r1
 8006d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d1a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006d1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006d22:	4334      	orrs	r4, r6
 8006d24:	d103      	bne.n	8006d2e <__ieee754_atan2+0x5e>
 8006d26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d2a:	f000 b95d 	b.w	8006fe8 <atan>
 8006d2e:	17bc      	asrs	r4, r7, #30
 8006d30:	f004 0402 	and.w	r4, r4, #2
 8006d34:	ea59 0903 	orrs.w	r9, r9, r3
 8006d38:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006d3c:	d107      	bne.n	8006d4e <__ieee754_atan2+0x7e>
 8006d3e:	2c02      	cmp	r4, #2
 8006d40:	d030      	beq.n	8006da4 <__ieee754_atan2+0xd4>
 8006d42:	2c03      	cmp	r4, #3
 8006d44:	d1e5      	bne.n	8006d12 <__ieee754_atan2+0x42>
 8006d46:	a13c      	add	r1, pc, #240	; (adr r1, 8006e38 <__ieee754_atan2+0x168>)
 8006d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d4c:	e7e1      	b.n	8006d12 <__ieee754_atan2+0x42>
 8006d4e:	ea58 0802 	orrs.w	r8, r8, r2
 8006d52:	d106      	bne.n	8006d62 <__ieee754_atan2+0x92>
 8006d54:	f1be 0f00 	cmp.w	lr, #0
 8006d58:	da6a      	bge.n	8006e30 <__ieee754_atan2+0x160>
 8006d5a:	a139      	add	r1, pc, #228	; (adr r1, 8006e40 <__ieee754_atan2+0x170>)
 8006d5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d60:	e7d7      	b.n	8006d12 <__ieee754_atan2+0x42>
 8006d62:	4562      	cmp	r2, ip
 8006d64:	d122      	bne.n	8006dac <__ieee754_atan2+0xdc>
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d111      	bne.n	8006d8e <__ieee754_atan2+0xbe>
 8006d6a:	2c02      	cmp	r4, #2
 8006d6c:	d007      	beq.n	8006d7e <__ieee754_atan2+0xae>
 8006d6e:	2c03      	cmp	r4, #3
 8006d70:	d009      	beq.n	8006d86 <__ieee754_atan2+0xb6>
 8006d72:	2c01      	cmp	r4, #1
 8006d74:	d156      	bne.n	8006e24 <__ieee754_atan2+0x154>
 8006d76:	a134      	add	r1, pc, #208	; (adr r1, 8006e48 <__ieee754_atan2+0x178>)
 8006d78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d7c:	e7c9      	b.n	8006d12 <__ieee754_atan2+0x42>
 8006d7e:	a134      	add	r1, pc, #208	; (adr r1, 8006e50 <__ieee754_atan2+0x180>)
 8006d80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d84:	e7c5      	b.n	8006d12 <__ieee754_atan2+0x42>
 8006d86:	a134      	add	r1, pc, #208	; (adr r1, 8006e58 <__ieee754_atan2+0x188>)
 8006d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d8c:	e7c1      	b.n	8006d12 <__ieee754_atan2+0x42>
 8006d8e:	2c02      	cmp	r4, #2
 8006d90:	d008      	beq.n	8006da4 <__ieee754_atan2+0xd4>
 8006d92:	2c03      	cmp	r4, #3
 8006d94:	d0d7      	beq.n	8006d46 <__ieee754_atan2+0x76>
 8006d96:	2c01      	cmp	r4, #1
 8006d98:	f04f 0000 	mov.w	r0, #0
 8006d9c:	d146      	bne.n	8006e2c <__ieee754_atan2+0x15c>
 8006d9e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006da2:	e7b6      	b.n	8006d12 <__ieee754_atan2+0x42>
 8006da4:	a12e      	add	r1, pc, #184	; (adr r1, 8006e60 <__ieee754_atan2+0x190>)
 8006da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006daa:	e7b2      	b.n	8006d12 <__ieee754_atan2+0x42>
 8006dac:	4563      	cmp	r3, ip
 8006dae:	d0d1      	beq.n	8006d54 <__ieee754_atan2+0x84>
 8006db0:	1a9b      	subs	r3, r3, r2
 8006db2:	151b      	asrs	r3, r3, #20
 8006db4:	2b3c      	cmp	r3, #60	; 0x3c
 8006db6:	dc1e      	bgt.n	8006df6 <__ieee754_atan2+0x126>
 8006db8:	2f00      	cmp	r7, #0
 8006dba:	da01      	bge.n	8006dc0 <__ieee754_atan2+0xf0>
 8006dbc:	333c      	adds	r3, #60	; 0x3c
 8006dbe:	db1e      	blt.n	8006dfe <__ieee754_atan2+0x12e>
 8006dc0:	4632      	mov	r2, r6
 8006dc2:	463b      	mov	r3, r7
 8006dc4:	f7f9 fce2 	bl	800078c <__aeabi_ddiv>
 8006dc8:	ec41 0b10 	vmov	d0, r0, r1
 8006dcc:	f000 fab4 	bl	8007338 <fabs>
 8006dd0:	f000 f90a 	bl	8006fe8 <atan>
 8006dd4:	ec51 0b10 	vmov	r0, r1, d0
 8006dd8:	2c01      	cmp	r4, #1
 8006dda:	d013      	beq.n	8006e04 <__ieee754_atan2+0x134>
 8006ddc:	2c02      	cmp	r4, #2
 8006dde:	d014      	beq.n	8006e0a <__ieee754_atan2+0x13a>
 8006de0:	2c00      	cmp	r4, #0
 8006de2:	d096      	beq.n	8006d12 <__ieee754_atan2+0x42>
 8006de4:	a320      	add	r3, pc, #128	; (adr r3, 8006e68 <__ieee754_atan2+0x198>)
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	f7f9 f9f1 	bl	80001d0 <__aeabi_dsub>
 8006dee:	a31c      	add	r3, pc, #112	; (adr r3, 8006e60 <__ieee754_atan2+0x190>)
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	e013      	b.n	8006e1e <__ieee754_atan2+0x14e>
 8006df6:	a11e      	add	r1, pc, #120	; (adr r1, 8006e70 <__ieee754_atan2+0x1a0>)
 8006df8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dfc:	e7ec      	b.n	8006dd8 <__ieee754_atan2+0x108>
 8006dfe:	2000      	movs	r0, #0
 8006e00:	2100      	movs	r1, #0
 8006e02:	e7e9      	b.n	8006dd8 <__ieee754_atan2+0x108>
 8006e04:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006e08:	e783      	b.n	8006d12 <__ieee754_atan2+0x42>
 8006e0a:	a317      	add	r3, pc, #92	; (adr r3, 8006e68 <__ieee754_atan2+0x198>)
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	f7f9 f9de 	bl	80001d0 <__aeabi_dsub>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	a111      	add	r1, pc, #68	; (adr r1, 8006e60 <__ieee754_atan2+0x190>)
 8006e1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e1e:	f7f9 f9d7 	bl	80001d0 <__aeabi_dsub>
 8006e22:	e776      	b.n	8006d12 <__ieee754_atan2+0x42>
 8006e24:	a114      	add	r1, pc, #80	; (adr r1, 8006e78 <__ieee754_atan2+0x1a8>)
 8006e26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e2a:	e772      	b.n	8006d12 <__ieee754_atan2+0x42>
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	e770      	b.n	8006d12 <__ieee754_atan2+0x42>
 8006e30:	a10f      	add	r1, pc, #60	; (adr r1, 8006e70 <__ieee754_atan2+0x1a0>)
 8006e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e36:	e76c      	b.n	8006d12 <__ieee754_atan2+0x42>
 8006e38:	54442d18 	.word	0x54442d18
 8006e3c:	c00921fb 	.word	0xc00921fb
 8006e40:	54442d18 	.word	0x54442d18
 8006e44:	bff921fb 	.word	0xbff921fb
 8006e48:	54442d18 	.word	0x54442d18
 8006e4c:	bfe921fb 	.word	0xbfe921fb
 8006e50:	7f3321d2 	.word	0x7f3321d2
 8006e54:	4002d97c 	.word	0x4002d97c
 8006e58:	7f3321d2 	.word	0x7f3321d2
 8006e5c:	c002d97c 	.word	0xc002d97c
 8006e60:	54442d18 	.word	0x54442d18
 8006e64:	400921fb 	.word	0x400921fb
 8006e68:	33145c07 	.word	0x33145c07
 8006e6c:	3ca1a626 	.word	0x3ca1a626
 8006e70:	54442d18 	.word	0x54442d18
 8006e74:	3ff921fb 	.word	0x3ff921fb
 8006e78:	54442d18 	.word	0x54442d18
 8006e7c:	3fe921fb 	.word	0x3fe921fb
 8006e80:	7ff00000 	.word	0x7ff00000

08006e84 <__ieee754_sqrt>:
 8006e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e88:	ec55 4b10 	vmov	r4, r5, d0
 8006e8c:	4e54      	ldr	r6, [pc, #336]	; (8006fe0 <__ieee754_sqrt+0x15c>)
 8006e8e:	43ae      	bics	r6, r5
 8006e90:	ee10 0a10 	vmov	r0, s0
 8006e94:	462b      	mov	r3, r5
 8006e96:	462a      	mov	r2, r5
 8006e98:	4621      	mov	r1, r4
 8006e9a:	d113      	bne.n	8006ec4 <__ieee754_sqrt+0x40>
 8006e9c:	ee10 2a10 	vmov	r2, s0
 8006ea0:	462b      	mov	r3, r5
 8006ea2:	ee10 0a10 	vmov	r0, s0
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	f7f9 fb46 	bl	8000538 <__aeabi_dmul>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	f7f9 f98e 	bl	80001d4 <__adddf3>
 8006eb8:	4604      	mov	r4, r0
 8006eba:	460d      	mov	r5, r1
 8006ebc:	ec45 4b10 	vmov	d0, r4, r5
 8006ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec4:	2d00      	cmp	r5, #0
 8006ec6:	dc10      	bgt.n	8006eea <__ieee754_sqrt+0x66>
 8006ec8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006ecc:	4330      	orrs	r0, r6
 8006ece:	d0f5      	beq.n	8006ebc <__ieee754_sqrt+0x38>
 8006ed0:	b15d      	cbz	r5, 8006eea <__ieee754_sqrt+0x66>
 8006ed2:	ee10 2a10 	vmov	r2, s0
 8006ed6:	462b      	mov	r3, r5
 8006ed8:	4620      	mov	r0, r4
 8006eda:	4629      	mov	r1, r5
 8006edc:	f7f9 f978 	bl	80001d0 <__aeabi_dsub>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	f7f9 fc52 	bl	800078c <__aeabi_ddiv>
 8006ee8:	e7e6      	b.n	8006eb8 <__ieee754_sqrt+0x34>
 8006eea:	151b      	asrs	r3, r3, #20
 8006eec:	d10c      	bne.n	8006f08 <__ieee754_sqrt+0x84>
 8006eee:	2a00      	cmp	r2, #0
 8006ef0:	d06d      	beq.n	8006fce <__ieee754_sqrt+0x14a>
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	02d6      	lsls	r6, r2, #11
 8006ef6:	d56e      	bpl.n	8006fd6 <__ieee754_sqrt+0x152>
 8006ef8:	1e44      	subs	r4, r0, #1
 8006efa:	1b1b      	subs	r3, r3, r4
 8006efc:	f1c0 0420 	rsb	r4, r0, #32
 8006f00:	fa21 f404 	lsr.w	r4, r1, r4
 8006f04:	4322      	orrs	r2, r4
 8006f06:	4081      	lsls	r1, r0
 8006f08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006f0c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006f10:	07dd      	lsls	r5, r3, #31
 8006f12:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006f16:	bf42      	ittt	mi
 8006f18:	0052      	lslmi	r2, r2, #1
 8006f1a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8006f1e:	0049      	lslmi	r1, r1, #1
 8006f20:	1058      	asrs	r0, r3, #1
 8006f22:	2500      	movs	r5, #0
 8006f24:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8006f28:	441a      	add	r2, r3
 8006f2a:	0049      	lsls	r1, r1, #1
 8006f2c:	2316      	movs	r3, #22
 8006f2e:	462c      	mov	r4, r5
 8006f30:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006f34:	19a7      	adds	r7, r4, r6
 8006f36:	4297      	cmp	r7, r2
 8006f38:	bfde      	ittt	le
 8006f3a:	1bd2      	suble	r2, r2, r7
 8006f3c:	19bc      	addle	r4, r7, r6
 8006f3e:	19ad      	addle	r5, r5, r6
 8006f40:	0052      	lsls	r2, r2, #1
 8006f42:	3b01      	subs	r3, #1
 8006f44:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006f48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006f4c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006f50:	d1f0      	bne.n	8006f34 <__ieee754_sqrt+0xb0>
 8006f52:	f04f 0e20 	mov.w	lr, #32
 8006f56:	469c      	mov	ip, r3
 8006f58:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006f5c:	42a2      	cmp	r2, r4
 8006f5e:	eb06 070c 	add.w	r7, r6, ip
 8006f62:	dc02      	bgt.n	8006f6a <__ieee754_sqrt+0xe6>
 8006f64:	d112      	bne.n	8006f8c <__ieee754_sqrt+0x108>
 8006f66:	428f      	cmp	r7, r1
 8006f68:	d810      	bhi.n	8006f8c <__ieee754_sqrt+0x108>
 8006f6a:	2f00      	cmp	r7, #0
 8006f6c:	eb07 0c06 	add.w	ip, r7, r6
 8006f70:	da34      	bge.n	8006fdc <__ieee754_sqrt+0x158>
 8006f72:	f1bc 0f00 	cmp.w	ip, #0
 8006f76:	db31      	blt.n	8006fdc <__ieee754_sqrt+0x158>
 8006f78:	f104 0801 	add.w	r8, r4, #1
 8006f7c:	1b12      	subs	r2, r2, r4
 8006f7e:	428f      	cmp	r7, r1
 8006f80:	bf88      	it	hi
 8006f82:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006f86:	1bc9      	subs	r1, r1, r7
 8006f88:	4433      	add	r3, r6
 8006f8a:	4644      	mov	r4, r8
 8006f8c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8006f90:	f1be 0e01 	subs.w	lr, lr, #1
 8006f94:	443a      	add	r2, r7
 8006f96:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006f9a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006f9e:	d1dd      	bne.n	8006f5c <__ieee754_sqrt+0xd8>
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	d006      	beq.n	8006fb2 <__ieee754_sqrt+0x12e>
 8006fa4:	1c5c      	adds	r4, r3, #1
 8006fa6:	bf13      	iteet	ne
 8006fa8:	3301      	addne	r3, #1
 8006faa:	3501      	addeq	r5, #1
 8006fac:	4673      	moveq	r3, lr
 8006fae:	f023 0301 	bicne.w	r3, r3, #1
 8006fb2:	106a      	asrs	r2, r5, #1
 8006fb4:	085b      	lsrs	r3, r3, #1
 8006fb6:	07e9      	lsls	r1, r5, #31
 8006fb8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006fbc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006fc0:	bf48      	it	mi
 8006fc2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006fc6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006fca:	461c      	mov	r4, r3
 8006fcc:	e776      	b.n	8006ebc <__ieee754_sqrt+0x38>
 8006fce:	0aca      	lsrs	r2, r1, #11
 8006fd0:	3b15      	subs	r3, #21
 8006fd2:	0549      	lsls	r1, r1, #21
 8006fd4:	e78b      	b.n	8006eee <__ieee754_sqrt+0x6a>
 8006fd6:	0052      	lsls	r2, r2, #1
 8006fd8:	3001      	adds	r0, #1
 8006fda:	e78b      	b.n	8006ef4 <__ieee754_sqrt+0x70>
 8006fdc:	46a0      	mov	r8, r4
 8006fde:	e7cd      	b.n	8006f7c <__ieee754_sqrt+0xf8>
 8006fe0:	7ff00000 	.word	0x7ff00000
 8006fe4:	00000000 	.word	0x00000000

08006fe8 <atan>:
 8006fe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	ec55 4b10 	vmov	r4, r5, d0
 8006ff0:	4bc7      	ldr	r3, [pc, #796]	; (8007310 <atan+0x328>)
 8006ff2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006ff6:	429e      	cmp	r6, r3
 8006ff8:	46ab      	mov	fp, r5
 8006ffa:	dd18      	ble.n	800702e <atan+0x46>
 8006ffc:	4ac5      	ldr	r2, [pc, #788]	; (8007314 <atan+0x32c>)
 8006ffe:	4296      	cmp	r6, r2
 8007000:	dc01      	bgt.n	8007006 <atan+0x1e>
 8007002:	d109      	bne.n	8007018 <atan+0x30>
 8007004:	b144      	cbz	r4, 8007018 <atan+0x30>
 8007006:	4622      	mov	r2, r4
 8007008:	462b      	mov	r3, r5
 800700a:	4620      	mov	r0, r4
 800700c:	4629      	mov	r1, r5
 800700e:	f7f9 f8e1 	bl	80001d4 <__adddf3>
 8007012:	4604      	mov	r4, r0
 8007014:	460d      	mov	r5, r1
 8007016:	e006      	b.n	8007026 <atan+0x3e>
 8007018:	f1bb 0f00 	cmp.w	fp, #0
 800701c:	f300 813a 	bgt.w	8007294 <atan+0x2ac>
 8007020:	a59f      	add	r5, pc, #636	; (adr r5, 80072a0 <atan+0x2b8>)
 8007022:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007026:	ec45 4b10 	vmov	d0, r4, r5
 800702a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702e:	4bba      	ldr	r3, [pc, #744]	; (8007318 <atan+0x330>)
 8007030:	429e      	cmp	r6, r3
 8007032:	dc14      	bgt.n	800705e <atan+0x76>
 8007034:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007038:	429e      	cmp	r6, r3
 800703a:	dc0d      	bgt.n	8007058 <atan+0x70>
 800703c:	a39a      	add	r3, pc, #616	; (adr r3, 80072a8 <atan+0x2c0>)
 800703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007042:	ee10 0a10 	vmov	r0, s0
 8007046:	4629      	mov	r1, r5
 8007048:	f7f9 f8c4 	bl	80001d4 <__adddf3>
 800704c:	2200      	movs	r2, #0
 800704e:	4bb3      	ldr	r3, [pc, #716]	; (800731c <atan+0x334>)
 8007050:	f7f9 fd02 	bl	8000a58 <__aeabi_dcmpgt>
 8007054:	2800      	cmp	r0, #0
 8007056:	d1e6      	bne.n	8007026 <atan+0x3e>
 8007058:	f04f 3aff 	mov.w	sl, #4294967295
 800705c:	e02b      	b.n	80070b6 <atan+0xce>
 800705e:	f000 f96b 	bl	8007338 <fabs>
 8007062:	4baf      	ldr	r3, [pc, #700]	; (8007320 <atan+0x338>)
 8007064:	429e      	cmp	r6, r3
 8007066:	ec55 4b10 	vmov	r4, r5, d0
 800706a:	f300 80bf 	bgt.w	80071ec <atan+0x204>
 800706e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007072:	429e      	cmp	r6, r3
 8007074:	f300 80a0 	bgt.w	80071b8 <atan+0x1d0>
 8007078:	ee10 2a10 	vmov	r2, s0
 800707c:	ee10 0a10 	vmov	r0, s0
 8007080:	462b      	mov	r3, r5
 8007082:	4629      	mov	r1, r5
 8007084:	f7f9 f8a6 	bl	80001d4 <__adddf3>
 8007088:	2200      	movs	r2, #0
 800708a:	4ba4      	ldr	r3, [pc, #656]	; (800731c <atan+0x334>)
 800708c:	f7f9 f8a0 	bl	80001d0 <__aeabi_dsub>
 8007090:	2200      	movs	r2, #0
 8007092:	4606      	mov	r6, r0
 8007094:	460f      	mov	r7, r1
 8007096:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800709a:	4620      	mov	r0, r4
 800709c:	4629      	mov	r1, r5
 800709e:	f7f9 f899 	bl	80001d4 <__adddf3>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4630      	mov	r0, r6
 80070a8:	4639      	mov	r1, r7
 80070aa:	f7f9 fb6f 	bl	800078c <__aeabi_ddiv>
 80070ae:	f04f 0a00 	mov.w	sl, #0
 80070b2:	4604      	mov	r4, r0
 80070b4:	460d      	mov	r5, r1
 80070b6:	4622      	mov	r2, r4
 80070b8:	462b      	mov	r3, r5
 80070ba:	4620      	mov	r0, r4
 80070bc:	4629      	mov	r1, r5
 80070be:	f7f9 fa3b 	bl	8000538 <__aeabi_dmul>
 80070c2:	4602      	mov	r2, r0
 80070c4:	460b      	mov	r3, r1
 80070c6:	4680      	mov	r8, r0
 80070c8:	4689      	mov	r9, r1
 80070ca:	f7f9 fa35 	bl	8000538 <__aeabi_dmul>
 80070ce:	a378      	add	r3, pc, #480	; (adr r3, 80072b0 <atan+0x2c8>)
 80070d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d4:	4606      	mov	r6, r0
 80070d6:	460f      	mov	r7, r1
 80070d8:	f7f9 fa2e 	bl	8000538 <__aeabi_dmul>
 80070dc:	a376      	add	r3, pc, #472	; (adr r3, 80072b8 <atan+0x2d0>)
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	f7f9 f877 	bl	80001d4 <__adddf3>
 80070e6:	4632      	mov	r2, r6
 80070e8:	463b      	mov	r3, r7
 80070ea:	f7f9 fa25 	bl	8000538 <__aeabi_dmul>
 80070ee:	a374      	add	r3, pc, #464	; (adr r3, 80072c0 <atan+0x2d8>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f7f9 f86e 	bl	80001d4 <__adddf3>
 80070f8:	4632      	mov	r2, r6
 80070fa:	463b      	mov	r3, r7
 80070fc:	f7f9 fa1c 	bl	8000538 <__aeabi_dmul>
 8007100:	a371      	add	r3, pc, #452	; (adr r3, 80072c8 <atan+0x2e0>)
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	f7f9 f865 	bl	80001d4 <__adddf3>
 800710a:	4632      	mov	r2, r6
 800710c:	463b      	mov	r3, r7
 800710e:	f7f9 fa13 	bl	8000538 <__aeabi_dmul>
 8007112:	a36f      	add	r3, pc, #444	; (adr r3, 80072d0 <atan+0x2e8>)
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f7f9 f85c 	bl	80001d4 <__adddf3>
 800711c:	4632      	mov	r2, r6
 800711e:	463b      	mov	r3, r7
 8007120:	f7f9 fa0a 	bl	8000538 <__aeabi_dmul>
 8007124:	a36c      	add	r3, pc, #432	; (adr r3, 80072d8 <atan+0x2f0>)
 8007126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712a:	f7f9 f853 	bl	80001d4 <__adddf3>
 800712e:	4642      	mov	r2, r8
 8007130:	464b      	mov	r3, r9
 8007132:	f7f9 fa01 	bl	8000538 <__aeabi_dmul>
 8007136:	a36a      	add	r3, pc, #424	; (adr r3, 80072e0 <atan+0x2f8>)
 8007138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713c:	4680      	mov	r8, r0
 800713e:	4689      	mov	r9, r1
 8007140:	4630      	mov	r0, r6
 8007142:	4639      	mov	r1, r7
 8007144:	f7f9 f9f8 	bl	8000538 <__aeabi_dmul>
 8007148:	a367      	add	r3, pc, #412	; (adr r3, 80072e8 <atan+0x300>)
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	f7f9 f83f 	bl	80001d0 <__aeabi_dsub>
 8007152:	4632      	mov	r2, r6
 8007154:	463b      	mov	r3, r7
 8007156:	f7f9 f9ef 	bl	8000538 <__aeabi_dmul>
 800715a:	a365      	add	r3, pc, #404	; (adr r3, 80072f0 <atan+0x308>)
 800715c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007160:	f7f9 f836 	bl	80001d0 <__aeabi_dsub>
 8007164:	4632      	mov	r2, r6
 8007166:	463b      	mov	r3, r7
 8007168:	f7f9 f9e6 	bl	8000538 <__aeabi_dmul>
 800716c:	a362      	add	r3, pc, #392	; (adr r3, 80072f8 <atan+0x310>)
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	f7f9 f82d 	bl	80001d0 <__aeabi_dsub>
 8007176:	4632      	mov	r2, r6
 8007178:	463b      	mov	r3, r7
 800717a:	f7f9 f9dd 	bl	8000538 <__aeabi_dmul>
 800717e:	a360      	add	r3, pc, #384	; (adr r3, 8007300 <atan+0x318>)
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	f7f9 f824 	bl	80001d0 <__aeabi_dsub>
 8007188:	4632      	mov	r2, r6
 800718a:	463b      	mov	r3, r7
 800718c:	f7f9 f9d4 	bl	8000538 <__aeabi_dmul>
 8007190:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	d155      	bne.n	8007246 <atan+0x25e>
 800719a:	4640      	mov	r0, r8
 800719c:	4649      	mov	r1, r9
 800719e:	f7f9 f819 	bl	80001d4 <__adddf3>
 80071a2:	4622      	mov	r2, r4
 80071a4:	462b      	mov	r3, r5
 80071a6:	f7f9 f9c7 	bl	8000538 <__aeabi_dmul>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	4620      	mov	r0, r4
 80071b0:	4629      	mov	r1, r5
 80071b2:	f7f9 f80d 	bl	80001d0 <__aeabi_dsub>
 80071b6:	e72c      	b.n	8007012 <atan+0x2a>
 80071b8:	ee10 0a10 	vmov	r0, s0
 80071bc:	2200      	movs	r2, #0
 80071be:	4b57      	ldr	r3, [pc, #348]	; (800731c <atan+0x334>)
 80071c0:	4629      	mov	r1, r5
 80071c2:	f7f9 f805 	bl	80001d0 <__aeabi_dsub>
 80071c6:	2200      	movs	r2, #0
 80071c8:	4606      	mov	r6, r0
 80071ca:	460f      	mov	r7, r1
 80071cc:	4b53      	ldr	r3, [pc, #332]	; (800731c <atan+0x334>)
 80071ce:	4620      	mov	r0, r4
 80071d0:	4629      	mov	r1, r5
 80071d2:	f7f8 ffff 	bl	80001d4 <__adddf3>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	4630      	mov	r0, r6
 80071dc:	4639      	mov	r1, r7
 80071de:	f7f9 fad5 	bl	800078c <__aeabi_ddiv>
 80071e2:	f04f 0a01 	mov.w	sl, #1
 80071e6:	4604      	mov	r4, r0
 80071e8:	460d      	mov	r5, r1
 80071ea:	e764      	b.n	80070b6 <atan+0xce>
 80071ec:	4b4d      	ldr	r3, [pc, #308]	; (8007324 <atan+0x33c>)
 80071ee:	429e      	cmp	r6, r3
 80071f0:	dc1d      	bgt.n	800722e <atan+0x246>
 80071f2:	ee10 0a10 	vmov	r0, s0
 80071f6:	2200      	movs	r2, #0
 80071f8:	4b4b      	ldr	r3, [pc, #300]	; (8007328 <atan+0x340>)
 80071fa:	4629      	mov	r1, r5
 80071fc:	f7f8 ffe8 	bl	80001d0 <__aeabi_dsub>
 8007200:	2200      	movs	r2, #0
 8007202:	4606      	mov	r6, r0
 8007204:	460f      	mov	r7, r1
 8007206:	4b48      	ldr	r3, [pc, #288]	; (8007328 <atan+0x340>)
 8007208:	4620      	mov	r0, r4
 800720a:	4629      	mov	r1, r5
 800720c:	f7f9 f994 	bl	8000538 <__aeabi_dmul>
 8007210:	2200      	movs	r2, #0
 8007212:	4b42      	ldr	r3, [pc, #264]	; (800731c <atan+0x334>)
 8007214:	f7f8 ffde 	bl	80001d4 <__adddf3>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	4630      	mov	r0, r6
 800721e:	4639      	mov	r1, r7
 8007220:	f7f9 fab4 	bl	800078c <__aeabi_ddiv>
 8007224:	f04f 0a02 	mov.w	sl, #2
 8007228:	4604      	mov	r4, r0
 800722a:	460d      	mov	r5, r1
 800722c:	e743      	b.n	80070b6 <atan+0xce>
 800722e:	462b      	mov	r3, r5
 8007230:	ee10 2a10 	vmov	r2, s0
 8007234:	2000      	movs	r0, #0
 8007236:	493d      	ldr	r1, [pc, #244]	; (800732c <atan+0x344>)
 8007238:	f7f9 faa8 	bl	800078c <__aeabi_ddiv>
 800723c:	f04f 0a03 	mov.w	sl, #3
 8007240:	4604      	mov	r4, r0
 8007242:	460d      	mov	r5, r1
 8007244:	e737      	b.n	80070b6 <atan+0xce>
 8007246:	4640      	mov	r0, r8
 8007248:	4649      	mov	r1, r9
 800724a:	f7f8 ffc3 	bl	80001d4 <__adddf3>
 800724e:	4622      	mov	r2, r4
 8007250:	462b      	mov	r3, r5
 8007252:	f7f9 f971 	bl	8000538 <__aeabi_dmul>
 8007256:	4e36      	ldr	r6, [pc, #216]	; (8007330 <atan+0x348>)
 8007258:	4b36      	ldr	r3, [pc, #216]	; (8007334 <atan+0x34c>)
 800725a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800725e:	4456      	add	r6, sl
 8007260:	449a      	add	sl, r3
 8007262:	e9da 2300 	ldrd	r2, r3, [sl]
 8007266:	f7f8 ffb3 	bl	80001d0 <__aeabi_dsub>
 800726a:	4622      	mov	r2, r4
 800726c:	462b      	mov	r3, r5
 800726e:	f7f8 ffaf 	bl	80001d0 <__aeabi_dsub>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	e9d6 0100 	ldrd	r0, r1, [r6]
 800727a:	f7f8 ffa9 	bl	80001d0 <__aeabi_dsub>
 800727e:	f1bb 0f00 	cmp.w	fp, #0
 8007282:	4604      	mov	r4, r0
 8007284:	460d      	mov	r5, r1
 8007286:	f6bf aece 	bge.w	8007026 <atan+0x3e>
 800728a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800728e:	4604      	mov	r4, r0
 8007290:	461d      	mov	r5, r3
 8007292:	e6c8      	b.n	8007026 <atan+0x3e>
 8007294:	a51c      	add	r5, pc, #112	; (adr r5, 8007308 <atan+0x320>)
 8007296:	e9d5 4500 	ldrd	r4, r5, [r5]
 800729a:	e6c4      	b.n	8007026 <atan+0x3e>
 800729c:	f3af 8000 	nop.w
 80072a0:	54442d18 	.word	0x54442d18
 80072a4:	bff921fb 	.word	0xbff921fb
 80072a8:	8800759c 	.word	0x8800759c
 80072ac:	7e37e43c 	.word	0x7e37e43c
 80072b0:	e322da11 	.word	0xe322da11
 80072b4:	3f90ad3a 	.word	0x3f90ad3a
 80072b8:	24760deb 	.word	0x24760deb
 80072bc:	3fa97b4b 	.word	0x3fa97b4b
 80072c0:	a0d03d51 	.word	0xa0d03d51
 80072c4:	3fb10d66 	.word	0x3fb10d66
 80072c8:	c54c206e 	.word	0xc54c206e
 80072cc:	3fb745cd 	.word	0x3fb745cd
 80072d0:	920083ff 	.word	0x920083ff
 80072d4:	3fc24924 	.word	0x3fc24924
 80072d8:	5555550d 	.word	0x5555550d
 80072dc:	3fd55555 	.word	0x3fd55555
 80072e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80072e4:	bfa2b444 	.word	0xbfa2b444
 80072e8:	52defd9a 	.word	0x52defd9a
 80072ec:	3fadde2d 	.word	0x3fadde2d
 80072f0:	af749a6d 	.word	0xaf749a6d
 80072f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80072f8:	fe231671 	.word	0xfe231671
 80072fc:	3fbc71c6 	.word	0x3fbc71c6
 8007300:	9998ebc4 	.word	0x9998ebc4
 8007304:	3fc99999 	.word	0x3fc99999
 8007308:	54442d18 	.word	0x54442d18
 800730c:	3ff921fb 	.word	0x3ff921fb
 8007310:	440fffff 	.word	0x440fffff
 8007314:	7ff00000 	.word	0x7ff00000
 8007318:	3fdbffff 	.word	0x3fdbffff
 800731c:	3ff00000 	.word	0x3ff00000
 8007320:	3ff2ffff 	.word	0x3ff2ffff
 8007324:	40037fff 	.word	0x40037fff
 8007328:	3ff80000 	.word	0x3ff80000
 800732c:	bff00000 	.word	0xbff00000
 8007330:	08007bc8 	.word	0x08007bc8
 8007334:	08007be8 	.word	0x08007be8

08007338 <fabs>:
 8007338:	ec53 2b10 	vmov	r2, r3, d0
 800733c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007340:	ec43 2b10 	vmov	d0, r2, r3
 8007344:	4770      	bx	lr

08007346 <matherr>:
 8007346:	2000      	movs	r0, #0
 8007348:	4770      	bx	lr
	...

0800734c <__errno>:
 800734c:	4b01      	ldr	r3, [pc, #4]	; (8007354 <__errno+0x8>)
 800734e:	6818      	ldr	r0, [r3, #0]
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	20000040 	.word	0x20000040

08007358 <_init>:
 8007358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735a:	bf00      	nop
 800735c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800735e:	bc08      	pop	{r3}
 8007360:	469e      	mov	lr, r3
 8007362:	4770      	bx	lr

08007364 <_fini>:
 8007364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007366:	bf00      	nop
 8007368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800736a:	bc08      	pop	{r3}
 800736c:	469e      	mov	lr, r3
 800736e:	4770      	bx	lr
