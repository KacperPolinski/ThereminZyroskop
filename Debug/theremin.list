
theremin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006db4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000084c  08006f3c  08006f3c  00016f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007788  08007788  00017788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800778c  0800778c  0001778c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000048  20000000  08007790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00013d70  20000048  080077d8  00020048  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20013db8  080077d8  00023db8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015ae8  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a43  00000000  00000000  00035b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000011b8  00000000  00000000  000385a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001060  00000000  00000000  00039760  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000855d  00000000  00000000  0003a7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006394  00000000  00000000  00042d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      000000ec  00000000  00000000  000490b1  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000049d8  00000000  00000000  000491a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000000d8  00000000  00000000  0004db78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006f24 	.word	0x08006f24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	08006f24 	.word	0x08006f24

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	4603      	mov	r3, r0
 8000b16:	81fb      	strh	r3, [r7, #14]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	81bb      	strh	r3, [r7, #12]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000b24:	f000 fc8c 	bl	8001440 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000b28:	89fb      	ldrh	r3, [r7, #14]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2102      	movs	r1, #2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 faf7 	bl	8001124 <CODEC_IO_Write>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000b40:	89bb      	ldrh	r3, [r7, #12]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d81b      	bhi.n	8000b80 <cs43l22_Init+0x74>
 8000b48:	a201      	add	r2, pc, #4	; (adr r2, 8000b50 <cs43l22_Init+0x44>)
 8000b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4e:	bf00      	nop
 8000b50:	08000b61 	.word	0x08000b61
 8000b54:	08000b69 	.word	0x08000b69
 8000b58:	08000b71 	.word	0x08000b71
 8000b5c:	08000b79 	.word	0x08000b79
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000b60:	4b5b      	ldr	r3, [pc, #364]	; (8000cd0 <cs43l22_Init+0x1c4>)
 8000b62:	22fa      	movs	r2, #250	; 0xfa
 8000b64:	701a      	strb	r2, [r3, #0]
    break;
 8000b66:	e00f      	b.n	8000b88 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000b68:	4b59      	ldr	r3, [pc, #356]	; (8000cd0 <cs43l22_Init+0x1c4>)
 8000b6a:	22af      	movs	r2, #175	; 0xaf
 8000b6c:	701a      	strb	r2, [r3, #0]
    break;
 8000b6e:	e00b      	b.n	8000b88 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000b70:	4b57      	ldr	r3, [pc, #348]	; (8000cd0 <cs43l22_Init+0x1c4>)
 8000b72:	22aa      	movs	r2, #170	; 0xaa
 8000b74:	701a      	strb	r2, [r3, #0]
    break;
 8000b76:	e007      	b.n	8000b88 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000b78:	4b55      	ldr	r3, [pc, #340]	; (8000cd0 <cs43l22_Init+0x1c4>)
 8000b7a:	2205      	movs	r2, #5
 8000b7c:	701a      	strb	r2, [r3, #0]
    break;    
 8000b7e:	e003      	b.n	8000b88 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000b80:	4b53      	ldr	r3, [pc, #332]	; (8000cd0 <cs43l22_Init+0x1c4>)
 8000b82:	2205      	movs	r2, #5
 8000b84:	701a      	strb	r2, [r3, #0]
    break;    
 8000b86:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000b88:	89fb      	ldrh	r3, [r7, #14]
 8000b8a:	b2d8      	uxtb	r0, r3
 8000b8c:	4b50      	ldr	r3, [pc, #320]	; (8000cd0 <cs43l22_Init+0x1c4>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	461a      	mov	r2, r3
 8000b94:	2104      	movs	r1, #4
 8000b96:	f000 fac5 	bl	8001124 <CODEC_IO_Write>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000ba4:	89fb      	ldrh	r3, [r7, #14]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2281      	movs	r2, #129	; 0x81
 8000baa:	2105      	movs	r1, #5
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fab9 	bl	8001124 <CODEC_IO_Write>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	4413      	add	r3, r2
 8000bba:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000bbc:	89fb      	ldrh	r3, [r7, #14]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	2106      	movs	r1, #6
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 faad 	bl	8001124 <CODEC_IO_Write>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	461a      	mov	r2, r3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000bd4:	7afa      	ldrb	r2, [r7, #11]
 8000bd6:	89fb      	ldrh	r3, [r7, #14]
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f95a 	bl	8000e94 <cs43l22_SetVolume>
 8000be0:	4602      	mov	r2, r0
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	4413      	add	r3, r2
 8000be6:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000be8:	89bb      	ldrh	r3, [r7, #12]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d023      	beq.n	8000c36 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000bee:	89fb      	ldrh	r3, [r7, #14]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2206      	movs	r2, #6
 8000bf4:	210f      	movs	r1, #15
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 fa94 	bl	8001124 <CODEC_IO_Write>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	4413      	add	r3, r2
 8000c04:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000c06:	89fb      	ldrh	r3, [r7, #14]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2124      	movs	r1, #36	; 0x24
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 fa88 	bl	8001124 <CODEC_IO_Write>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000c1e:	89fb      	ldrh	r3, [r7, #14]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2200      	movs	r2, #0
 8000c24:	2125      	movs	r1, #37	; 0x25
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fa7c 	bl	8001124 <CODEC_IO_Write>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	4413      	add	r3, r2
 8000c34:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000c36:	89fb      	ldrh	r3, [r7, #14]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	210a      	movs	r1, #10
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 fa70 	bl	8001124 <CODEC_IO_Write>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000c4e:	89fb      	ldrh	r3, [r7, #14]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2204      	movs	r2, #4
 8000c54:	210e      	movs	r1, #14
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 fa64 	bl	8001124 <CODEC_IO_Write>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	461a      	mov	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	4413      	add	r3, r2
 8000c64:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000c66:	89fb      	ldrh	r3, [r7, #14]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2127      	movs	r1, #39	; 0x27
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 fa58 	bl	8001124 <CODEC_IO_Write>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000c7e:	89fb      	ldrh	r3, [r7, #14]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	220f      	movs	r2, #15
 8000c84:	211f      	movs	r1, #31
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 fa4c 	bl	8001124 <CODEC_IO_Write>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	461a      	mov	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	4413      	add	r3, r2
 8000c94:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000c96:	89fb      	ldrh	r3, [r7, #14]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	220a      	movs	r2, #10
 8000c9c:	211a      	movs	r1, #26
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fa40 	bl	8001124 <CODEC_IO_Write>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	4413      	add	r3, r2
 8000cac:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000cae:	89fb      	ldrh	r3, [r7, #14]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	220a      	movs	r2, #10
 8000cb4:	211b      	movs	r1, #27
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 fa34 	bl	8001124 <CODEC_IO_Write>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000cc6:	697b      	ldr	r3, [r7, #20]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000064 	.word	0x20000064

08000cd4 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000cd8:	f000 fbe8 	bl	80014ac <AUDIO_IO_DeInit>
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000cea:	f000 fba9 	bl	8001440 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 fc31 	bl	800155c <AUDIO_IO_Read>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	f023 0307 	bic.w	r3, r3, #7
 8000d04:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	80fb      	strh	r3, [r7, #6]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <cs43l22_Play+0x5c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d11a      	bne.n	8000d62 <cs43l22_Play+0x52>
  {
    /* Enable the digital soft ramp */
    //counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
	  counter ++;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f918 	bl	8000f6c <cs43l22_SetMute>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	4413      	add	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	229e      	movs	r2, #158	; 0x9e
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f9e9 	bl	8001124 <CODEC_IO_Write>
 8000d52:	4603      	mov	r3, r0
 8000d54:	461a      	mov	r2, r3
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4413      	add	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <cs43l22_Play+0x5c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000030 	.word	0x20000030

08000d70 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	2101      	movs	r1, #1
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f8f2 	bl	8000f6c <cs43l22_SetMute>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2201      	movs	r2, #1
 8000d96:	2102      	movs	r1, #2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f9c3 	bl	8001124 <CODEC_IO_Write>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	461a      	mov	r2, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	4413      	add	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8000da8:	68fb      	ldr	r3, [r7, #12]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f8ce 	bl	8000f6c <cs43l22_SetMute>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	e002      	b.n	8000de4 <cs43l22_Resume+0x30>
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	3301      	adds	r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	2bfe      	cmp	r3, #254	; 0xfe
 8000de8:	d9f9      	bls.n	8000dde <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000dea:	88fb      	ldrh	r3, [r7, #6]
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <cs43l22_Resume+0x74>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	461a      	mov	r2, r3
 8000df6:	2104      	movs	r1, #4
 8000df8:	f000 f994 	bl	8001124 <CODEC_IO_Write>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	229e      	movs	r2, #158	; 0x9e
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f988 	bl	8001124 <CODEC_IO_Write>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000064 	.word	0x20000064

08000e2c <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	2101      	movs	r1, #1
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 f893 	bl	8000f6c <cs43l22_SetMute>
 8000e46:	4602      	mov	r2, r0
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2204      	movs	r2, #4
 8000e54:	210e      	movs	r1, #14
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f964 	bl	8001124 <CODEC_IO_Write>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4413      	add	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	229f      	movs	r2, #159	; 0x9f
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f958 	bl	8001124 <CODEC_IO_Write>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <cs43l22_Stop+0x64>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]
  return counter;    
 8000e84:	68fb      	ldr	r3, [r7, #12]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000030 	.word	0x20000030

08000e94 <cs43l22_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	460a      	mov	r2, r1
 8000e9e:	80fb      	strh	r3, [r7, #6]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000ea8:	797b      	ldrb	r3, [r7, #5]
 8000eaa:	2b64      	cmp	r3, #100	; 0x64
 8000eac:	d80b      	bhi.n	8000ec6 <cs43l22_SetVolume+0x32>
 8000eae:	797a      	ldrb	r2, [r7, #5]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	021b      	lsls	r3, r3, #8
 8000eb4:	1a9b      	subs	r3, r3, r2
 8000eb6:	4a25      	ldr	r2, [pc, #148]	; (8000f4c <cs43l22_SetVolume+0xb8>)
 8000eb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ebc:	1152      	asrs	r2, r2, #5
 8000ebe:	17db      	asrs	r3, r3, #31
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	e000      	b.n	8000ec8 <cs43l22_SetVolume+0x34>
 8000ec6:	2364      	movs	r3, #100	; 0x64
 8000ec8:	72fb      	strb	r3, [r7, #11]

  if(Volume > 0xE6)
 8000eca:	797b      	ldrb	r3, [r7, #5]
 8000ecc:	2be6      	cmp	r3, #230	; 0xe6
 8000ece:	d91c      	bls.n	8000f0a <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	b2d8      	uxtb	r0, r3
 8000ed4:	7afb      	ldrb	r3, [r7, #11]
 8000ed6:	3319      	adds	r3, #25
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	461a      	mov	r2, r3
 8000edc:	2120      	movs	r1, #32
 8000ede:	f000 f921 	bl	8001124 <CODEC_IO_Write>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4413      	add	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	b2d8      	uxtb	r0, r3
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
 8000ef2:	3319      	adds	r3, #25
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	2121      	movs	r1, #33	; 0x21
 8000efa:	f000 f913 	bl	8001124 <CODEC_IO_Write>
 8000efe:	4603      	mov	r3, r0
 8000f00:	461a      	mov	r2, r3
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4413      	add	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	e01b      	b.n	8000f42 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	b2d8      	uxtb	r0, r3
 8000f0e:	7afb      	ldrb	r3, [r7, #11]
 8000f10:	3319      	adds	r3, #25
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	461a      	mov	r2, r3
 8000f16:	2120      	movs	r1, #32
 8000f18:	f000 f904 	bl	8001124 <CODEC_IO_Write>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	b2d8      	uxtb	r0, r3
 8000f2a:	7afb      	ldrb	r3, [r7, #11]
 8000f2c:	3319      	adds	r3, #25
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	461a      	mov	r2, r3
 8000f32:	2121      	movs	r1, #33	; 0x21
 8000f34:	f000 f8f6 	bl	8001124 <CODEC_IO_Write>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	51eb851f 	.word	0x51eb851f

08000f50 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	80fb      	strh	r3, [r7, #6]
  return 0;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d124      	bne.n	8000fcc <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	22ff      	movs	r2, #255	; 0xff
 8000f88:	2104      	movs	r1, #4
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f8ca 	bl	8001124 <CODEC_IO_Write>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2122      	movs	r1, #34	; 0x22
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f8be 	bl	8001124 <CODEC_IO_Write>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2123      	movs	r1, #35	; 0x23
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f8b2 	bl	8001124 <CODEC_IO_Write>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	e025      	b.n	8001018 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2122      	movs	r1, #34	; 0x22
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f8a5 	bl	8001124 <CODEC_IO_Write>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2123      	movs	r1, #35	; 0x23
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f899 	bl	8001124 <CODEC_IO_Write>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	b2d8      	uxtb	r0, r3
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <cs43l22_SetMute+0xb8>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	461a      	mov	r2, r3
 8001008:	2104      	movs	r1, #4
 800100a:	f000 f88b 	bl	8001124 <CODEC_IO_Write>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4413      	add	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001018:	68fb      	ldr	r3, [r7, #12]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000064 	.word	0x20000064

08001028 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	460a      	mov	r2, r1
 8001032:	80fb      	strh	r3, [r7, #6]
 8001034:	4613      	mov	r3, r2
 8001036:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 800103c:	797b      	ldrb	r3, [r7, #5]
 800103e:	3b01      	subs	r3, #1
 8001040:	2b03      	cmp	r3, #3
 8001042:	d84b      	bhi.n	80010dc <cs43l22_SetOutputMode+0xb4>
 8001044:	a201      	add	r2, pc, #4	; (adr r2, 800104c <cs43l22_SetOutputMode+0x24>)
 8001046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104a:	bf00      	nop
 800104c:	0800105d 	.word	0x0800105d
 8001050:	0800107d 	.word	0x0800107d
 8001054:	0800109d 	.word	0x0800109d
 8001058:	080010bd 	.word	0x080010bd
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	22fa      	movs	r2, #250	; 0xfa
 8001062:	2104      	movs	r1, #4
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f85d 	bl	8001124 <CODEC_IO_Write>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <cs43l22_SetOutputMode+0xe0>)
 8001076:	22fa      	movs	r2, #250	; 0xfa
 8001078:	701a      	strb	r2, [r3, #0]
      break;
 800107a:	e03f      	b.n	80010fc <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	22af      	movs	r2, #175	; 0xaf
 8001082:	2104      	movs	r1, #4
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f84d 	bl	8001124 <CODEC_IO_Write>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4413      	add	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <cs43l22_SetOutputMode+0xe0>)
 8001096:	22af      	movs	r2, #175	; 0xaf
 8001098:	701a      	strb	r2, [r3, #0]
      break;
 800109a:	e02f      	b.n	80010fc <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	22aa      	movs	r2, #170	; 0xaa
 80010a2:	2104      	movs	r1, #4
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 f83d 	bl	8001124 <CODEC_IO_Write>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4413      	add	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <cs43l22_SetOutputMode+0xe0>)
 80010b6:	22aa      	movs	r2, #170	; 0xaa
 80010b8:	701a      	strb	r2, [r3, #0]
      break;
 80010ba:	e01f      	b.n	80010fc <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2205      	movs	r2, #5
 80010c2:	2104      	movs	r1, #4
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 f82d 	bl	8001124 <CODEC_IO_Write>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4413      	add	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <cs43l22_SetOutputMode+0xe0>)
 80010d6:	2205      	movs	r2, #5
 80010d8:	701a      	strb	r2, [r3, #0]
      break;    
 80010da:	e00f      	b.n	80010fc <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2205      	movs	r2, #5
 80010e2:	2104      	movs	r1, #4
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 f81d 	bl	8001124 <CODEC_IO_Write>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4413      	add	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <cs43l22_SetOutputMode+0xe0>)
 80010f6:	2205      	movs	r2, #5
 80010f8:	701a      	strb	r2, [r3, #0]
      break;
 80010fa:	bf00      	nop
  }  
  return counter;
 80010fc:	68fb      	ldr	r3, [r7, #12]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000064 	.word	0x20000064

0800110c <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
 800112e:	460b      	mov	r3, r1
 8001130:	71bb      	strb	r3, [r7, #6]
 8001132:	4613      	mov	r3, r2
 8001134:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 800113a:	797a      	ldrb	r2, [r7, #5]
 800113c:	79b9      	ldrb	r1, [r7, #6]
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f9f3 	bl	800152c <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	b2db      	uxtb	r3, r3
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <I2C1_Init>:
/**
  * @brief Discovery I2C1 Bus initialization
  * @retval None
  */
static void I2C1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2c1Handle) == HAL_I2C_STATE_RESET)
 8001158:	4812      	ldr	r0, [pc, #72]	; (80011a4 <I2C1_Init+0x50>)
 800115a:	f001 fecf 	bl	8002efc <HAL_I2C_GetState>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d11d      	bne.n	80011a0 <I2C1_Init+0x4c>
  {
    I2c1Handle.Instance              = DISCOVERY_I2C1;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <I2C1_Init+0x50>)
 8001166:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <I2C1_Init+0x54>)
 8001168:	601a      	str	r2, [r3, #0]
    I2c1Handle.Init.Timing           = DISCOVERY_I2C1_TIMING;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <I2C1_Init+0x50>)
 800116c:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <I2C1_Init+0x58>)
 800116e:	605a      	str	r2, [r3, #4]
    I2c1Handle.Init.OwnAddress1      = 0;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <I2C1_Init+0x50>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
    I2c1Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <I2C1_Init+0x50>)
 8001178:	2201      	movs	r2, #1
 800117a:	60da      	str	r2, [r3, #12]
    I2c1Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <I2C1_Init+0x50>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
    I2c1Handle.Init.OwnAddress2      = 0;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <I2C1_Init+0x50>)
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
    I2c1Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
    I2c1Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;  
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C1_MspInit(&I2c1Handle);
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <I2C1_Init+0x50>)
 8001196:	f000 f80b 	bl	80011b0 <I2C1_MspInit>
    HAL_I2C_Init(&I2c1Handle);
 800119a:	4802      	ldr	r0, [pc, #8]	; (80011a4 <I2C1_Init+0x50>)
 800119c:	f001 fbc2 	bl	8002924 <HAL_I2C_Init>
  }
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	2000fb94 	.word	0x2000fb94
 80011a8:	40005400 	.word	0x40005400
 80011ac:	90112626 	.word	0x90112626

080011b0 <I2C1_MspInit>:
  * @brief Discovery I2C1 MSP Initialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *hi2c)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b0ae      	sub	sp, #184	; 0xb8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;  
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  /* IOSV bit MUST be set to access GPIO port G[2:15] */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	4a3a      	ldr	r2, [pc, #232]	; (80012a4 <I2C1_MspInit+0xf4>)
 80011ba:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <I2C1_MspInit+0xf4>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c2:	6593      	str	r3, [r2, #88]	; 0x58
 80011c4:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <I2C1_MspInit+0xf4>)
 80011c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011cc:	61bb      	str	r3, [r7, #24]
 80011ce:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 80011d0:	f002 f8ca 	bl	8003368 <HAL_PWREx_EnableVddIO2>
  
  if (hi2c->Instance == DISCOVERY_I2C1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a33      	ldr	r2, [pc, #204]	; (80012a8 <I2C1_MspInit+0xf8>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d15e      	bne.n	800129c <I2C1_MspInit+0xec>
  {
    /*##-1- Configure the Discovery I2C clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011de:	2340      	movs	r3, #64	; 0x40
 80011e0:	61fb      	str	r3, [r7, #28]
    RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80011e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 fe51 	bl	8003e94 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/  
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 80011f2:	4a2c      	ldr	r2, [pc, #176]	; (80012a4 <I2C1_MspInit+0xf4>)
 80011f4:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <I2C1_MspInit+0xf4>)
 80011f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <I2C1_MspInit+0xf4>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 800120a:	4a26      	ldr	r2, [pc, #152]	; (80012a4 <I2C1_MspInit+0xf4>)
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <I2C1_MspInit+0xf4>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <I2C1_MspInit+0xf4>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
      
    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN;
 8001222:	23c0      	movs	r3, #192	; 0xc0
 8001224:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8001228:	2312      	movs	r3, #18
 800122a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = GPIO_PULLUP;
 800122e:	2301      	movs	r3, #1
 8001230:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C1_SCL_SDA_AF;
 800123a:	2304      	movs	r3, #4
 800123c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C1_SCL_GPIO_PORT, &GPIO_InitStructure);
 8001240:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001244:	4619      	mov	r1, r3
 8001246:	4819      	ldr	r0, [pc, #100]	; (80012ac <I2C1_MspInit+0xfc>)
 8001248:	f001 f8b8 	bl	80023bc <HAL_GPIO_Init>
      
    /*##-3- Configure the Discovery I2C1 peripheral #######################################*/ 
    /* Enable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_ENABLE();
 800124c:	4a15      	ldr	r2, [pc, #84]	; (80012a4 <I2C1_MspInit+0xf4>)
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <I2C1_MspInit+0xf4>)
 8001250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001252:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001256:	6593      	str	r3, [r2, #88]	; 0x58
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <I2C1_MspInit+0xf4>)
 800125a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
    
    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 8001264:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <I2C1_MspInit+0xf4>)
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <I2C1_MspInit+0xf4>)
 8001268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800126e:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 8001270:	4a0c      	ldr	r2, [pc, #48]	; (80012a4 <I2C1_MspInit+0xf4>)
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <I2C1_MspInit+0xf4>)
 8001274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001276:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800127a:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_EV_IRQn, 0x00, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	201f      	movs	r0, #31
 8001282:	f000 fb22 	bl	80018ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_EV_IRQn);
 8001286:	201f      	movs	r0, #31
 8001288:	f000 fb3b 	bl	8001902 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_ER_IRQn, 0x00, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	2020      	movs	r0, #32
 8001292:	f000 fb1a 	bl	80018ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_ER_IRQn); 
 8001296:	2020      	movs	r0, #32
 8001298:	f000 fb33 	bl	8001902 <HAL_NVIC_EnableIRQ>
  }
}
 800129c:	bf00      	nop
 800129e:	37b8      	adds	r7, #184	; 0xb8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40005400 	.word	0x40005400
 80012ac:	48000400 	.word	0x48000400

080012b0 <I2C1_DeInit>:
/**
  * @brief Discovery I2C1 Bus Deitialization
  * @retval None
  */
static void I2C1_DeInit(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2c1Handle) != HAL_I2C_STATE_RESET)
 80012b4:	4806      	ldr	r0, [pc, #24]	; (80012d0 <I2C1_DeInit+0x20>)
 80012b6:	f001 fe21 	bl	8002efc <HAL_I2C_GetState>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <I2C1_DeInit+0x1c>
  {
    /* Deinit the I2C */
    HAL_I2C_DeInit(&I2c1Handle);
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <I2C1_DeInit+0x20>)
 80012c2:	f001 fbbd 	bl	8002a40 <HAL_I2C_DeInit>
    I2C1_MspDeInit(&I2c1Handle);
 80012c6:	4802      	ldr	r0, [pc, #8]	; (80012d0 <I2C1_DeInit+0x20>)
 80012c8:	f000 f804 	bl	80012d4 <I2C1_MspDeInit>
  }
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000fb94 	.word	0x2000fb94

080012d4 <I2C1_MspDeInit>:
  * @brief Discovery I2C1 MSP Deinitialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance == DISCOVERY_I2C1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a24      	ldr	r2, [pc, #144]	; (8001374 <I2C1_MspDeInit+0xa0>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d141      	bne.n	800136a <I2C1_MspDeInit+0x96>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 80012e6:	4a24      	ldr	r2, [pc, #144]	; (8001378 <I2C1_MspDeInit+0xa4>)
 80012e8:	4b23      	ldr	r3, [pc, #140]	; (8001378 <I2C1_MspDeInit+0xa4>)
 80012ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f2:	4b21      	ldr	r3, [pc, #132]	; (8001378 <I2C1_MspDeInit+0xa4>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 80012fe:	4a1e      	ldr	r2, [pc, #120]	; (8001378 <I2C1_MspDeInit+0xa4>)
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <I2C1_MspDeInit+0xa4>)
 8001302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <I2C1_MspDeInit+0xa4>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]

    /* Deinit Rx/Tx pins */
    HAL_GPIO_DeInit(DISCOVERY_I2C1_SCL_GPIO_PORT, (DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN));
 8001316:	21c0      	movs	r1, #192	; 0xc0
 8001318:	4818      	ldr	r0, [pc, #96]	; (800137c <I2C1_MspDeInit+0xa8>)
 800131a:	f001 f9f7 	bl	800270c <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C1 peripheral ############################*/
    /* Force & Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2C1_FORCE_RESET();
 800131e:	4a16      	ldr	r2, [pc, #88]	; (8001378 <I2C1_MspDeInit+0xa4>)
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <I2C1_MspDeInit+0xa4>)
 8001322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001324:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001328:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 800132a:	4a13      	ldr	r2, [pc, #76]	; (8001378 <I2C1_MspDeInit+0xa4>)
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <I2C1_MspDeInit+0xa4>)
 800132e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001330:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001334:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_DISABLE();
 8001336:	4a10      	ldr	r2, [pc, #64]	; (8001378 <I2C1_MspDeInit+0xa4>)
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <I2C1_MspDeInit+0xa4>)
 800133a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001340:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C1 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_EV_IRQn);
 8001342:	201f      	movs	r0, #31
 8001344:	f000 faeb 	bl	800191e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_ER_IRQn);
 8001348:	2020      	movs	r0, #32
 800134a:	f000 fae8 	bl	800191e <HAL_NVIC_DisableIRQ>
    
    __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <I2C1_MspDeInit+0xa4>)
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <I2C1_MspDeInit+0xa4>)
 8001352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	6593      	str	r3, [r2, #88]	; 0x58
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <I2C1_MspDeInit+0xa4>)
 800135c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_DisableVddIO2();
 8001366:	f002 f80f 	bl	8003388 <HAL_PWREx_DisableVddIO2>
  }
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40005400 	.word	0x40005400
 8001378:	40021000 	.word	0x40021000
 800137c:	48000400 	.word	0x48000400

08001380 <I2C1_WriteBuffer>:
  * @param  pBuffer: The target register value to be written 
  * @param  Length: buffer size to be written
  * @retval None
  */
static HAL_StatusTypeDef I2C1_WriteBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af04      	add	r7, sp, #16
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	4603      	mov	r3, r0
 800138a:	81fb      	strh	r3, [r7, #14]
 800138c:	460b      	mov	r3, r1
 800138e:	81bb      	strh	r3, [r7, #12]
 8001390:	4613      	mov	r3, r2
 8001392:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout); 
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <I2C1_WriteBuffer+0x4c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	8978      	ldrh	r0, [r7, #10]
 800139e:	89ba      	ldrh	r2, [r7, #12]
 80013a0:	89f9      	ldrh	r1, [r7, #14]
 80013a2:	9302      	str	r3, [sp, #8]
 80013a4:	8c3b      	ldrh	r3, [r7, #32]
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	4603      	mov	r3, r0
 80013ae:	4808      	ldr	r0, [pc, #32]	; (80013d0 <I2C1_WriteBuffer+0x50>)
 80013b0:	f001 fb76 	bl	8002aa0 <HAL_I2C_Mem_Write>
 80013b4:	4603      	mov	r3, r0
 80013b6:	75fb      	strb	r3, [r7, #23]

/* Check the communication status */
  if(status != HAL_OK)
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <I2C1_WriteBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 80013be:	f000 f833 	bl	8001428 <I2C1_Error>
  }        
  return status;
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000034 	.word	0x20000034
 80013d0:	2000fb94 	.word	0x2000fb94

080013d4 <I2C1_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C1_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af04      	add	r7, sp, #16
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	4603      	mov	r3, r0
 80013de:	81fb      	strh	r3, [r7, #14]
 80013e0:	460b      	mov	r3, r1
 80013e2:	81bb      	strh	r3, [r7, #12]
 80013e4:	4613      	mov	r3, r2
 80013e6:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <I2C1_ReadBuffer+0x4c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	8978      	ldrh	r0, [r7, #10]
 80013f2:	89ba      	ldrh	r2, [r7, #12]
 80013f4:	89f9      	ldrh	r1, [r7, #14]
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	8c3b      	ldrh	r3, [r7, #32]
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	4603      	mov	r3, r0
 8001402:	4808      	ldr	r0, [pc, #32]	; (8001424 <I2C1_ReadBuffer+0x50>)
 8001404:	f001 fc60 	bl	8002cc8 <HAL_I2C_Mem_Read>
 8001408:	4603      	mov	r3, r0
 800140a:	75fb      	strb	r3, [r7, #23]
  
/* Check the communication status */
  if(status != HAL_OK)
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <I2C1_ReadBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 8001412:	f000 f809 	bl	8001428 <I2C1_Error>
  }        
  return status;
 8001416:	7dfb      	ldrb	r3, [r7, #23]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000034 	.word	0x20000034
 8001424:	2000fb94 	.word	0x2000fb94

08001428 <I2C1_Error>:
/**
  * @brief Discovery I2C1 error treatment function
  * @retval None
  */
static void I2C1_Error (void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c1Handle);
 800142c:	4803      	ldr	r0, [pc, #12]	; (800143c <I2C1_Error+0x14>)
 800142e:	f001 fb07 	bl	8002a40 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C communication BUS */
  I2C1_Init();
 8001432:	f7ff fe8f 	bl	8001154 <I2C1_Init>
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000fb94 	.word	0x2000fb94

08001440 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001446:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <AUDIO_IO_Init+0x64>)
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <AUDIO_IO_Init+0x64>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144c:	f043 0310 	orr.w	r3, r3, #16
 8001450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <AUDIO_IO_Init+0x64>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 800145e:	2308      	movs	r3, #8
 8001460:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001466:	2302      	movs	r3, #2
 8001468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	; (80014a8 <AUDIO_IO_Init+0x68>)
 8001474:	f000 ffa2 	bl	80023bc <HAL_GPIO_Init>

  /* I2C bus init */
  I2C1_Init();
 8001478:	f7ff fe6c 	bl	8001154 <I2C1_Init>

  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 800147c:	2200      	movs	r2, #0
 800147e:	2108      	movs	r1, #8
 8001480:	4809      	ldr	r0, [pc, #36]	; (80014a8 <AUDIO_IO_Init+0x68>)
 8001482:	f001 fa37 	bl	80028f4 <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8001486:	2005      	movs	r0, #5
 8001488:	f000 f912 	bl	80016b0 <HAL_Delay>

  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 800148c:	2201      	movs	r2, #1
 800148e:	2108      	movs	r1, #8
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <AUDIO_IO_Init+0x68>)
 8001492:	f001 fa2f 	bl	80028f4 <HAL_GPIO_WritePin>
   
  /* wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8001496:	2005      	movs	r0, #5
 8001498:	f000 f90a 	bl	80016b0 <HAL_Delay>
}
 800149c:	bf00      	nop
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000
 80014a8:	48001000 	.word	0x48001000

080014ac <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)                       /* TO DO */
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
  
  /***********************************************************************/
  /* In case of battery-supplied powered, there is no audio codec-based 
     features available. Set audio codec I/O default setting */
  /***********************************************************************/ 
  __HAL_RCC_GPIOE_CLK_ENABLE();  
 80014b2:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <AUDIO_IO_DeInit+0x78>)
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <AUDIO_IO_DeInit+0x78>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	f043 0310 	orr.w	r3, r3, #16
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <AUDIO_IO_DeInit+0x78>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP  ;
 80014ca:	2301      	movs	r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pin       = (GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 80014ce:	237c      	movs	r3, #124	; 0x7c
 80014d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 80014d2:	2302      	movs	r3, #2
 80014d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH; 
 80014d6:	2303      	movs	r3, #3
 80014d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4812      	ldr	r0, [pc, #72]	; (8001528 <AUDIO_IO_DeInit+0x7c>)
 80014e0:	f000 ff6c 	bl	80023bc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2104      	movs	r1, #4
 80014e8:	480f      	ldr	r0, [pc, #60]	; (8001528 <AUDIO_IO_DeInit+0x7c>)
 80014ea:	f001 fa03 	bl	80028f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2108      	movs	r1, #8
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <AUDIO_IO_DeInit+0x7c>)
 80014f4:	f001 f9fe 	bl	80028f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2110      	movs	r1, #16
 80014fc:	480a      	ldr	r0, [pc, #40]	; (8001528 <AUDIO_IO_DeInit+0x7c>)
 80014fe:	f001 f9f9 	bl	80028f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	2120      	movs	r1, #32
 8001506:	4808      	ldr	r0, [pc, #32]	; (8001528 <AUDIO_IO_DeInit+0x7c>)
 8001508:	f001 f9f4 	bl	80028f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2140      	movs	r1, #64	; 0x40
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <AUDIO_IO_DeInit+0x7c>)
 8001512:	f001 f9ef 	bl	80028f4 <HAL_GPIO_WritePin>

  /* I2C bus Deinit */
  I2C1_DeInit();
 8001516:	f7ff fecb 	bl	80012b0 <I2C1_DeInit>
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000
 8001528:	48001000 	.word	0x48001000

0800152c <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af02      	add	r7, sp, #8
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
 8001536:	460b      	mov	r3, r1
 8001538:	71bb      	strb	r3, [r7, #6]
 800153a:	4613      	mov	r3, r2
 800153c:	717b      	strb	r3, [r7, #5]
  I2C1_WriteBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	b298      	uxth	r0, r3
 8001542:	79bb      	ldrb	r3, [r7, #6]
 8001544:	b299      	uxth	r1, r3
 8001546:	1d7a      	adds	r2, r7, #5
 8001548:	2301      	movs	r3, #1
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	4613      	mov	r3, r2
 800154e:	2201      	movs	r2, #1
 8001550:	f7ff ff16 	bl	8001380 <I2C1_WriteBuffer>
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af02      	add	r7, sp, #8
 8001562:	4603      	mov	r3, r0
 8001564:	460a      	mov	r2, r1
 8001566:	71fb      	strb	r3, [r7, #7]
 8001568:	4613      	mov	r3, r2
 800156a:	71bb      	strb	r3, [r7, #6]
  uint8_t Read_Value = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	73fb      	strb	r3, [r7, #15]
  
  I2C1_ReadBuffer((uint16_t) Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Read_Value, 1); 
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	b298      	uxth	r0, r3
 8001574:	79bb      	ldrb	r3, [r7, #6]
 8001576:	b299      	uxth	r1, r3
 8001578:	f107 020f 	add.w	r2, r7, #15
 800157c:	2301      	movs	r3, #1
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	4613      	mov	r3, r2
 8001582:	2201      	movs	r2, #1
 8001584:	f7ff ff26 	bl	80013d4 <I2C1_ReadBuffer>
  
  return Read_Value;
 8001588:	7bfb      	ldrb	r3, [r7, #15]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'HalfTransfer' callback function (if any) */
  if (hAudioOut.CbHalfTransfer != (Audio_CallbackTypeDef)NULL)
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_SAI_TxHalfCpltCallback+0x20>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d002      	beq.n	80015aa <HAL_SAI_TxHalfCpltCallback+0x16>
  {
    hAudioOut.CbHalfTransfer();
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_SAI_TxHalfCpltCallback+0x20>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4798      	blx	r3
  }
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000068 	.word	0x20000068

080015b8 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'ErrorCallback' callback function (if any) */
  if (hAudioOut.CbError != (Audio_CallbackTypeDef)NULL)
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_SAI_ErrorCallback+0x20>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <HAL_SAI_ErrorCallback+0x16>
  {
    hAudioOut.CbError();
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <HAL_SAI_ErrorCallback+0x20>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4798      	blx	r3
  }
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000068 	.word	0x20000068

080015dc <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter : DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'ErrorCallback' callback function (if any) */
  if (hAudioIn.CbError != (Audio_CallbackTypeDef)NULL)
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_DFSDM_FilterErrorCallback+0x24>)
 80015e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_DFSDM_FilterErrorCallback+0x1a>
  {
    hAudioIn.CbError();
 80015ee:	4b04      	ldr	r3, [pc, #16]	; (8001600 <HAL_DFSDM_FilterErrorCallback+0x24>)
 80015f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015f4:	4798      	blx	r3
  }
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000078 	.word	0x20000078

08001604 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160e:	2003      	movs	r0, #3
 8001610:	f000 f950 	bl	80018b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001614:	200f      	movs	r0, #15
 8001616:	f000 f80d 	bl	8001634 <HAL_InitTick>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	71fb      	strb	r3, [r7, #7]
 8001624:	e001      	b.n	800162a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001626:	f005 fa89 	bl	8006b3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800162a:	79fb      	ldrb	r3, [r7, #7]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_InitTick+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <HAL_InitTick+0x44>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	099b      	lsrs	r3, r3, #6
 800164c:	4618      	mov	r0, r3
 800164e:	f000 f974 	bl	800193a <HAL_SYSTICK_Config>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <HAL_InitTick+0x2a>
  {
    status = HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	e005      	b.n	800166a <HAL_InitTick+0x36>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	f04f 30ff 	mov.w	r0, #4294967295
 8001666:	f000 f930 	bl	80018ca <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000044 	.word	0x20000044
 8001678:	10624dd3 	.word	0x10624dd3

0800167c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  uwTick++;
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <HAL_IncTick+0x18>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	4a03      	ldr	r2, [pc, #12]	; (8001694 <HAL_IncTick+0x18>)
 8001688:	6013      	str	r3, [r2, #0]
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	2000fbe0 	.word	0x2000fbe0

08001698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return uwTick;
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <HAL_GetTick+0x14>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	2000fbe0 	.word	0x2000fbe0

080016b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b8:	f7ff ffee 	bl	8001698 <HAL_GetTick>
 80016bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c8:	d002      	beq.n	80016d0 <HAL_Delay+0x20>
  {
    wait++;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	3301      	adds	r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016d0:	bf00      	nop
 80016d2:	f7ff ffe1 	bl	8001698 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1ad2      	subs	r2, r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d3f7      	bcc.n	80016d2 <HAL_Delay+0x22>
  {
  }
}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	; (8001730 <NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800175a:	4909      	ldr	r1, [pc, #36]	; (8001780 <NVIC_EnableIRQ+0x30>)
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	095b      	lsrs	r3, r3, #5
 8001762:	79fa      	ldrb	r2, [r7, #7]
 8001764:	f002 021f 	and.w	r2, r2, #31
 8001768:	2001      	movs	r0, #1
 800176a:	fa00 f202 	lsl.w	r2, r0, r2
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e100 	.word	0xe000e100

08001784 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800178e:	4909      	ldr	r1, [pc, #36]	; (80017b4 <NVIC_DisableIRQ+0x30>)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	095b      	lsrs	r3, r3, #5
 8001796:	79fa      	ldrb	r2, [r7, #7]
 8001798:	f002 021f 	and.w	r2, r2, #31
 800179c:	2001      	movs	r0, #1
 800179e:	fa00 f202 	lsl.w	r2, r0, r2
 80017a2:	3320      	adds	r3, #32
 80017a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	da0b      	bge.n	80017e4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	490d      	ldr	r1, [pc, #52]	; (8001804 <NVIC_SetPriority+0x4c>)
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	3b04      	subs	r3, #4
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	440b      	add	r3, r1
 80017e0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e2:	e009      	b.n	80017f8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	4908      	ldr	r1, [pc, #32]	; (8001808 <NVIC_SetPriority+0x50>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00
 8001808:	e000e100 	.word	0xe000e100

0800180c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f1c3 0307 	rsb	r3, r3, #7
 8001826:	2b04      	cmp	r3, #4
 8001828:	bf28      	it	cs
 800182a:	2304      	movcs	r3, #4
 800182c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3304      	adds	r3, #4
 8001832:	2b06      	cmp	r3, #6
 8001834:	d902      	bls.n	800183c <NVIC_EncodePriority+0x30>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3b03      	subs	r3, #3
 800183a:	e000      	b.n	800183e <NVIC_EncodePriority+0x32>
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	2201      	movs	r2, #1
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	1e5a      	subs	r2, r3, #1
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	401a      	ands	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001852:	2101      	movs	r1, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa01 f303 	lsl.w	r3, r1, r3
 800185a:	1e59      	subs	r1, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	4313      	orrs	r3, r2
         );
}
 8001862:	4618      	mov	r0, r3
 8001864:	3724      	adds	r7, #36	; 0x24
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001880:	d301      	bcc.n	8001886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001882:	2301      	movs	r3, #1
 8001884:	e00f      	b.n	80018a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <SysTick_Config+0x40>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3b01      	subs	r3, #1
 800188c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800188e:	210f      	movs	r1, #15
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f7ff ff90 	bl	80017b8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <SysTick_Config+0x40>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800189e:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <SysTick_Config+0x40>)
 80018a0:	2207      	movs	r2, #7
 80018a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	e000e010 	.word	0xe000e010

080018b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff ff15 	bl	80016ec <NVIC_SetPriorityGrouping>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018dc:	f7ff ff2a 	bl	8001734 <NVIC_GetPriorityGrouping>
 80018e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	6978      	ldr	r0, [r7, #20]
 80018e8:	f7ff ff90 	bl	800180c <NVIC_EncodePriority>
 80018ec:	4602      	mov	r2, r0
 80018ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f2:	4611      	mov	r1, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff5f 	bl	80017b8 <NVIC_SetPriority>
}
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff1d 	bl	8001750 <NVIC_EnableIRQ>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff29 	bl	8001784 <NVIC_DisableIRQ>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ff94 	bl	8001870 <SysTick_Config>
 8001948:	4603      	mov	r3, r0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e0ac      	b.n	8001ac0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f000 fa82 	bl	8001e74 <DFSDM_GetChannelFromInstance>
 8001970:	4602      	mov	r2, r0
 8001972:	4b55      	ldr	r3, [pc, #340]	; (8001ac8 <HAL_DFSDM_ChannelInit+0x174>)
 8001974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e09f      	b.n	8001ac0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f004 ff77 	bl	8006874 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001986:	4b51      	ldr	r3, [pc, #324]	; (8001acc <HAL_DFSDM_ChannelInit+0x178>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	4a4f      	ldr	r2, [pc, #316]	; (8001acc <HAL_DFSDM_ChannelInit+0x178>)
 800198e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001990:	4b4e      	ldr	r3, [pc, #312]	; (8001acc <HAL_DFSDM_ChannelInit+0x178>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d125      	bne.n	80019e4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001998:	4a4d      	ldr	r2, [pc, #308]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 800199a:	4b4d      	ldr	r3, [pc, #308]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019a2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80019a4:	494a      	ldr	r1, [pc, #296]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 80019a6:	4b4a      	ldr	r3, [pc, #296]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80019b2:	4a47      	ldr	r2, [pc, #284]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 80019b4:	4b46      	ldr	r3, [pc, #280]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80019bc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	791b      	ldrb	r3, [r3, #4]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d108      	bne.n	80019d8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80019c6:	4942      	ldr	r1, [pc, #264]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 80019c8:	4b41      	ldr	r3, [pc, #260]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	041b      	lsls	r3, r3, #16
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80019d8:	4a3d      	ldr	r2, [pc, #244]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 80019da:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019e2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80019f2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	6811      	ldr	r1, [r2, #0]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6910      	ldr	r0, [r2, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6952      	ldr	r2, [r2, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a06:	4310      	orrs	r0, r2
                                        hdfsdm_channel->Init.Input.Pins);
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6992      	ldr	r2, [r2, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a0c:	4302      	orrs	r2, r0
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	f022 020f 	bic.w	r2, r2, #15
 8001a20:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	6811      	ldr	r1, [r2, #0]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	69d0      	ldr	r0, [r2, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6a12      	ldr	r2, [r2, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a34:	4302      	orrs	r2, r0
 8001a36:	430a      	orrs	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	6892      	ldr	r2, [r2, #8]
 8001a44:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001a48:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	6891      	ldr	r1, [r2, #8]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6a50      	ldr	r0, [r2, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a5c:	3a01      	subs	r2, #1
 8001a5e:	0412      	lsls	r2, r2, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a60:	4302      	orrs	r2, r0
 8001a62:	430a      	orrs	r2, r1
 8001a64:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	6852      	ldr	r2, [r2, #4]
 8001a70:	f002 0207 	and.w	r2, r2, #7
 8001a74:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	6851      	ldr	r1, [r2, #4]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a84:	0210      	lsls	r0, r2, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a8a:	00d2      	lsls	r2, r2, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001a8c:	4302      	orrs	r2, r0
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aa0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f9e0 	bl	8001e74 <DFSDM_GetChannelFromInstance>
 8001ab4:	4601      	mov	r1, r0
 8001ab6:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <HAL_DFSDM_ChannelInit+0x174>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000120 	.word	0x20000120
 8001acc:	2000011c 	.word	0x2000011c
 8001ad0:	40016000 	.word	0x40016000

08001ad4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e0ca      	b.n	8001c7c <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a66      	ldr	r2, [pc, #408]	; (8001c84 <HAL_DFSDM_FilterInit+0x1b0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d109      	bne.n	8001b04 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d003      	beq.n	8001b00 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0bb      	b.n	8001c7c <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f004 ff07 	bl	8006930 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001b30:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7a1b      	ldrb	r3, [r3, #8]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d108      	bne.n	8001b4c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e007      	b.n	8001b5c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001b5a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7a5b      	ldrb	r3, [r3, #9]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d108      	bne.n	8001b76 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e007      	b.n	8001b86 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8001b94:	f023 0308 	bic.w	r3, r3, #8
 8001b98:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d108      	bne.n	8001bb4 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	6811      	ldr	r1, [r2, #0]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6952      	ldr	r2, [r2, #20]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	7c1b      	ldrb	r3, [r3, #16]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d108      	bne.n	8001bce <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	f042 0210 	orr.w	r2, r2, #16
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e007      	b.n	8001bde <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	f022 0210 	bic.w	r2, r2, #16
 8001bdc:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7c5b      	ldrb	r3, [r3, #17]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d108      	bne.n	8001bf8 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	f042 0220 	orr.w	r2, r2, #32
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	e007      	b.n	8001c08 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	f022 0220 	bic.w	r2, r2, #32
 8001c06:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8001c16:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001c1a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	6951      	ldr	r1, [r2, #20]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	69d0      	ldr	r0, [r2, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6a12      	ldr	r2, [r2, #32]
 8001c2e:	3a01      	subs	r2, #1
 8001c30:	0412      	lsls	r2, r2, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001c32:	4310      	orrs	r0, r2
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c38:	3a01      	subs	r2, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001c3a:	4302      	orrs	r2, r0
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699a      	ldr	r2, [r3, #24]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7c1a      	ldrb	r2, [r3, #16]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	f042 0201 	orr.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40016100 	.word	0x40016100

08001c88 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d02e      	beq.n	8001d00 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001ca8:	2bff      	cmp	r3, #255	; 0xff
 8001caa:	d029      	beq.n	8001d00 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cbe:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d10d      	bne.n	8001ce2 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	6811      	ldr	r1, [r2, #0]
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	0212      	lsls	r2, r2, #8
 8001cd4:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	e00a      	b.n	8001cf8 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	6811      	ldr	r1, [r2, #0]
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	0212      	lsls	r2, r2, #8
 8001cf0:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cfe:	e001      	b.n	8001d04 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	371c      	adds	r7, #28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	75fb      	strb	r3, [r7, #23]
 8001d34:	e064      	b.n	8001e00 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d44:	d002      	beq.n	8001d4c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	75fb      	strb	r3, [r7, #23]
 8001d4a:	e059      	b.n	8001e00 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10e      	bne.n	8001d72 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10a      	bne.n	8001d72 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d002      	beq.n	8001d72 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	75fb      	strb	r3, [r7, #23]
 8001d70:	e046      	b.n	8001e00 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10b      	bne.n	8001d92 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d107      	bne.n	8001d92 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	d102      	bne.n	8001d92 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	75fb      	strb	r3, [r7, #23]
 8001d90:	e036      	b.n	8001e00 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d004      	beq.n	8001da6 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d12a      	bne.n	8001dfc <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	4a18      	ldr	r2, [pc, #96]	; (8001e0c <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001dac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001db4:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001dbe:	69d2      	ldr	r2, [r2, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001dc0:	2a20      	cmp	r2, #32
 8001dc2:	d101      	bne.n	8001dc8 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8001dc4:	4a13      	ldr	r2, [pc, #76]	; (8001e14 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001dc6:	e000      	b.n	8001dca <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8001dc8:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	331c      	adds	r3, #28
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f000 f9ae 	bl	800213c <HAL_DMA_Start_IT>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d006      	beq.n	8001df4 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	22ff      	movs	r2, #255	; 0xff
 8001dea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001df2:	e005      	b.n	8001e00 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 f893 	bl	8001f20 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001dfa:	e001      	b.n	8001e00 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	08001e35 	.word	0x08001e35
 8001e10:	08001e51 	.word	0x08001e51
 8001e14:	08001e19 	.word	0x08001e19

08001e18 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f004 fe48 	bl	8006abc <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f004 fe4a 	bl	8006adc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2203      	movs	r2, #3
 8001e62:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f7ff fbb9 	bl	80015dc <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a20      	ldr	r2, [pc, #128]	; (8001f00 <DFSDM_GetChannelFromInstance+0x8c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d102      	bne.n	8001e8a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	e032      	b.n	8001ef0 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a1d      	ldr	r2, [pc, #116]	; (8001f04 <DFSDM_GetChannelFromInstance+0x90>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d102      	bne.n	8001e98 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001e92:	2301      	movs	r3, #1
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	e02b      	b.n	8001ef0 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <DFSDM_GetChannelFromInstance+0x94>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d102      	bne.n	8001ea6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	e024      	b.n	8001ef0 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel3)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a18      	ldr	r2, [pc, #96]	; (8001f0c <DFSDM_GetChannelFromInstance+0x98>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d102      	bne.n	8001eb4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	e01d      	b.n	8001ef0 <DFSDM_GetChannelFromInstance+0x7c>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <DFSDM_GetChannelFromInstance+0x9c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d102      	bne.n	8001ec2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e016      	b.n	8001ef0 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel5)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <DFSDM_GetChannelFromInstance+0xa0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d102      	bne.n	8001ed0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8001eca:	2305      	movs	r3, #5
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	e00f      	b.n	8001ef0 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel6)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a11      	ldr	r2, [pc, #68]	; (8001f18 <DFSDM_GetChannelFromInstance+0xa4>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d102      	bne.n	8001ede <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8001ed8:	2306      	movs	r3, #6
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	e008      	b.n	8001ef0 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel7)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <DFSDM_GetChannelFromInstance+0xa8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d102      	bne.n	8001eec <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	e001      	b.n	8001ef0 <DFSDM_GetChannelFromInstance+0x7c>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40016000 	.word	0x40016000
 8001f04:	40016020 	.word	0x40016020
 8001f08:	40016040 	.word	0x40016040
 8001f0c:	40016060 	.word	0x40016060
 8001f10:	40016080 	.word	0x40016080
 8001f14:	400160a0 	.word	0x400160a0
 8001f18:	400160c0 	.word	0x400160c0
 8001f1c:	400160e0 	.word	0x400160e0

08001f20 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d108      	bne.n	8001f42 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e033      	b.n	8001faa <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001f60:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d116      	bne.n	8001faa <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d107      	bne.n	8001f94 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	f042 0202 	orr.w	r2, r2, #2
 8001f92:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d102      	bne.n	8001fa4 <DFSDM_RegConvStart+0x84>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	e000      	b.n	8001fa6 <DFSDM_RegConvStart+0x86>
 8001fa4:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <DFSDM_RegConvStart+0x98>
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	e000      	b.n	8001fba <DFSDM_RegConvStart+0x9a>
 8001fb8:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e098      	b.n	8002110 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b4d      	ldr	r3, [pc, #308]	; (800211c <HAL_DMA_Init+0x150>)
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d80f      	bhi.n	800200a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b4b      	ldr	r3, [pc, #300]	; (8002120 <HAL_DMA_Init+0x154>)
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4a4b      	ldr	r2, [pc, #300]	; (8002124 <HAL_DMA_Init+0x158>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	009a      	lsls	r2, r3, #2
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a48      	ldr	r2, [pc, #288]	; (8002128 <HAL_DMA_Init+0x15c>)
 8002006:	641a      	str	r2, [r3, #64]	; 0x40
 8002008:	e00e      	b.n	8002028 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	4b46      	ldr	r3, [pc, #280]	; (800212c <HAL_DMA_Init+0x160>)
 8002012:	4413      	add	r3, r2
 8002014:	4a43      	ldr	r2, [pc, #268]	; (8002124 <HAL_DMA_Init+0x158>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	091b      	lsrs	r3, r3, #4
 800201c:	009a      	lsls	r2, r3, #2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a42      	ldr	r2, [pc, #264]	; (8002130 <HAL_DMA_Init+0x164>)
 8002026:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800203e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002042:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800204c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002058:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002064:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002082:	d039      	beq.n	80020f8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	4a27      	ldr	r2, [pc, #156]	; (8002128 <HAL_DMA_Init+0x15c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d11a      	bne.n	80020c4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800208e:	4929      	ldr	r1, [pc, #164]	; (8002134 <HAL_DMA_Init+0x168>)
 8002090:	4b28      	ldr	r3, [pc, #160]	; (8002134 <HAL_DMA_Init+0x168>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002098:	f003 031c 	and.w	r3, r3, #28
 800209c:	200f      	movs	r0, #15
 800209e:	fa00 f303 	lsl.w	r3, r0, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	4013      	ands	r3, r2
 80020a6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020a8:	4822      	ldr	r0, [pc, #136]	; (8002134 <HAL_DMA_Init+0x168>)
 80020aa:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_DMA_Init+0x168>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6859      	ldr	r1, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f003 031c 	and.w	r3, r3, #28
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	4313      	orrs	r3, r2
 80020c0:	6003      	str	r3, [r0, #0]
 80020c2:	e019      	b.n	80020f8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020c4:	491c      	ldr	r1, [pc, #112]	; (8002138 <HAL_DMA_Init+0x16c>)
 80020c6:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <HAL_DMA_Init+0x16c>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f003 031c 	and.w	r3, r3, #28
 80020d2:	200f      	movs	r0, #15
 80020d4:	fa00 f303 	lsl.w	r3, r0, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	4013      	ands	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020de:	4816      	ldr	r0, [pc, #88]	; (8002138 <HAL_DMA_Init+0x16c>)
 80020e0:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_DMA_Init+0x16c>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ec:	f003 031c 	and.w	r3, r3, #28
 80020f0:	fa01 f303 	lsl.w	r3, r1, r3
 80020f4:	4313      	orrs	r3, r2
 80020f6:	6003      	str	r3, [r0, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	40020407 	.word	0x40020407
 8002120:	bffdfff8 	.word	0xbffdfff8
 8002124:	cccccccd 	.word	0xcccccccd
 8002128:	40020000 	.word	0x40020000
 800212c:	bffdfbf8 	.word	0xbffdfbf8
 8002130:	40020400 	.word	0x40020400
 8002134:	400200a8 	.word	0x400200a8
 8002138:	400204a8 	.word	0x400204a8

0800213c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
 8002148:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_DMA_Start_IT+0x20>
 8002158:	2302      	movs	r3, #2
 800215a:	e04b      	b.n	80021f4 <HAL_DMA_Start_IT+0xb8>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b01      	cmp	r3, #1
 800216e:	d13a      	bne.n	80021e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f8e0 	bl	800235a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d008      	beq.n	80021b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	f042 020e 	orr.w	r2, r2, #14
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	e00f      	b.n	80021d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	f022 0204 	bic.w	r2, r2, #4
 80021c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	f042 020a 	orr.w	r2, r2, #10
 80021d2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	e005      	b.n	80021f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80021ee:	2302      	movs	r3, #2
 80021f0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80021f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002218:	f003 031c 	and.w	r3, r3, #28
 800221c:	2204      	movs	r2, #4
 800221e:	409a      	lsls	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d026      	beq.n	8002276 <HAL_DMA_IRQHandler+0x7a>
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	d021      	beq.n	8002276 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b00      	cmp	r3, #0
 800223e:	d107      	bne.n	8002250 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	f022 0204 	bic.w	r2, r2, #4
 800224e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002258:	f002 021c 	and.w	r2, r2, #28
 800225c:	2104      	movs	r1, #4
 800225e:	fa01 f202 	lsl.w	r2, r1, r2
 8002262:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	2b00      	cmp	r3, #0
 800226a:	d071      	beq.n	8002350 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002274:	e06c      	b.n	8002350 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f003 031c 	and.w	r3, r3, #28
 800227e:	2202      	movs	r2, #2
 8002280:	409a      	lsls	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4013      	ands	r3, r2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d02e      	beq.n	80022e8 <HAL_DMA_IRQHandler+0xec>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d029      	beq.n	80022e8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10b      	bne.n	80022ba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	f022 020a 	bic.w	r2, r2, #10
 80022b0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022c2:	f002 021c 	and.w	r2, r2, #28
 80022c6:	2102      	movs	r1, #2
 80022c8:	fa01 f202 	lsl.w	r2, r1, r2
 80022cc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d038      	beq.n	8002350 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80022e6:	e033      	b.n	8002350 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	f003 031c 	and.w	r3, r3, #28
 80022f0:	2208      	movs	r2, #8
 80022f2:	409a      	lsls	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d02a      	beq.n	8002352 <HAL_DMA_IRQHandler+0x156>
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d025      	beq.n	8002352 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	f022 020e 	bic.w	r2, r2, #14
 8002314:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800231e:	f002 021c 	and.w	r2, r2, #28
 8002322:	2101      	movs	r1, #1
 8002324:	fa01 f202 	lsl.w	r2, r1, r2
 8002328:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002344:	2b00      	cmp	r3, #0
 8002346:	d004      	beq.n	8002352 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002350:	bf00      	nop
 8002352:	bf00      	nop
}
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800235a:	b480      	push	{r7}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002370:	f002 021c 	and.w	r2, r2, #28
 8002374:	2101      	movs	r1, #1
 8002376:	fa01 f202 	lsl.w	r2, r1, r2
 800237a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b10      	cmp	r3, #16
 800238a:	d108      	bne.n	800239e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800239c:	e007      	b.n	80023ae <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	60da      	str	r2, [r3, #12]
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ca:	e17f      	b.n	80026cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2101      	movs	r1, #1
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	fa01 f303 	lsl.w	r3, r1, r3
 80023d8:	4013      	ands	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8171 	beq.w	80026c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x38>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b12      	cmp	r3, #18
 80023f2:	d123      	bne.n	800243c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	6939      	ldr	r1, [r7, #16]
 8002438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d00b      	beq.n	8002490 <HAL_GPIO_Init+0xd4>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d007      	beq.n	8002490 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002484:	2b11      	cmp	r3, #17
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b12      	cmp	r3, #18
 800248e:	d130      	bne.n	80024f2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	2203      	movs	r2, #3
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024c6:	2201      	movs	r2, #1
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	091b      	lsrs	r3, r3, #4
 80024dc:	f003 0201 	and.w	r2, r3, #1
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d118      	bne.n	8002530 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002504:	2201      	movs	r2, #1
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	08db      	lsrs	r3, r3, #3
 800251a:	f003 0201 	and.w	r2, r3, #1
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2203      	movs	r2, #3
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80ac 	beq.w	80026c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	4a5e      	ldr	r2, [pc, #376]	; (80026e8 <HAL_GPIO_Init+0x32c>)
 8002570:	4b5d      	ldr	r3, [pc, #372]	; (80026e8 <HAL_GPIO_Init+0x32c>)
 8002572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6613      	str	r3, [r2, #96]	; 0x60
 800257a:	4b5b      	ldr	r3, [pc, #364]	; (80026e8 <HAL_GPIO_Init+0x32c>)
 800257c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002586:	4a59      	ldr	r2, [pc, #356]	; (80026ec <HAL_GPIO_Init+0x330>)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002592:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	220f      	movs	r2, #15
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025b0:	d025      	beq.n	80025fe <HAL_GPIO_Init+0x242>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4e      	ldr	r2, [pc, #312]	; (80026f0 <HAL_GPIO_Init+0x334>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d01f      	beq.n	80025fa <HAL_GPIO_Init+0x23e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a4d      	ldr	r2, [pc, #308]	; (80026f4 <HAL_GPIO_Init+0x338>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d019      	beq.n	80025f6 <HAL_GPIO_Init+0x23a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a4c      	ldr	r2, [pc, #304]	; (80026f8 <HAL_GPIO_Init+0x33c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <HAL_GPIO_Init+0x236>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4b      	ldr	r2, [pc, #300]	; (80026fc <HAL_GPIO_Init+0x340>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00d      	beq.n	80025ee <HAL_GPIO_Init+0x232>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4a      	ldr	r2, [pc, #296]	; (8002700 <HAL_GPIO_Init+0x344>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d007      	beq.n	80025ea <HAL_GPIO_Init+0x22e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a49      	ldr	r2, [pc, #292]	; (8002704 <HAL_GPIO_Init+0x348>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d101      	bne.n	80025e6 <HAL_GPIO_Init+0x22a>
 80025e2:	2306      	movs	r3, #6
 80025e4:	e00c      	b.n	8002600 <HAL_GPIO_Init+0x244>
 80025e6:	2307      	movs	r3, #7
 80025e8:	e00a      	b.n	8002600 <HAL_GPIO_Init+0x244>
 80025ea:	2305      	movs	r3, #5
 80025ec:	e008      	b.n	8002600 <HAL_GPIO_Init+0x244>
 80025ee:	2304      	movs	r3, #4
 80025f0:	e006      	b.n	8002600 <HAL_GPIO_Init+0x244>
 80025f2:	2303      	movs	r3, #3
 80025f4:	e004      	b.n	8002600 <HAL_GPIO_Init+0x244>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e002      	b.n	8002600 <HAL_GPIO_Init+0x244>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_GPIO_Init+0x244>
 80025fe:	2300      	movs	r3, #0
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	f002 0203 	and.w	r2, r2, #3
 8002606:	0092      	lsls	r2, r2, #2
 8002608:	4093      	lsls	r3, r2
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002610:	4936      	ldr	r1, [pc, #216]	; (80026ec <HAL_GPIO_Init+0x330>)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	089b      	lsrs	r3, r3, #2
 8002616:	3302      	adds	r3, #2
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800261e:	4b3a      	ldr	r3, [pc, #232]	; (8002708 <HAL_GPIO_Init+0x34c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	43db      	mvns	r3, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002642:	4a31      	ldr	r2, [pc, #196]	; (8002708 <HAL_GPIO_Init+0x34c>)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002648:	4b2f      	ldr	r3, [pc, #188]	; (8002708 <HAL_GPIO_Init+0x34c>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	43db      	mvns	r3, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800266c:	4a26      	ldr	r2, [pc, #152]	; (8002708 <HAL_GPIO_Init+0x34c>)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002672:	4b25      	ldr	r3, [pc, #148]	; (8002708 <HAL_GPIO_Init+0x34c>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	43db      	mvns	r3, r3
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002696:	4a1c      	ldr	r2, [pc, #112]	; (8002708 <HAL_GPIO_Init+0x34c>)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800269c:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <HAL_GPIO_Init+0x34c>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026c0:	4a11      	ldr	r2, [pc, #68]	; (8002708 <HAL_GPIO_Init+0x34c>)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	3301      	adds	r3, #1
 80026ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa22 f303 	lsr.w	r3, r2, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f47f ae78 	bne.w	80023cc <HAL_GPIO_Init+0x10>
  }
}
 80026dc:	bf00      	nop
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40010000 	.word	0x40010000
 80026f0:	48000400 	.word	0x48000400
 80026f4:	48000800 	.word	0x48000800
 80026f8:	48000c00 	.word	0x48000c00
 80026fc:	48001000 	.word	0x48001000
 8002700:	48001400 	.word	0x48001400
 8002704:	48001800 	.word	0x48001800
 8002708:	40010400 	.word	0x40010400

0800270c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800271a:	e0cd      	b.n	80028b8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800271c:	2201      	movs	r2, #1
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	409a      	lsls	r2, r3
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80c1 	beq.w	80028b2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	2103      	movs	r1, #3
 800273a:	fa01 f303 	lsl.w	r3, r1, r3
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	08da      	lsrs	r2, r3, #3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	08d9      	lsrs	r1, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3108      	adds	r1, #8
 8002750:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	200f      	movs	r0, #15
 800275e:	fa00 f303 	lsl.w	r3, r0, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	4019      	ands	r1, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3208      	adds	r2, #8
 800276a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2103      	movs	r1, #3
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	401a      	ands	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	2101      	movs	r1, #1
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	401a      	ands	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	2103      	movs	r1, #3
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	401a      	ands	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b2:	2101      	movs	r1, #1
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	401a      	ands	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80027c2:	4a44      	ldr	r2, [pc, #272]	; (80028d4 <HAL_GPIO_DeInit+0x1c8>)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	089b      	lsrs	r3, r3, #2
 80027c8:	3302      	adds	r3, #2
 80027ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	220f      	movs	r2, #15
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4013      	ands	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027ea:	d025      	beq.n	8002838 <HAL_GPIO_DeInit+0x12c>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a3a      	ldr	r2, [pc, #232]	; (80028d8 <HAL_GPIO_DeInit+0x1cc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d01f      	beq.n	8002834 <HAL_GPIO_DeInit+0x128>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a39      	ldr	r2, [pc, #228]	; (80028dc <HAL_GPIO_DeInit+0x1d0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d019      	beq.n	8002830 <HAL_GPIO_DeInit+0x124>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a38      	ldr	r2, [pc, #224]	; (80028e0 <HAL_GPIO_DeInit+0x1d4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d013      	beq.n	800282c <HAL_GPIO_DeInit+0x120>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a37      	ldr	r2, [pc, #220]	; (80028e4 <HAL_GPIO_DeInit+0x1d8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d00d      	beq.n	8002828 <HAL_GPIO_DeInit+0x11c>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a36      	ldr	r2, [pc, #216]	; (80028e8 <HAL_GPIO_DeInit+0x1dc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d007      	beq.n	8002824 <HAL_GPIO_DeInit+0x118>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a35      	ldr	r2, [pc, #212]	; (80028ec <HAL_GPIO_DeInit+0x1e0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d101      	bne.n	8002820 <HAL_GPIO_DeInit+0x114>
 800281c:	2306      	movs	r3, #6
 800281e:	e00c      	b.n	800283a <HAL_GPIO_DeInit+0x12e>
 8002820:	2307      	movs	r3, #7
 8002822:	e00a      	b.n	800283a <HAL_GPIO_DeInit+0x12e>
 8002824:	2305      	movs	r3, #5
 8002826:	e008      	b.n	800283a <HAL_GPIO_DeInit+0x12e>
 8002828:	2304      	movs	r3, #4
 800282a:	e006      	b.n	800283a <HAL_GPIO_DeInit+0x12e>
 800282c:	2303      	movs	r3, #3
 800282e:	e004      	b.n	800283a <HAL_GPIO_DeInit+0x12e>
 8002830:	2302      	movs	r3, #2
 8002832:	e002      	b.n	800283a <HAL_GPIO_DeInit+0x12e>
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <HAL_GPIO_DeInit+0x12e>
 8002838:	2300      	movs	r3, #0
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	f002 0203 	and.w	r2, r2, #3
 8002840:	0092      	lsls	r2, r2, #2
 8002842:	fa03 f202 	lsl.w	r2, r3, r2
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	429a      	cmp	r2, r3
 800284a:	d132      	bne.n	80028b2 <HAL_GPIO_DeInit+0x1a6>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	220f      	movs	r2, #15
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800285c:	481d      	ldr	r0, [pc, #116]	; (80028d4 <HAL_GPIO_DeInit+0x1c8>)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	089b      	lsrs	r3, r3, #2
 8002862:	491c      	ldr	r1, [pc, #112]	; (80028d4 <HAL_GPIO_DeInit+0x1c8>)
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	0892      	lsrs	r2, r2, #2
 8002868:	3202      	adds	r2, #2
 800286a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	43d2      	mvns	r2, r2
 8002872:	400a      	ands	r2, r1
 8002874:	3302      	adds	r3, #2
 8002876:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800287a:	491d      	ldr	r1, [pc, #116]	; (80028f0 <HAL_GPIO_DeInit+0x1e4>)
 800287c:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <HAL_GPIO_DeInit+0x1e4>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	43db      	mvns	r3, r3
 8002884:	4013      	ands	r3, r2
 8002886:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002888:	4919      	ldr	r1, [pc, #100]	; (80028f0 <HAL_GPIO_DeInit+0x1e4>)
 800288a:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_GPIO_DeInit+0x1e4>)
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	43db      	mvns	r3, r3
 8002892:	4013      	ands	r3, r2
 8002894:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002896:	4916      	ldr	r1, [pc, #88]	; (80028f0 <HAL_GPIO_DeInit+0x1e4>)
 8002898:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <HAL_GPIO_DeInit+0x1e4>)
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	43db      	mvns	r3, r3
 80028a0:	4013      	ands	r3, r2
 80028a2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80028a4:	4912      	ldr	r1, [pc, #72]	; (80028f0 <HAL_GPIO_DeInit+0x1e4>)
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_GPIO_DeInit+0x1e4>)
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	4013      	ands	r3, r2
 80028b0:	60cb      	str	r3, [r1, #12]
      }
    }

    position++;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	3301      	adds	r3, #1
 80028b6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f47f af2b 	bne.w	800271c <HAL_GPIO_DeInit+0x10>
  }
}
 80028c6:	bf00      	nop
 80028c8:	371c      	adds	r7, #28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40010000 	.word	0x40010000
 80028d8:	48000400 	.word	0x48000400
 80028dc:	48000800 	.word	0x48000800
 80028e0:	48000c00 	.word	0x48000c00
 80028e4:	48001000 	.word	0x48001000
 80028e8:	48001400 	.word	0x48001400
 80028ec:	48001800 	.word	0x48001800
 80028f0:	40010400 	.word	0x40010400

080028f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	807b      	strh	r3, [r7, #2]
 8002900:	4613      	mov	r3, r2
 8002902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002904:	787b      	ldrb	r3, [r7, #1]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800290a:	887a      	ldrh	r2, [r7, #2]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002910:	e002      	b.n	8002918 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e080      	b.n	8002a38 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f004 f91a 	bl	8006b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2224      	movs	r2, #36	; 0x24
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6852      	ldr	r2, [r2, #4]
 8002970:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002974:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	6892      	ldr	r2, [r2, #8]
 8002980:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002984:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d107      	bne.n	800299e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6892      	ldr	r2, [r2, #8]
 8002996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	e006      	b.n	80029ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6892      	ldr	r2, [r2, #8]
 80029a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d104      	bne.n	80029be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6812      	ldr	r2, [r2, #0]
 80029da:	68d2      	ldr	r2, [r2, #12]
 80029dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6911      	ldr	r1, [r2, #16]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6952      	ldr	r2, [r2, #20]
 80029ee:	4311      	orrs	r1, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6992      	ldr	r2, [r2, #24]
 80029f4:	0212      	lsls	r2, r2, #8
 80029f6:	430a      	orrs	r2, r1
 80029f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	69d1      	ldr	r1, [r2, #28]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6a12      	ldr	r2, [r2, #32]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e021      	b.n	8002a96 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2224      	movs	r2, #36	; 0x24
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f004 f8ce 	bl	8006c0c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	4608      	mov	r0, r1
 8002aaa:	4611      	mov	r1, r2
 8002aac:	461a      	mov	r2, r3
 8002aae:	4603      	mov	r3, r0
 8002ab0:	817b      	strh	r3, [r7, #10]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	813b      	strh	r3, [r7, #8]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	f040 80f9 	bne.w	8002cba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_I2C_Mem_Write+0x34>
 8002ace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d105      	bne.n	8002ae0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ada:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0ed      	b.n	8002cbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_I2C_Mem_Write+0x4e>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e0e6      	b.n	8002cbc <HAL_I2C_Mem_Write+0x21c>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002af6:	f7fe fdcf 	bl	8001698 <HAL_GetTick>
 8002afa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2319      	movs	r3, #25
 8002b02:	2201      	movs	r2, #1
 8002b04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 fad1 	bl	80030b0 <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0d1      	b.n	8002cbc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2221      	movs	r2, #33	; 0x21
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2240      	movs	r2, #64	; 0x40
 8002b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a3a      	ldr	r2, [r7, #32]
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b40:	88f8      	ldrh	r0, [r7, #6]
 8002b42:	893a      	ldrh	r2, [r7, #8]
 8002b44:	8979      	ldrh	r1, [r7, #10]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	9301      	str	r3, [sp, #4]
 8002b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	4603      	mov	r3, r0
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f9e1 	bl	8002f18 <I2C_RequestMemoryWrite>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0a9      	b.n	8002cbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2bff      	cmp	r3, #255	; 0xff
 8002b70:	d90e      	bls.n	8002b90 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	22ff      	movs	r2, #255	; 0xff
 8002b76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	8979      	ldrh	r1, [r7, #10]
 8002b80:	2300      	movs	r3, #0
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 fbb3 	bl	80032f4 <I2C_TransferConfig>
 8002b8e:	e00f      	b.n	8002bb0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	8979      	ldrh	r1, [r7, #10]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 fba2 	bl	80032f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fabb 	bl	8003130 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e07b      	b.n	8002cbc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bcc:	7812      	ldrb	r2, [r2, #0]
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d034      	beq.n	8002c68 <HAL_I2C_Mem_Write+0x1c8>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d130      	bne.n	8002c68 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2180      	movs	r1, #128	; 0x80
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 fa4d 	bl	80030b0 <I2C_WaitOnFlagUntilTimeout>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e04d      	b.n	8002cbc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2bff      	cmp	r3, #255	; 0xff
 8002c28:	d90e      	bls.n	8002c48 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	22ff      	movs	r2, #255	; 0xff
 8002c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	8979      	ldrh	r1, [r7, #10]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 fb57 	bl	80032f4 <I2C_TransferConfig>
 8002c46:	e00f      	b.n	8002c68 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	8979      	ldrh	r1, [r7, #10]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fb46 	bl	80032f4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d19e      	bne.n	8002bb0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fa9a 	bl	80031b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e01a      	b.n	8002cbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6859      	ldr	r1, [r3, #4]
 8002c98:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <HAL_I2C_Mem_Write+0x224>)
 8002c9a:	400b      	ands	r3, r1
 8002c9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e000      	b.n	8002cbc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002cba:	2302      	movs	r3, #2
  }
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	fe00e800 	.word	0xfe00e800

08002cc8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	4608      	mov	r0, r1
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	817b      	strh	r3, [r7, #10]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	813b      	strh	r3, [r7, #8]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	f040 80fd 	bne.w	8002eea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_I2C_Mem_Read+0x34>
 8002cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d105      	bne.n	8002d08 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0f1      	b.n	8002eec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_I2C_Mem_Read+0x4e>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e0ea      	b.n	8002eec <HAL_I2C_Mem_Read+0x224>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d1e:	f7fe fcbb 	bl	8001698 <HAL_GetTick>
 8002d22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	2319      	movs	r3, #25
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f9bd 	bl	80030b0 <I2C_WaitOnFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0d5      	b.n	8002eec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2222      	movs	r2, #34	; 0x22
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2240      	movs	r2, #64	; 0x40
 8002d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a3a      	ldr	r2, [r7, #32]
 8002d5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d68:	88f8      	ldrh	r0, [r7, #6]
 8002d6a:	893a      	ldrh	r2, [r7, #8]
 8002d6c:	8979      	ldrh	r1, [r7, #10]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	4603      	mov	r3, r0
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f921 	bl	8002fc0 <I2C_RequestMemoryRead>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0ad      	b.n	8002eec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2bff      	cmp	r3, #255	; 0xff
 8002d98:	d90e      	bls.n	8002db8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	22ff      	movs	r2, #255	; 0xff
 8002d9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	8979      	ldrh	r1, [r7, #10]
 8002da8:	4b52      	ldr	r3, [pc, #328]	; (8002ef4 <HAL_I2C_Mem_Read+0x22c>)
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fa9f 	bl	80032f4 <I2C_TransferConfig>
 8002db6:	e00f      	b.n	8002dd8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	8979      	ldrh	r1, [r7, #10]
 8002dca:	4b4a      	ldr	r3, [pc, #296]	; (8002ef4 <HAL_I2C_Mem_Read+0x22c>)
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fa8e 	bl	80032f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dde:	2200      	movs	r2, #0
 8002de0:	2104      	movs	r1, #4
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f964 	bl	80030b0 <I2C_WaitOnFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e07c      	b.n	8002eec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d034      	beq.n	8002e98 <HAL_I2C_Mem_Read+0x1d0>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d130      	bne.n	8002e98 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2180      	movs	r1, #128	; 0x80
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f935 	bl	80030b0 <I2C_WaitOnFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e04d      	b.n	8002eec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2bff      	cmp	r3, #255	; 0xff
 8002e58:	d90e      	bls.n	8002e78 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	22ff      	movs	r2, #255	; 0xff
 8002e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	8979      	ldrh	r1, [r7, #10]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fa3f 	bl	80032f4 <I2C_TransferConfig>
 8002e76:	e00f      	b.n	8002e98 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	8979      	ldrh	r1, [r7, #10]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 fa2e 	bl	80032f4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d19a      	bne.n	8002dd8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f982 	bl	80031b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e01a      	b.n	8002eec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_I2C_Mem_Read+0x230>)
 8002eca:	400b      	ands	r3, r1
 8002ecc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e000      	b.n	8002eec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002eea:	2302      	movs	r3, #2
  }
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	80002400 	.word	0x80002400
 8002ef8:	fe00e800 	.word	0xfe00e800

08002efc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f0a:	b2db      	uxtb	r3, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	4608      	mov	r0, r1
 8002f22:	4611      	mov	r1, r2
 8002f24:	461a      	mov	r2, r3
 8002f26:	4603      	mov	r3, r0
 8002f28:	817b      	strh	r3, [r7, #10]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	813b      	strh	r3, [r7, #8]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	8979      	ldrh	r1, [r7, #10]
 8002f38:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <I2C_RequestMemoryWrite+0xa4>)
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f9d7 	bl	80032f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	69b9      	ldr	r1, [r7, #24]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f8f0 	bl	8003130 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e02c      	b.n	8002fb4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	893a      	ldrh	r2, [r7, #8]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28
 8002f6a:	e015      	b.n	8002f98 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	893a      	ldrh	r2, [r7, #8]
 8002f72:	0a12      	lsrs	r2, r2, #8
 8002f74:	b292      	uxth	r2, r2
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	69b9      	ldr	r1, [r7, #24]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f8d6 	bl	8003130 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e012      	b.n	8002fb4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	893a      	ldrh	r2, [r7, #8]
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2180      	movs	r1, #128	; 0x80
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f884 	bl	80030b0 <I2C_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	80002000 	.word	0x80002000

08002fc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	4608      	mov	r0, r1
 8002fca:	4611      	mov	r1, r2
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4603      	mov	r3, r0
 8002fd0:	817b      	strh	r3, [r7, #10]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	813b      	strh	r3, [r7, #8]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	8979      	ldrh	r1, [r7, #10]
 8002fe0:	4b20      	ldr	r3, [pc, #128]	; (8003064 <I2C_RequestMemoryRead+0xa4>)
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f984 	bl	80032f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	69b9      	ldr	r1, [r7, #24]
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f89d 	bl	8003130 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e02c      	b.n	800305a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d105      	bne.n	8003012 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	893a      	ldrh	r2, [r7, #8]
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	629a      	str	r2, [r3, #40]	; 0x28
 8003010:	e015      	b.n	800303e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	893a      	ldrh	r2, [r7, #8]
 8003018:	0a12      	lsrs	r2, r2, #8
 800301a:	b292      	uxth	r2, r2
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	69b9      	ldr	r1, [r7, #24]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f883 	bl	8003130 <I2C_WaitOnTXISFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e012      	b.n	800305a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	893a      	ldrh	r2, [r7, #8]
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	2200      	movs	r2, #0
 8003046:	2140      	movs	r1, #64	; 0x40
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f831 	bl	80030b0 <I2C_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	80002000 	.word	0x80002000

08003068 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b02      	cmp	r3, #2
 800307c:	d103      	bne.n	8003086 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2200      	movs	r2, #0
 8003084:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d007      	beq.n	80030a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	6992      	ldr	r2, [r2, #24]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	619a      	str	r2, [r3, #24]
  }
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030c0:	e022      	b.n	8003108 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c8:	d01e      	beq.n	8003108 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ca:	f7fe fae5 	bl	8001698 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	1ad2      	subs	r2, r2, r3
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d802      	bhi.n	80030e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d113      	bne.n	8003108 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e4:	f043 0220 	orr.w	r2, r3, #32
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e00f      	b.n	8003128 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	401a      	ands	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	429a      	cmp	r2, r3
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	429a      	cmp	r2, r3
 8003124:	d0cd      	beq.n	80030c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800313c:	e02c      	b.n	8003198 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f870 	bl	8003228 <I2C_IsAcknowledgeFailed>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e02a      	b.n	80031a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d01e      	beq.n	8003198 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315a:	f7fe fa9d 	bl	8001698 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	1ad2      	subs	r2, r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	429a      	cmp	r2, r3
 8003168:	d802      	bhi.n	8003170 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d113      	bne.n	8003198 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003174:	f043 0220 	orr.w	r2, r3, #32
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e007      	b.n	80031a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d1cb      	bne.n	800313e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031bc:	e028      	b.n	8003210 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f830 	bl	8003228 <I2C_IsAcknowledgeFailed>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e026      	b.n	8003220 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d2:	f7fe fa61 	bl	8001698 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	1ad2      	subs	r2, r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d802      	bhi.n	80031e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d113      	bne.n	8003210 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ec:	f043 0220 	orr.w	r2, r3, #32
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e007      	b.n	8003220 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b20      	cmp	r3, #32
 800321c:	d1cf      	bne.n	80031be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b10      	cmp	r3, #16
 8003240:	d151      	bne.n	80032e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003242:	e022      	b.n	800328a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324a:	d01e      	beq.n	800328a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324c:	f7fe fa24 	bl	8001698 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	1ad2      	subs	r2, r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	429a      	cmp	r2, r3
 800325a:	d802      	bhi.n	8003262 <I2C_IsAcknowledgeFailed+0x3a>
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d113      	bne.n	800328a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	f043 0220 	orr.w	r2, r3, #32
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e02e      	b.n	80032e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b20      	cmp	r3, #32
 8003296:	d1d5      	bne.n	8003244 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2210      	movs	r2, #16
 800329e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2220      	movs	r2, #32
 80032a6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f7ff fedd 	bl	8003068 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <I2C_IsAcknowledgeFailed+0xc8>)
 80032ba:	400b      	ands	r3, r1
 80032bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	f043 0204 	orr.w	r2, r3, #4
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	fe00e800 	.word	0xfe00e800

080032f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	607b      	str	r3, [r7, #4]
 80032fe:	460b      	mov	r3, r1
 8003300:	817b      	strh	r3, [r7, #10]
 8003302:	4613      	mov	r3, r2
 8003304:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	0d5b      	lsrs	r3, r3, #21
 8003314:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <I2C_TransferConfig+0x54>)
 800331a:	4303      	orrs	r3, r0
 800331c:	43db      	mvns	r3, r3
 800331e:	4019      	ands	r1, r3
 8003320:	897b      	ldrh	r3, [r7, #10]
 8003322:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8003326:	7a7b      	ldrb	r3, [r7, #9]
 8003328:	041b      	lsls	r3, r3, #16
 800332a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800332e:	4318      	orrs	r0, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4318      	orrs	r0, r3
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	4303      	orrs	r3, r0
 8003338:	430b      	orrs	r3, r1
 800333a:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	03ff63ff 	.word	0x03ff63ff

0800334c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <HAL_PWREx_GetVoltageRange+0x18>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003358:	4618      	mov	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40007000 	.word	0x40007000

08003368 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800336c:	4a05      	ldr	r2, [pc, #20]	; (8003384 <HAL_PWREx_EnableVddIO2+0x1c>)
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003376:	6053      	str	r3, [r2, #4]
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40007000 	.word	0x40007000

08003388 <HAL_PWREx_DisableVddIO2>:
/**
  * @brief Disable VDDIO2 supply.
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 800338c:	4a05      	ldr	r2, [pc, #20]	; (80033a4 <HAL_PWREx_DisableVddIO2+0x1c>)
 800338e:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <HAL_PWREx_DisableVddIO2+0x1c>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003396:	6053      	str	r3, [r2, #4]
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40007000 	.word	0x40007000

080033a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e353      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ba:	4ba3      	ldr	r3, [pc, #652]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033c4:	4ba0      	ldr	r3, [pc, #640]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 80df 	beq.w	800359a <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <HAL_RCC_OscConfig+0x4a>
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	2b0c      	cmp	r3, #12
 80033e6:	f040 8086 	bne.w	80034f6 <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	f040 8082 	bne.w	80034f6 <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033f2:	4b95      	ldr	r3, [pc, #596]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <HAL_RCC_OscConfig+0x62>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e32b      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1a      	ldr	r2, [r3, #32]
 800340e:	4b8e      	ldr	r3, [pc, #568]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d004      	beq.n	8003424 <HAL_RCC_OscConfig+0x7c>
 800341a:	4b8b      	ldr	r3, [pc, #556]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003422:	e005      	b.n	8003430 <HAL_RCC_OscConfig+0x88>
 8003424:	4b88      	ldr	r3, [pc, #544]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003430:	429a      	cmp	r2, r3
 8003432:	d923      	bls.n	800347c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fccb 	bl	8003dd4 <RCC_SetFlashLatencyFromMSIRange>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e30c      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003448:	4a7f      	ldr	r2, [pc, #508]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 800344a:	4b7f      	ldr	r3, [pc, #508]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f043 0308 	orr.w	r3, r3, #8
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	497c      	ldr	r1, [pc, #496]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003456:	4b7c      	ldr	r3, [pc, #496]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003466:	4978      	ldr	r1, [pc, #480]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003468:	4b77      	ldr	r3, [pc, #476]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
 800347a:	e022      	b.n	80034c2 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800347c:	4a72      	ldr	r2, [pc, #456]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 800347e:	4b72      	ldr	r3, [pc, #456]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f043 0308 	orr.w	r3, r3, #8
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	496f      	ldr	r1, [pc, #444]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 800348a:	4b6f      	ldr	r3, [pc, #444]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4313      	orrs	r3, r2
 8003498:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800349a:	496b      	ldr	r1, [pc, #428]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 800349c:	4b6a      	ldr	r3, [pc, #424]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	4313      	orrs	r3, r2
 80034ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fc8e 	bl	8003dd4 <RCC_SetFlashLatencyFromMSIRange>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e2cf      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034c2:	f000 fbb3 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 80034c6:	4601      	mov	r1, r0
 80034c8:	4b5f      	ldr	r3, [pc, #380]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	4a5e      	ldr	r2, [pc, #376]	; (800364c <HAL_RCC_OscConfig+0x2a4>)
 80034d4:	5cd3      	ldrb	r3, [r2, r3]
 80034d6:	f003 031f 	and.w	r3, r3, #31
 80034da:	fa21 f303 	lsr.w	r3, r1, r3
 80034de:	4a5c      	ldr	r2, [pc, #368]	; (8003650 <HAL_RCC_OscConfig+0x2a8>)
 80034e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80034e2:	200f      	movs	r0, #15
 80034e4:	f7fe f8a6 	bl	8001634 <HAL_InitTick>
 80034e8:	4603      	mov	r3, r0
 80034ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d052      	beq.n	8003598 <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	e2b5      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d032      	beq.n	8003564 <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034fe:	4a52      	ldr	r2, [pc, #328]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003500:	4b51      	ldr	r3, [pc, #324]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800350a:	f7fe f8c5 	bl	8001698 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003512:	f7fe f8c1 	bl	8001698 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e29e      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003524:	4b48      	ldr	r3, [pc, #288]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003530:	4a45      	ldr	r2, [pc, #276]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003532:	4b45      	ldr	r3, [pc, #276]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f043 0308 	orr.w	r3, r3, #8
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	4942      	ldr	r1, [pc, #264]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 800353e:	4b42      	ldr	r3, [pc, #264]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	4313      	orrs	r3, r2
 800354c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800354e:	493e      	ldr	r1, [pc, #248]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003550:	4b3d      	ldr	r3, [pc, #244]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	4313      	orrs	r3, r2
 8003560:	604b      	str	r3, [r1, #4]
 8003562:	e01a      	b.n	800359a <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003564:	4a38      	ldr	r2, [pc, #224]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003566:	4b38      	ldr	r3, [pc, #224]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003570:	f7fe f892 	bl	8001698 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003578:	f7fe f88e 	bl	8001698 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e26b      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800358a:	4b2f      	ldr	r3, [pc, #188]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x1d0>
 8003596:	e000      	b.n	800359a <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003598:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d072      	beq.n	800368c <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_OscConfig+0x210>
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	2b0c      	cmp	r3, #12
 80035b0:	d10e      	bne.n	80035d0 <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d10b      	bne.n	80035d0 <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b8:	4b23      	ldr	r3, [pc, #140]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d062      	beq.n	800368a <HAL_RCC_OscConfig+0x2e2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d15e      	bne.n	800368a <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e248      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d8:	d106      	bne.n	80035e8 <HAL_RCC_OscConfig+0x240>
 80035da:	4a1b      	ldr	r2, [pc, #108]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 80035dc:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	e01d      	b.n	8003624 <HAL_RCC_OscConfig+0x27c>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f0:	d10c      	bne.n	800360c <HAL_RCC_OscConfig+0x264>
 80035f2:	4a15      	ldr	r2, [pc, #84]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 80035f4:	4b14      	ldr	r3, [pc, #80]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	4a12      	ldr	r2, [pc, #72]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003600:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	e00b      	b.n	8003624 <HAL_RCC_OscConfig+0x27c>
 800360c:	4a0e      	ldr	r2, [pc, #56]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 800360e:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	4a0b      	ldr	r2, [pc, #44]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 800361a:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCC_OscConfig+0x2a0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01a      	beq.n	8003662 <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fe f834 	bl	8001698 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003632:	e00f      	b.n	8003654 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003634:	f7fe f830 	bl	8001698 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	; 0x64
 8003640:	d908      	bls.n	8003654 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e20d      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000
 800364c:	08006f3c 	.word	0x08006f3c
 8003650:	20000044 	.word	0x20000044
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003654:	4bae      	ldr	r3, [pc, #696]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0e9      	beq.n	8003634 <HAL_RCC_OscConfig+0x28c>
 8003660:	e014      	b.n	800368c <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003662:	f7fe f819 	bl	8001698 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800366a:	f7fe f815 	bl	8001698 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b64      	cmp	r3, #100	; 0x64
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e1f2      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800367c:	4ba4      	ldr	r3, [pc, #656]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f0      	bne.n	800366a <HAL_RCC_OscConfig+0x2c2>
 8003688:	e000      	b.n	800368c <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d060      	beq.n	800375a <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b04      	cmp	r3, #4
 800369c:	d005      	beq.n	80036aa <HAL_RCC_OscConfig+0x302>
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2b0c      	cmp	r3, #12
 80036a2:	d119      	bne.n	80036d8 <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d116      	bne.n	80036d8 <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036aa:	4b99      	ldr	r3, [pc, #612]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_RCC_OscConfig+0x31a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e1cf      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c2:	4993      	ldr	r1, [pc, #588]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 80036c4:	4b92      	ldr	r3, [pc, #584]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	061b      	lsls	r3, r3, #24
 80036d2:	4313      	orrs	r3, r2
 80036d4:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036d6:	e040      	b.n	800375a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d023      	beq.n	8003728 <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e0:	4a8b      	ldr	r2, [pc, #556]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 80036e2:	4b8b      	ldr	r3, [pc, #556]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fd ffd4 	bl	8001698 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f4:	f7fd ffd0 	bl	8001698 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e1ad      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003706:	4b82      	ldr	r3, [pc, #520]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003712:	497f      	ldr	r1, [pc, #508]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 8003714:	4b7e      	ldr	r3, [pc, #504]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	061b      	lsls	r3, r3, #24
 8003722:	4313      	orrs	r3, r2
 8003724:	604b      	str	r3, [r1, #4]
 8003726:	e018      	b.n	800375a <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003728:	4a79      	ldr	r2, [pc, #484]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 800372a:	4b79      	ldr	r3, [pc, #484]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fd ffb0 	bl	8001698 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800373c:	f7fd ffac 	bl	8001698 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e189      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800374e:	4b70      	ldr	r3, [pc, #448]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d03c      	beq.n	80037e0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d01c      	beq.n	80037a8 <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800376e:	4a68      	ldr	r2, [pc, #416]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 8003770:	4b67      	ldr	r3, [pc, #412]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 8003772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377e:	f7fd ff8b 	bl	8001698 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003786:	f7fd ff87 	bl	8001698 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e164      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003798:	4b5d      	ldr	r3, [pc, #372]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 800379a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0ef      	beq.n	8003786 <HAL_RCC_OscConfig+0x3de>
 80037a6:	e01b      	b.n	80037e0 <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a8:	4a59      	ldr	r2, [pc, #356]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 80037aa:	4b59      	ldr	r3, [pc, #356]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 80037ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b8:	f7fd ff6e 	bl	8001698 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c0:	f7fd ff6a 	bl	8001698 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e147      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037d2:	4b4f      	ldr	r3, [pc, #316]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 80037d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1ef      	bne.n	80037c0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80a5 	beq.w	8003938 <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ee:	2300      	movs	r3, #0
 80037f0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037f2:	4b47      	ldr	r3, [pc, #284]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 80037f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10d      	bne.n	800381a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fe:	4a44      	ldr	r2, [pc, #272]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 8003800:	4b43      	ldr	r3, [pc, #268]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003808:	6593      	str	r3, [r2, #88]	; 0x58
 800380a:	4b41      	ldr	r3, [pc, #260]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003816:	2301      	movs	r3, #1
 8003818:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800381a:	4b3e      	ldr	r3, [pc, #248]	; (8003914 <HAL_RCC_OscConfig+0x56c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003822:	2b00      	cmp	r3, #0
 8003824:	d118      	bne.n	8003858 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003826:	4a3b      	ldr	r2, [pc, #236]	; (8003914 <HAL_RCC_OscConfig+0x56c>)
 8003828:	4b3a      	ldr	r3, [pc, #232]	; (8003914 <HAL_RCC_OscConfig+0x56c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003832:	f7fd ff31 	bl	8001698 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383a:	f7fd ff2d 	bl	8001698 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e10a      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800384c:	4b31      	ldr	r3, [pc, #196]	; (8003914 <HAL_RCC_OscConfig+0x56c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d108      	bne.n	8003872 <HAL_RCC_OscConfig+0x4ca>
 8003860:	4a2b      	ldr	r2, [pc, #172]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 8003862:	4b2b      	ldr	r3, [pc, #172]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003870:	e024      	b.n	80038bc <HAL_RCC_OscConfig+0x514>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b05      	cmp	r3, #5
 8003878:	d110      	bne.n	800389c <HAL_RCC_OscConfig+0x4f4>
 800387a:	4a25      	ldr	r2, [pc, #148]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 800387c:	4b24      	ldr	r3, [pc, #144]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003882:	f043 0304 	orr.w	r3, r3, #4
 8003886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800388a:	4a21      	ldr	r2, [pc, #132]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 800388c:	4b20      	ldr	r3, [pc, #128]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800389a:	e00f      	b.n	80038bc <HAL_RCC_OscConfig+0x514>
 800389c:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 800389e:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 80038a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038ac:	4a18      	ldr	r2, [pc, #96]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 80038ae:	4b18      	ldr	r3, [pc, #96]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 80038b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b4:	f023 0304 	bic.w	r3, r3, #4
 80038b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d016      	beq.n	80038f2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fd fee8 	bl	8001698 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038cc:	f7fd fee4 	bl	8001698 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e0bf      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_RCC_OscConfig+0x568>)
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0ed      	beq.n	80038cc <HAL_RCC_OscConfig+0x524>
 80038f0:	e019      	b.n	8003926 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f2:	f7fd fed1 	bl	8001698 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038f8:	e00e      	b.n	8003918 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fa:	f7fd fecd 	bl	8001698 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f241 3288 	movw	r2, #5000	; 0x1388
 8003908:	4293      	cmp	r3, r2
 800390a:	d905      	bls.n	8003918 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e0a8      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
 8003910:	40021000 	.word	0x40021000
 8003914:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003918:	4b54      	ldr	r3, [pc, #336]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e9      	bne.n	80038fa <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003926:	7ffb      	ldrb	r3, [r7, #31]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d105      	bne.n	8003938 <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800392c:	4a4f      	ldr	r2, [pc, #316]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 800392e:	4b4f      	ldr	r3, [pc, #316]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003936:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 808f 	beq.w	8003a60 <HAL_RCC_OscConfig+0x6b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b0c      	cmp	r3, #12
 8003946:	f000 8089 	beq.w	8003a5c <HAL_RCC_OscConfig+0x6b4>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	2b02      	cmp	r3, #2
 8003950:	d156      	bne.n	8003a00 <HAL_RCC_OscConfig+0x658>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003952:	4a46      	ldr	r2, [pc, #280]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 8003954:	4b45      	ldr	r3, [pc, #276]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800395c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395e:	f7fd fe9b 	bl	8001698 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003966:	f7fd fe97 	bl	8001698 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e074      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003978:	4b3c      	ldr	r3, [pc, #240]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f0      	bne.n	8003966 <HAL_RCC_OscConfig+0x5be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003984:	4939      	ldr	r1, [pc, #228]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	3b01      	subs	r3, #1
 800398c:	011a      	lsls	r2, r3, #4
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	091b      	lsrs	r3, r3, #4
 800399c:	045b      	lsls	r3, r3, #17
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	085b      	lsrs	r3, r3, #1
 80039ac:	3b01      	subs	r3, #1
 80039ae:	055b      	lsls	r3, r3, #21
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	3b01      	subs	r3, #1
 80039ba:	065b      	lsls	r3, r3, #25
 80039bc:	4313      	orrs	r3, r2
 80039be:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039c0:	4a2a      	ldr	r2, [pc, #168]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 80039c2:	4b2a      	ldr	r3, [pc, #168]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039cc:	4a27      	ldr	r2, [pc, #156]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 80039ce:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fd fe5e 	bl	8001698 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x64a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e0:	f7fd fe5a 	bl	8001698 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x64a>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e037      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f2:	4b1e      	ldr	r3, [pc, #120]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x638>
 80039fe:	e02f      	b.n	8003a60 <HAL_RCC_OscConfig+0x6b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a00:	4a1a      	ldr	r2, [pc, #104]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 8003a02:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a0a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003a0c:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d105      	bne.n	8003a24 <HAL_RCC_OscConfig+0x67c>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a18:	4a14      	ldr	r2, [pc, #80]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 8003a1a:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f023 0303 	bic.w	r3, r3, #3
 8003a22:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a24:	4a11      	ldr	r2, [pc, #68]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 8003a26:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a32:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fd fe30 	bl	8001698 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x6a6>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fd fe2c 	bl	8001698 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e009      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a4e:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <HAL_RCC_OscConfig+0x6c4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x694>
 8003a5a:	e001      	b.n	8003a60 <HAL_RCC_OscConfig+0x6b8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <HAL_RCC_OscConfig+0x6ba>
    }
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40021000 	.word	0x40021000

08003a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0c6      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a84:	4b65      	ldr	r3, [pc, #404]	; (8003c1c <HAL_RCC_ClockConfig+0x1ac>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0207 	and.w	r2, r3, #7
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d210      	bcs.n	8003ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4962      	ldr	r1, [pc, #392]	; (8003c1c <HAL_RCC_ClockConfig+0x1ac>)
 8003a94:	4b61      	ldr	r3, [pc, #388]	; (8003c1c <HAL_RCC_ClockConfig+0x1ac>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f023 0207 	bic.w	r2, r3, #7
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa2:	4b5e      	ldr	r3, [pc, #376]	; (8003c1c <HAL_RCC_ClockConfig+0x1ac>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0207 	and.w	r2, r3, #7
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0ae      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d04c      	beq.n	8003b5a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d107      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac8:	4b55      	ldr	r3, [pc, #340]	; (8003c20 <HAL_RCC_ClockConfig+0x1b0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d121      	bne.n	8003b18 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e09c      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d107      	bne.n	8003af0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ae0:	4b4f      	ldr	r3, [pc, #316]	; (8003c20 <HAL_RCC_ClockConfig+0x1b0>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d115      	bne.n	8003b18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e090      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d107      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003af8:	4b49      	ldr	r3, [pc, #292]	; (8003c20 <HAL_RCC_ClockConfig+0x1b0>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d109      	bne.n	8003b18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e084      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b08:	4b45      	ldr	r3, [pc, #276]	; (8003c20 <HAL_RCC_ClockConfig+0x1b0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e07c      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b18:	4941      	ldr	r1, [pc, #260]	; (8003c20 <HAL_RCC_ClockConfig+0x1b0>)
 8003b1a:	4b41      	ldr	r3, [pc, #260]	; (8003c20 <HAL_RCC_ClockConfig+0x1b0>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f023 0203 	bic.w	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b2a:	f7fd fdb5 	bl	8001698 <HAL_GetTick>
 8003b2e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b30:	e00a      	b.n	8003b48 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b32:	f7fd fdb1 	bl	8001698 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e064      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b48:	4b35      	ldr	r3, [pc, #212]	; (8003c20 <HAL_RCC_ClockConfig+0x1b0>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 020c 	and.w	r2, r3, #12
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d1eb      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b66:	492e      	ldr	r1, [pc, #184]	; (8003c20 <HAL_RCC_ClockConfig+0x1b0>)
 8003b68:	4b2d      	ldr	r3, [pc, #180]	; (8003c20 <HAL_RCC_ClockConfig+0x1b0>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b78:	4b28      	ldr	r3, [pc, #160]	; (8003c1c <HAL_RCC_ClockConfig+0x1ac>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0207 	and.w	r2, r3, #7
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d910      	bls.n	8003ba8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b86:	4925      	ldr	r1, [pc, #148]	; (8003c1c <HAL_RCC_ClockConfig+0x1ac>)
 8003b88:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <HAL_RCC_ClockConfig+0x1ac>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 0207 	bic.w	r2, r3, #7
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <HAL_RCC_ClockConfig+0x1ac>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0207 	and.w	r2, r3, #7
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e034      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb4:	491a      	ldr	r1, [pc, #104]	; (8003c20 <HAL_RCC_ClockConfig+0x1b0>)
 8003bb6:	4b1a      	ldr	r3, [pc, #104]	; (8003c20 <HAL_RCC_ClockConfig+0x1b0>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bd2:	4913      	ldr	r1, [pc, #76]	; (8003c20 <HAL_RCC_ClockConfig+0x1b0>)
 8003bd4:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <HAL_RCC_ClockConfig+0x1b0>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003be6:	f000 f821 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8003bea:	4601      	mov	r1, r0
 8003bec:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <HAL_RCC_ClockConfig+0x1b0>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	091b      	lsrs	r3, r3, #4
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	4a0b      	ldr	r2, [pc, #44]	; (8003c24 <HAL_RCC_ClockConfig+0x1b4>)
 8003bf8:	5cd3      	ldrb	r3, [r2, r3]
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	fa21 f303 	lsr.w	r3, r1, r3
 8003c02:	4a09      	ldr	r2, [pc, #36]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8003c06:	200f      	movs	r0, #15
 8003c08:	f7fd fd14 	bl	8001634 <HAL_InitTick>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c10:	7afb      	ldrb	r3, [r7, #11]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40022000 	.word	0x40022000
 8003c20:	40021000 	.word	0x40021000
 8003c24:	08006f3c 	.word	0x08006f3c
 8003c28:	20000044 	.word	0x20000044

08003c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b089      	sub	sp, #36	; 0x24
 8003c30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c3a:	4b46      	ldr	r3, [pc, #280]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x128>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c44:	4b43      	ldr	r3, [pc, #268]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x128>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <HAL_RCC_GetSysClockFreq+0x34>
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b0c      	cmp	r3, #12
 8003c58:	d121      	bne.n	8003c9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d11e      	bne.n	8003c9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c60:	4b3c      	ldr	r3, [pc, #240]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x128>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d107      	bne.n	8003c7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c6c:	4b39      	ldr	r3, [pc, #228]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x128>)
 8003c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	e005      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c7c:	4b35      	ldr	r3, [pc, #212]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x128>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c88:	4a33      	ldr	r2, [pc, #204]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10d      	bne.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c9c:	e00a      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d102      	bne.n	8003caa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ca4:	4b2d      	ldr	r3, [pc, #180]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x130>)
 8003ca6:	61bb      	str	r3, [r7, #24]
 8003ca8:	e004      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cb0:	4b2b      	ldr	r3, [pc, #172]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x134>)
 8003cb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b0c      	cmp	r3, #12
 8003cb8:	d145      	bne.n	8003d46 <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cba:	4b26      	ldr	r3, [pc, #152]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x128>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cc4:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x128>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	3301      	adds	r3, #1
 8003cd0:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d002      	beq.n	8003cde <HAL_RCC_GetSysClockFreq+0xb2>
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d00d      	beq.n	8003cf8 <HAL_RCC_GetSysClockFreq+0xcc>
 8003cdc:	e019      	b.n	8003d12 <HAL_RCC_GetSysClockFreq+0xe6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cde:	4a1f      	ldr	r2, [pc, #124]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x130>)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce6:	4a1b      	ldr	r2, [pc, #108]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x128>)
 8003ce8:	68d2      	ldr	r2, [r2, #12]
 8003cea:	0a12      	lsrs	r2, r2, #8
 8003cec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cf0:	fb02 f303 	mul.w	r3, r2, r3
 8003cf4:	617b      	str	r3, [r7, #20]
      break;
 8003cf6:	e019      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cf8:	4a19      	ldr	r2, [pc, #100]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x134>)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	4a14      	ldr	r2, [pc, #80]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x128>)
 8003d02:	68d2      	ldr	r2, [r2, #12]
 8003d04:	0a12      	lsrs	r2, r2, #8
 8003d06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d0a:	fb02 f303 	mul.w	r3, r2, r3
 8003d0e:	617b      	str	r3, [r7, #20]
      break;
 8003d10:	e00c      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1a:	4a0e      	ldr	r2, [pc, #56]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x128>)
 8003d1c:	68d2      	ldr	r2, [r2, #12]
 8003d1e:	0a12      	lsrs	r2, r2, #8
 8003d20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d24:	fb02 f303 	mul.w	r3, r2, r3
 8003d28:	617b      	str	r3, [r7, #20]
      break;
 8003d2a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d2c:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x128>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	0e5b      	lsrs	r3, r3, #25
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	3301      	adds	r3, #1
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d44:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d46:	69bb      	ldr	r3, [r7, #24]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3724      	adds	r7, #36	; 0x24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40021000 	.word	0x40021000
 8003d58:	08006f54 	.word	0x08006f54
 8003d5c:	00f42400 	.word	0x00f42400
 8003d60:	007a1200 	.word	0x007a1200

08003d64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000044 	.word	0x20000044

08003d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d80:	f7ff fff0 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003d84:	4601      	mov	r1, r0
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0a1b      	lsrs	r3, r3, #8
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d92:	5cd3      	ldrb	r3, [r2, r3]
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40021000 	.word	0x40021000
 8003da4:	08006f4c 	.word	0x08006f4c

08003da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003dac:	f7ff ffda 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003db0:	4601      	mov	r1, r0
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	0adb      	lsrs	r3, r3, #11
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dbe:	5cd3      	ldrb	r3, [r2, r3]
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	08006f4c 	.word	0x08006f4c

08003dd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003de0:	4b2a      	ldr	r3, [pc, #168]	; (8003e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003dec:	f7ff faae 	bl	800334c <HAL_PWREx_GetVoltageRange>
 8003df0:	6178      	str	r0, [r7, #20]
 8003df2:	e014      	b.n	8003e1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003df4:	4a25      	ldr	r2, [pc, #148]	; (8003e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003df6:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8003e00:	4b22      	ldr	r3, [pc, #136]	; (8003e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e0c:	f7ff fa9e 	bl	800334c <HAL_PWREx_GetVoltageRange>
 8003e10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e12:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e14:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e24:	d10b      	bne.n	8003e3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b80      	cmp	r3, #128	; 0x80
 8003e2a:	d919      	bls.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2ba0      	cmp	r3, #160	; 0xa0
 8003e30:	d902      	bls.n	8003e38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e32:	2302      	movs	r3, #2
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	e013      	b.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e38:	2301      	movs	r3, #1
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	e010      	b.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	d902      	bls.n	8003e4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e44:	2303      	movs	r3, #3
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	e00a      	b.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b80      	cmp	r3, #128	; 0x80
 8003e4e:	d102      	bne.n	8003e56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e50:	2302      	movs	r3, #2
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	e004      	b.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b70      	cmp	r3, #112	; 0x70
 8003e5a:	d101      	bne.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e60:	490b      	ldr	r1, [pc, #44]	; (8003e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e62:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f023 0207 	bic.w	r2, r3, #7
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e70:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0207 	and.w	r2, r3, #7
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d001      	beq.n	8003e82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40022000 	.word	0x40022000

08003e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d03f      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eb8:	d01c      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ebe:	d802      	bhi.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00e      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003ec4:	e01f      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003ec6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003eca:	d003      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003ecc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ed0:	d01c      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003ed2:	e018      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ed4:	4a85      	ldr	r2, [pc, #532]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ed6:	4b85      	ldr	r3, [pc, #532]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ede:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ee0:	e015      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 ff31 	bl	8004d50 <RCCEx_PLLSAI1_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ef2:	e00c      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3320      	adds	r3, #32
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f001 f818 	bl	8004f30 <RCCEx_PLLSAI2_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f04:	e003      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	74fb      	strb	r3, [r7, #19]
      break;
 8003f0a:	e000      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f0e:	7cfb      	ldrb	r3, [r7, #19]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10b      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f14:	4975      	ldr	r1, [pc, #468]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f16:	4b75      	ldr	r3, [pc, #468]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f2a:	e001      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	7cfb      	ldrb	r3, [r7, #19]
 8003f2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d03f      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f44:	d01c      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003f46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f4a:	d802      	bhi.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00e      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003f50:	e01f      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f56:	d003      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003f58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f5c:	d01c      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003f5e:	e018      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f60:	4a62      	ldr	r2, [pc, #392]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f62:	4b62      	ldr	r3, [pc, #392]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f6c:	e015      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3304      	adds	r3, #4
 8003f72:	2100      	movs	r1, #0
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 feeb 	bl	8004d50 <RCCEx_PLLSAI1_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f7e:	e00c      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3320      	adds	r3, #32
 8003f84:	2100      	movs	r1, #0
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 ffd2 	bl	8004f30 <RCCEx_PLLSAI2_Config>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f90:	e003      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	74fb      	strb	r3, [r7, #19]
      break;
 8003f96:	e000      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f9a:	7cfb      	ldrb	r3, [r7, #19]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10b      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fa0:	4952      	ldr	r1, [pc, #328]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fa2:	4b52      	ldr	r3, [pc, #328]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fb6:	e001      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb8:	7cfb      	ldrb	r3, [r7, #19]
 8003fba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80a0 	beq.w	800410a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fce:	4b47      	ldr	r3, [pc, #284]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00d      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe4:	4a41      	ldr	r2, [pc, #260]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fe6:	4b41      	ldr	r3, [pc, #260]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fee:	6593      	str	r3, [r2, #88]	; 0x58
 8003ff0:	4b3e      	ldr	r3, [pc, #248]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004000:	4a3b      	ldr	r2, [pc, #236]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004002:	4b3b      	ldr	r3, [pc, #236]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800400c:	f7fd fb44 	bl	8001698 <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004012:	e009      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004014:	f7fd fb40 	bl	8001698 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d902      	bls.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	74fb      	strb	r3, [r7, #19]
        break;
 8004026:	e005      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004028:	4b31      	ldr	r3, [pc, #196]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0ef      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004034:	7cfb      	ldrb	r3, [r7, #19]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d15c      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800403a:	4b2c      	ldr	r3, [pc, #176]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800403c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004044:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01f      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	429a      	cmp	r2, r3
 8004056:	d019      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004058:	4b24      	ldr	r3, [pc, #144]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004062:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004064:	4a21      	ldr	r2, [pc, #132]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004066:	4b21      	ldr	r3, [pc, #132]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004074:	4a1d      	ldr	r2, [pc, #116]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004076:	4b1d      	ldr	r3, [pc, #116]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004084:	4a19      	ldr	r2, [pc, #100]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d016      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004096:	f7fd faff 	bl	8001698 <HAL_GetTick>
 800409a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800409c:	e00b      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409e:	f7fd fafb 	bl	8001698 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d902      	bls.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	74fb      	strb	r3, [r7, #19]
            break;
 80040b4:	e006      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b6:	4b0d      	ldr	r3, [pc, #52]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0ec      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80040c4:	7cfb      	ldrb	r3, [r7, #19]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040ca:	4908      	ldr	r1, [pc, #32]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040cc:	4b07      	ldr	r3, [pc, #28]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040e2:	e009      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040e4:	7cfb      	ldrb	r3, [r7, #19]
 80040e6:	74bb      	strb	r3, [r7, #18]
 80040e8:	e006      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80040ea:	bf00      	nop
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f4:	7cfb      	ldrb	r3, [r7, #19]
 80040f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040f8:	7c7b      	ldrb	r3, [r7, #17]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d105      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040fe:	4a9e      	ldr	r2, [pc, #632]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004100:	4b9d      	ldr	r3, [pc, #628]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004108:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004116:	4998      	ldr	r1, [pc, #608]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004118:	4b97      	ldr	r3, [pc, #604]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	f023 0203 	bic.w	r2, r3, #3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004138:	498f      	ldr	r1, [pc, #572]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800413a:	4b8f      	ldr	r3, [pc, #572]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	f023 020c 	bic.w	r2, r3, #12
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800415a:	4987      	ldr	r1, [pc, #540]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800415c:	4b86      	ldr	r3, [pc, #536]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004162:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800417c:	497e      	ldr	r1, [pc, #504]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800417e:	4b7e      	ldr	r3, [pc, #504]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004184:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800419e:	4976      	ldr	r1, [pc, #472]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041a0:	4b75      	ldr	r3, [pc, #468]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041c0:	496d      	ldr	r1, [pc, #436]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041c2:	4b6d      	ldr	r3, [pc, #436]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041e2:	4965      	ldr	r1, [pc, #404]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041e4:	4b64      	ldr	r3, [pc, #400]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004204:	495c      	ldr	r1, [pc, #368]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004206:	4b5c      	ldr	r3, [pc, #368]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004226:	4954      	ldr	r1, [pc, #336]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004228:	4b53      	ldr	r3, [pc, #332]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004248:	494b      	ldr	r1, [pc, #300]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800424a:	4b4b      	ldr	r3, [pc, #300]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004250:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800426a:	4943      	ldr	r1, [pc, #268]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800426c:	4b42      	ldr	r3, [pc, #264]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004272:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d028      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800428c:	493a      	ldr	r1, [pc, #232]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800428e:	4b3a      	ldr	r3, [pc, #232]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004294:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042aa:	d106      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ac:	4a32      	ldr	r2, [pc, #200]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042ae:	4b32      	ldr	r3, [pc, #200]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042b6:	60d3      	str	r3, [r2, #12]
 80042b8:	e011      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042c2:	d10c      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3304      	adds	r3, #4
 80042c8:	2101      	movs	r1, #1
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fd40 	bl	8004d50 <RCCEx_PLLSAI1_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042d4:	7cfb      	ldrb	r3, [r7, #19]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80042da:	7cfb      	ldrb	r3, [r7, #19]
 80042dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d028      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042ea:	4923      	ldr	r1, [pc, #140]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042ec:	4b22      	ldr	r3, [pc, #136]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004304:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004308:	d106      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800430a:	4a1b      	ldr	r2, [pc, #108]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800430c:	4b1a      	ldr	r3, [pc, #104]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004314:	60d3      	str	r3, [r2, #12]
 8004316:	e011      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004320:	d10c      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3304      	adds	r3, #4
 8004326:	2101      	movs	r1, #1
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fd11 	bl	8004d50 <RCCEx_PLLSAI1_Config>
 800432e:	4603      	mov	r3, r0
 8004330:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004332:	7cfb      	ldrb	r3, [r7, #19]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004338:	7cfb      	ldrb	r3, [r7, #19]
 800433a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d02b      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004348:	490b      	ldr	r1, [pc, #44]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004350:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004366:	d109      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004368:	4a03      	ldr	r2, [pc, #12]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800436a:	4b03      	ldr	r3, [pc, #12]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004372:	60d3      	str	r3, [r2, #12]
 8004374:	e014      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004380:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004384:	d10c      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3304      	adds	r3, #4
 800438a:	2101      	movs	r1, #1
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fcdf 	bl	8004d50 <RCCEx_PLLSAI1_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004396:	7cfb      	ldrb	r3, [r7, #19]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800439c:	7cfb      	ldrb	r3, [r7, #19]
 800439e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d02f      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043ac:	492b      	ldr	r1, [pc, #172]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043ae:	4b2b      	ldr	r3, [pc, #172]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043ca:	d10d      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
 80043d0:	2102      	movs	r1, #2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fcbc 	bl	8004d50 <RCCEx_PLLSAI1_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043dc:	7cfb      	ldrb	r3, [r7, #19]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d014      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80043e2:	7cfb      	ldrb	r3, [r7, #19]
 80043e4:	74bb      	strb	r3, [r7, #18]
 80043e6:	e011      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f0:	d10c      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3320      	adds	r3, #32
 80043f6:	2102      	movs	r1, #2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fd99 	bl	8004f30 <RCCEx_PLLSAI2_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004402:	7cfb      	ldrb	r3, [r7, #19]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004418:	4910      	ldr	r1, [pc, #64]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800441a:	4b10      	ldr	r3, [pc, #64]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800441c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004420:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00b      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800443a:	4908      	ldr	r1, [pc, #32]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800443c:	4b07      	ldr	r3, [pc, #28]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004442:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004452:	7cbb      	ldrb	r3, [r7, #18]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40021000 	.word	0x40021000

08004460 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004472:	d137      	bne.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004474:	4bb8      	ldr	r3, [pc, #736]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447e:	617b      	str	r3, [r7, #20]

    switch(srcclk)
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004486:	d014      	beq.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8004488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800448c:	d01e      	beq.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 800448e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004492:	d001      	beq.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004494:	f000 bc53 	b.w	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004498:	4baf      	ldr	r3, [pc, #700]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	f040 8446 	bne.w	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 80044a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ac:	61fb      	str	r3, [r7, #28]
      break;
 80044ae:	f000 bc41 	b.w	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80044b2:	4ba9      	ldr	r3, [pc, #676]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b02      	cmp	r3, #2
 80044be:	f040 843b 	bne.w	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
        frequency = LSI_VALUE;
 80044c2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80044c6:	61fb      	str	r3, [r7, #28]
      break;
 80044c8:	f000 bc36 	b.w	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80044cc:	4ba2      	ldr	r3, [pc, #648]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044d8:	f040 8430 	bne.w	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 80044dc:	4b9f      	ldr	r3, [pc, #636]	; (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80044de:	61fb      	str	r3, [r7, #28]
      break;
 80044e0:	f000 bc2c 	b.w	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044e4:	4b9c      	ldr	r3, [pc, #624]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d023      	beq.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d02e      	beq.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d139      	bne.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80044fc:	4b96      	ldr	r3, [pc, #600]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b02      	cmp	r3, #2
 8004506:	d116      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004508:	4b93      	ldr	r3, [pc, #588]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8004514:	4b90      	ldr	r3, [pc, #576]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	091b      	lsrs	r3, r3, #4
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	e005      	b.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8004520:	4b8d      	ldr	r3, [pc, #564]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004526:	0a1b      	lsrs	r3, r3, #8
 8004528:	f003 030f 	and.w	r3, r3, #15
 800452c:	4a8c      	ldr	r2, [pc, #560]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800452e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004532:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004534:	e01f      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	61bb      	str	r3, [r7, #24]
      break;
 800453a:	e01c      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800453c:	4b86      	ldr	r3, [pc, #536]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004548:	d102      	bne.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 800454a:	4b86      	ldr	r3, [pc, #536]	; (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800454c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800454e:	e012      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	61bb      	str	r3, [r7, #24]
      break;
 8004554:	e00f      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004556:	4b80      	ldr	r3, [pc, #512]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004562:	d102      	bne.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8004564:	4b80      	ldr	r3, [pc, #512]	; (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8004566:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004568:	e005      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	61bb      	str	r3, [r7, #24]
      break;
 800456e:	e002      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	61bb      	str	r3, [r7, #24]
      break;
 8004574:	bf00      	nop
    }

    switch(PeriphClk)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800457c:	f000 8337 	beq.w	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8004580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004584:	d825      	bhi.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8004586:	2b10      	cmp	r3, #16
 8004588:	f000 81df 	beq.w	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800458c:	2b10      	cmp	r3, #16
 800458e:	d80f      	bhi.n	80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004590:	2b02      	cmp	r3, #2
 8004592:	f000 8128 	beq.w	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8004596:	2b02      	cmp	r3, #2
 8004598:	d803      	bhi.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 800459a:	2b01      	cmp	r3, #1
 800459c:	f000 80ec 	beq.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80045a0:	e3cd      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	f000 8169 	beq.w	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	f000 819a 	beq.w	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 80045ae:	e3c6      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80045b0:	2b40      	cmp	r3, #64	; 0x40
 80045b2:	f000 82b3 	beq.w	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 80045b6:	2b40      	cmp	r3, #64	; 0x40
 80045b8:	d803      	bhi.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	f000 81fd 	beq.w	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 80045c0:	e3bd      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80045c2:	2b80      	cmp	r3, #128	; 0x80
 80045c4:	f000 82cd 	beq.w	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80045c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045cc:	f000 82ec 	beq.w	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 80045d0:	e3b5      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80045d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045d6:	f000 822d 	beq.w	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80045da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045de:	d811      	bhi.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80045e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045e4:	d021      	beq.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 80045e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ea:	d804      	bhi.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80045ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045f0:	f000 833e 	beq.w	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 80045f4:	e3a3      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80045f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045fa:	d01d      	beq.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80045fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004600:	d021      	beq.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8004602:	e39c      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8004604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004608:	f000 8277 	beq.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 800460c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004610:	d804      	bhi.n	800461c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004616:	f000 8371 	beq.w	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 800461a:	e390      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 800461c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004620:	d011      	beq.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004622:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004626:	d00e      	beq.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8004628:	e389      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800462a:	69b9      	ldr	r1, [r7, #24]
 800462c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004630:	f000 fd58 	bl	80050e4 <RCCEx_GetSAIxPeriphCLKFreq>
 8004634:	61f8      	str	r0, [r7, #28]
      break;
 8004636:	e382      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004638:	69b9      	ldr	r1, [r7, #24]
 800463a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800463e:	f000 fd51 	bl	80050e4 <RCCEx_GetSAIxPeriphCLKFreq>
 8004642:	61f8      	str	r0, [r7, #28]
      break;
 8004644:	e37b      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004646:	4b44      	ldr	r3, [pc, #272]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004650:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004658:	d023      	beq.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 800465a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800465e:	d003      	beq.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004664:	d04a      	beq.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8004666:	e086      	b.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004668:	4b3b      	ldr	r3, [pc, #236]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b02      	cmp	r3, #2
 8004672:	d17b      	bne.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004674:	4b38      	ldr	r3, [pc, #224]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8004680:	4b35      	ldr	r3, [pc, #212]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	091b      	lsrs	r3, r3, #4
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	e005      	b.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 800468c:	4b32      	ldr	r3, [pc, #200]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800468e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004692:	0a1b      	lsrs	r3, r3, #8
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	4a31      	ldr	r2, [pc, #196]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800469a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800469e:	61fb      	str	r3, [r7, #28]
          break;
 80046a0:	e064      	b.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80046a2:	4b2d      	ldr	r3, [pc, #180]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046ae:	d15f      	bne.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80046b0:	4b29      	ldr	r3, [pc, #164]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046bc:	d158      	bne.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80046be:	4b26      	ldr	r3, [pc, #152]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	091b      	lsrs	r3, r3, #4
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	3301      	adds	r3, #1
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80046d2:	4b21      	ldr	r3, [pc, #132]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	0a1b      	lsrs	r3, r3, #8
 80046d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046dc:	60fb      	str	r3, [r7, #12]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	fb02 f203 	mul.w	r2, r2, r3
 80046e6:	4b1c      	ldr	r3, [pc, #112]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	0d5b      	lsrs	r3, r3, #21
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	3301      	adds	r3, #1
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	61fb      	str	r3, [r7, #28]
          break;
 80046fa:	e039      	b.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80046fc:	4b16      	ldr	r3, [pc, #88]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004704:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004708:	d134      	bne.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800470a:	4b13      	ldr	r3, [pc, #76]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004716:	d12d      	bne.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004718:	4b0f      	ldr	r3, [pc, #60]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	3301      	adds	r3, #1
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	fbb2 f3f3 	udiv	r3, r2, r3
 800472a:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800472c:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	0a1b      	lsrs	r3, r3, #8
 8004732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004736:	60fb      	str	r3, [r7, #12]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	fb02 f203 	mul.w	r2, r2, r3
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	0d5b      	lsrs	r3, r3, #21
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	3301      	adds	r3, #1
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004752:	61fb      	str	r3, [r7, #28]
          break;
 8004754:	e00e      	b.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004756:	bf00      	nop
 8004758:	40021000 	.word	0x40021000
 800475c:	0003d090 	.word	0x0003d090
 8004760:	08006f54 	.word	0x08006f54
 8004764:	00f42400 	.word	0x00f42400
 8004768:	007a1200 	.word	0x007a1200
          break;
 800476c:	bf00      	nop
 800476e:	e2e6      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004770:	bf00      	nop
 8004772:	e2e4      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004774:	bf00      	nop
        break;
 8004776:	e2e2      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004778:	4bac      	ldr	r3, [pc, #688]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2b03      	cmp	r3, #3
 8004788:	d827      	bhi.n	80047da <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800478a:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047a1 	.word	0x080047a1
 8004794:	080047a9 	.word	0x080047a9
 8004798:	080047b1 	.word	0x080047b1
 800479c:	080047c5 	.word	0x080047c5
          frequency = HAL_RCC_GetPCLK2Freq();
 80047a0:	f7ff fb02 	bl	8003da8 <HAL_RCC_GetPCLK2Freq>
 80047a4:	61f8      	str	r0, [r7, #28]
          break;
 80047a6:	e01d      	b.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 80047a8:	f7ff fa40 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 80047ac:	61f8      	str	r0, [r7, #28]
          break;
 80047ae:	e019      	b.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047b0:	4b9e      	ldr	r3, [pc, #632]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047bc:	d10f      	bne.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 80047be:	4b9c      	ldr	r3, [pc, #624]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80047c0:	61fb      	str	r3, [r7, #28]
          break;
 80047c2:	e00c      	b.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80047c4:	4b99      	ldr	r3, [pc, #612]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d107      	bne.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 80047d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047d6:	61fb      	str	r3, [r7, #28]
          break;
 80047d8:	e003      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 80047da:	bf00      	nop
 80047dc:	e2af      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80047de:	bf00      	nop
 80047e0:	e2ad      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80047e2:	bf00      	nop
        break;
 80047e4:	e2ab      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80047e6:	4b91      	ldr	r3, [pc, #580]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80047e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ec:	f003 030c 	and.w	r3, r3, #12
 80047f0:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b0c      	cmp	r3, #12
 80047f6:	d83a      	bhi.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80047f8:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80047fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fe:	bf00      	nop
 8004800:	08004835 	.word	0x08004835
 8004804:	0800486f 	.word	0x0800486f
 8004808:	0800486f 	.word	0x0800486f
 800480c:	0800486f 	.word	0x0800486f
 8004810:	0800483d 	.word	0x0800483d
 8004814:	0800486f 	.word	0x0800486f
 8004818:	0800486f 	.word	0x0800486f
 800481c:	0800486f 	.word	0x0800486f
 8004820:	08004845 	.word	0x08004845
 8004824:	0800486f 	.word	0x0800486f
 8004828:	0800486f 	.word	0x0800486f
 800482c:	0800486f 	.word	0x0800486f
 8004830:	08004859 	.word	0x08004859
          frequency = HAL_RCC_GetPCLK1Freq();
 8004834:	f7ff faa2 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 8004838:	61f8      	str	r0, [r7, #28]
          break;
 800483a:	e01d      	b.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 800483c:	f7ff f9f6 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8004840:	61f8      	str	r0, [r7, #28]
          break;
 8004842:	e019      	b.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004844:	4b79      	ldr	r3, [pc, #484]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004850:	d10f      	bne.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 8004852:	4b77      	ldr	r3, [pc, #476]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004854:	61fb      	str	r3, [r7, #28]
          break;
 8004856:	e00c      	b.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004858:	4b74      	ldr	r3, [pc, #464]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b02      	cmp	r3, #2
 8004864:	d107      	bne.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 8004866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800486a:	61fb      	str	r3, [r7, #28]
          break;
 800486c:	e003      	b.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 800486e:	bf00      	nop
 8004870:	e265      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004872:	bf00      	nop
 8004874:	e263      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004876:	bf00      	nop
        break;
 8004878:	e261      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800487a:	4b6c      	ldr	r3, [pc, #432]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004880:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004884:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b10      	cmp	r3, #16
 800488a:	d00d      	beq.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 800488c:	2b10      	cmp	r3, #16
 800488e:	d802      	bhi.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8004894:	e024      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 8004896:	2b20      	cmp	r3, #32
 8004898:	d00a      	beq.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 800489a:	2b30      	cmp	r3, #48	; 0x30
 800489c:	d012      	beq.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 800489e:	e01f      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 80048a0:	f7ff fa6c 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 80048a4:	61f8      	str	r0, [r7, #28]
          break;
 80048a6:	e01b      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 80048a8:	f7ff f9c0 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 80048ac:	61f8      	str	r0, [r7, #28]
          break;
 80048ae:	e017      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048b0:	4b5e      	ldr	r3, [pc, #376]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048bc:	d10d      	bne.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 80048be:	4b5c      	ldr	r3, [pc, #368]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80048c0:	61fb      	str	r3, [r7, #28]
          break;
 80048c2:	e00a      	b.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80048c4:	4b59      	ldr	r3, [pc, #356]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d105      	bne.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 80048d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048d6:	61fb      	str	r3, [r7, #28]
          break;
 80048d8:	e001      	b.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80048da:	bf00      	nop
 80048dc:	e22f      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80048de:	bf00      	nop
        break;
 80048e0:	e22d      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80048e2:	4b52      	ldr	r3, [pc, #328]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048ec:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b40      	cmp	r3, #64	; 0x40
 80048f2:	d00d      	beq.n	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	d802      	bhi.n	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 80048fc:	e024      	b.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 80048fe:	2b80      	cmp	r3, #128	; 0x80
 8004900:	d00a      	beq.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8004902:	2bc0      	cmp	r3, #192	; 0xc0
 8004904:	d012      	beq.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 8004906:	e01f      	b.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004908:	f7ff fa38 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 800490c:	61f8      	str	r0, [r7, #28]
          break;
 800490e:	e01b      	b.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004910:	f7ff f98c 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8004914:	61f8      	str	r0, [r7, #28]
          break;
 8004916:	e017      	b.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004918:	4b44      	ldr	r3, [pc, #272]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004924:	d10d      	bne.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 8004926:	4b42      	ldr	r3, [pc, #264]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004928:	61fb      	str	r3, [r7, #28]
          break;
 800492a:	e00a      	b.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800492c:	4b3f      	ldr	r3, [pc, #252]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b02      	cmp	r3, #2
 8004938:	d105      	bne.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 800493a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800493e:	61fb      	str	r3, [r7, #28]
          break;
 8004940:	e001      	b.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 8004942:	bf00      	nop
 8004944:	e1fb      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004946:	bf00      	nop
        break;
 8004948:	e1f9      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800494a:	4b38      	ldr	r3, [pc, #224]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800494c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004954:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495c:	d010      	beq.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 800495e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004962:	d802      	bhi.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d007      	beq.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 8004968:	e026      	b.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 800496a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800496e:	d00b      	beq.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004970:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004974:	d012      	beq.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 8004976:	e01f      	b.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004978:	f7ff fa00 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 800497c:	61f8      	str	r0, [r7, #28]
          break;
 800497e:	e01b      	b.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 8004980:	f7ff f954 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8004984:	61f8      	str	r0, [r7, #28]
          break;
 8004986:	e017      	b.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004988:	4b28      	ldr	r3, [pc, #160]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004994:	d10d      	bne.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 8004996:	4b26      	ldr	r3, [pc, #152]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004998:	61fb      	str	r3, [r7, #28]
          break;
 800499a:	e00a      	b.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800499c:	4b23      	ldr	r3, [pc, #140]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d105      	bne.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 80049aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ae:	61fb      	str	r3, [r7, #28]
          break;
 80049b0:	e001      	b.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 80049b2:	bf00      	nop
 80049b4:	e1c3      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80049b6:	bf00      	nop
        break;
 80049b8:	e1c1      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80049ba:	4b1c      	ldr	r3, [pc, #112]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049c4:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049cc:	d010      	beq.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 80049ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d2:	d802      	bhi.n	80049da <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 80049d8:	e026      	b.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 80049da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049de:	d00b      	beq.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80049e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049e4:	d012      	beq.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 80049e6:	e01f      	b.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80049e8:	f7ff f9c8 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 80049ec:	61f8      	str	r0, [r7, #28]
          break;
 80049ee:	e01b      	b.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 80049f0:	f7ff f91c 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 80049f4:	61f8      	str	r0, [r7, #28]
          break;
 80049f6:	e017      	b.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049f8:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a04:	d10d      	bne.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 8004a06:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004a08:	61fb      	str	r3, [r7, #28]
          break;
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a0c:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d105      	bne.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 8004a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a1e:	61fb      	str	r3, [r7, #28]
          break;
 8004a20:	e001      	b.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 8004a22:	bf00      	nop
 8004a24:	e18b      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004a26:	bf00      	nop
        break;
 8004a28:	e189      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004a2a:	bf00      	nop
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004a34:	4bae      	ldr	r3, [pc, #696]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a3e:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a46:	d02f      	beq.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8004a48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a4c:	d003      	beq.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004a4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a52:	d004      	beq.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 8004a54:	e050      	b.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a56:	f7ff f8e9 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8004a5a:	61f8      	str	r0, [r7, #28]
          break;
 8004a5c:	e04c      	b.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8004a5e:	4ba4      	ldr	r3, [pc, #656]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d043      	beq.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a6a:	4ba1      	ldr	r3, [pc, #644]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	3301      	adds	r3, #1
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7c:	61bb      	str	r3, [r7, #24]
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004a7e:	4b9c      	ldr	r3, [pc, #624]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	0a1b      	lsrs	r3, r3, #8
 8004a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a88:	60fb      	str	r3, [r7, #12]
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	fb02 f203 	mul.w	r2, r2, r3
 8004a92:	4b97      	ldr	r3, [pc, #604]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	0e5b      	lsrs	r3, r3, #25
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa4:	61fb      	str	r3, [r7, #28]
          break;
 8004aa6:	e024      	b.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 8004aa8:	4b91      	ldr	r3, [pc, #580]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d020      	beq.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004ab4:	4b8e      	ldr	r3, [pc, #568]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	3301      	adds	r3, #1
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac6:	61bb      	str	r3, [r7, #24]
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004ac8:	4b89      	ldr	r3, [pc, #548]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	0a1b      	lsrs	r3, r3, #8
 8004ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad2:	60fb      	str	r3, [r7, #12]
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U);
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	fb02 f203 	mul.w	r2, r2, r3
 8004adc:	4b84      	ldr	r3, [pc, #528]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	0e5b      	lsrs	r3, r3, #25
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aee:	61fb      	str	r3, [r7, #28]
          break;
 8004af0:	e001      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 8004af2:	bf00      	nop
 8004af4:	e123      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004af6:	bf00      	nop
        break;
 8004af8:	e121      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004afa:	4b7d      	ldr	r3, [pc, #500]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b04:	617b      	str	r3, [r7, #20]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d103      	bne.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004b0c:	f7ff f94c 	bl	8003da8 <HAL_RCC_GetPCLK2Freq>
 8004b10:	61f8      	str	r0, [r7, #28]
        break;
 8004b12:	e114      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b14:	f7ff f88a 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8004b18:	61f8      	str	r0, [r7, #28]
        break;
 8004b1a:	e110      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004b1c:	4b74      	ldr	r3, [pc, #464]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b22:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004b26:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2e:	d009      	beq.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8004b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d000      	beq.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 8004b3a:	e011      	b.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b3c:	f7ff f91e 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 8004b40:	61f8      	str	r0, [r7, #28]
          break;
 8004b42:	e00d      	b.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b44:	f7ff f872 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8004b48:	61f8      	str	r0, [r7, #28]
          break;
 8004b4a:	e009      	b.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b4c:	4b68      	ldr	r3, [pc, #416]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b58:	d101      	bne.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 8004b5a:	4b66      	ldr	r3, [pc, #408]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004b5c:	61fb      	str	r3, [r7, #28]
          break;
 8004b5e:	bf00      	nop
        break;
 8004b60:	e0ed      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004b62:	4b63      	ldr	r3, [pc, #396]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b6c:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b74:	d009      	beq.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8004b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7a:	d00a      	beq.n	8004b92 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d000      	beq.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8004b80:	e011      	b.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b82:	f7ff f8fb 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 8004b86:	61f8      	str	r0, [r7, #28]
          break;
 8004b88:	e00d      	b.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b8a:	f7ff f84f 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8004b8e:	61f8      	str	r0, [r7, #28]
          break;
 8004b90:	e009      	b.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b92:	4b57      	ldr	r3, [pc, #348]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9e:	d101      	bne.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 8004ba0:	4b54      	ldr	r3, [pc, #336]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004ba2:	61fb      	str	r3, [r7, #28]
          break;
 8004ba4:	bf00      	nop
        break;
 8004ba6:	e0ca      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004ba8:	4b51      	ldr	r3, [pc, #324]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bb2:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bba:	d009      	beq.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8004bbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d000      	beq.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 8004bc6:	e011      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bc8:	f7ff f8d8 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 8004bcc:	61f8      	str	r0, [r7, #28]
          break;
 8004bce:	e00d      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004bd0:	f7ff f82c 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8004bd4:	61f8      	str	r0, [r7, #28]
          break;
 8004bd6:	e009      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bd8:	4b45      	ldr	r3, [pc, #276]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be4:	d101      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 8004be6:	4b43      	ldr	r3, [pc, #268]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004be8:	61fb      	str	r3, [r7, #28]
          break;
 8004bea:	bf00      	nop
        break;
 8004bec:	e0a7      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004bee:	4b40      	ldr	r3, [pc, #256]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004bf8:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c00:	d010      	beq.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8004c02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c06:	d802      	bhi.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 8004c0c:	e02f      	b.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 8004c0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c12:	d012      	beq.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8004c14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c18:	d019      	beq.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8004c1a:	e028      	b.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c1c:	f7ff f8ae 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 8004c20:	61f8      	str	r0, [r7, #28]
          break;
 8004c22:	e024      	b.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004c24:	4b32      	ldr	r3, [pc, #200]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d118      	bne.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
            frequency = LSI_VALUE;
 8004c32:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004c36:	61fb      	str	r3, [r7, #28]
          break;
 8004c38:	e014      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c3a:	4b2d      	ldr	r3, [pc, #180]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c46:	d10f      	bne.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 8004c48:	4b2a      	ldr	r3, [pc, #168]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004c4a:	61fb      	str	r3, [r7, #28]
          break;
 8004c4c:	e00c      	b.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c4e:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d107      	bne.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 8004c5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c60:	61fb      	str	r3, [r7, #28]
          break;
 8004c62:	e003      	b.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 8004c64:	bf00      	nop
 8004c66:	e06a      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004c68:	bf00      	nop
 8004c6a:	e068      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004c6c:	bf00      	nop
        break;
 8004c6e:	e066      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004c70:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c76:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004c7a:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c82:	d010      	beq.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c88:	d802      	bhi.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d007      	beq.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 8004c8e:	e034      	b.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 8004c90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c94:	d012      	beq.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8004c96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c9a:	d019      	beq.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 8004c9c:	e02d      	b.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c9e:	f7ff f86d 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 8004ca2:	61f8      	str	r0, [r7, #28]
          break;
 8004ca4:	e029      	b.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004ca6:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d118      	bne.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
            frequency = LSI_VALUE;
 8004cb4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004cb8:	61fb      	str	r3, [r7, #28]
          break;
 8004cba:	e014      	b.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc8:	d10f      	bne.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 8004cca:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004ccc:	61fb      	str	r3, [r7, #28]
          break;
 8004cce:	e00c      	b.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004cd0:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 8004cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ce2:	61fb      	str	r3, [r7, #28]
          break;
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 8004ce6:	bf00      	nop
 8004ce8:	e029      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004cea:	bf00      	nop
 8004cec:	e027      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004cee:	bf00      	nop
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	00f42400 	.word	0x00f42400
          break;
 8004cf8:	bf00      	nop
        break;
 8004cfa:	e020      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004cfc:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d06:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 8004d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d12:	d004      	beq.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 8004d14:	e00d      	b.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d16:	f7ff f831 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 8004d1a:	61f8      	str	r0, [r7, #28]
          break;
 8004d1c:	e009      	b.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d1e:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d2a:	d101      	bne.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 8004d2c:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 8004d2e:	61fb      	str	r3, [r7, #28]
          break;
 8004d30:	bf00      	nop
        break;
 8004d32:	e004      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004d34:	bf00      	nop
 8004d36:	e002      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004d38:	bf00      	nop
 8004d3a:	e000      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004d3c:	bf00      	nop
    }
  }

  return(frequency);
 8004d3e:	69fb      	ldr	r3, [r7, #28]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3720      	adds	r7, #32
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	00f42400 	.word	0x00f42400

08004d50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d5e:	4b73      	ldr	r3, [pc, #460]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d018      	beq.n	8004d9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d6a:	4b70      	ldr	r3, [pc, #448]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f003 0203 	and.w	r2, r3, #3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d10d      	bne.n	8004d96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
       ||
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d009      	beq.n	8004d96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d82:	4b6a      	ldr	r3, [pc, #424]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	091b      	lsrs	r3, r3, #4
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
       ||
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d044      	beq.n	8004e20 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	73fb      	strb	r3, [r7, #15]
 8004d9a:	e041      	b.n	8004e20 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d00c      	beq.n	8004dbe <RCCEx_PLLSAI1_Config+0x6e>
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d013      	beq.n	8004dd0 <RCCEx_PLLSAI1_Config+0x80>
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d120      	bne.n	8004dee <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dac:	4b5f      	ldr	r3, [pc, #380]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d11d      	bne.n	8004df4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dbc:	e01a      	b.n	8004df4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dbe:	4b5b      	ldr	r3, [pc, #364]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d116      	bne.n	8004df8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dce:	e013      	b.n	8004df8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dd0:	4b56      	ldr	r3, [pc, #344]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10f      	bne.n	8004dfc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ddc:	4b53      	ldr	r3, [pc, #332]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d109      	bne.n	8004dfc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dec:	e006      	b.n	8004dfc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]
      break;
 8004df2:	e004      	b.n	8004dfe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004df4:	bf00      	nop
 8004df6:	e002      	b.n	8004dfe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004df8:	bf00      	nop
 8004dfa:	e000      	b.n	8004dfe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004dfc:	bf00      	nop
    }

    if(status == HAL_OK)
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10d      	bne.n	8004e20 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e04:	4849      	ldr	r0, [pc, #292]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e06:	4b49      	ldr	r3, [pc, #292]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6819      	ldr	r1, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	011b      	lsls	r3, r3, #4
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d17d      	bne.n	8004f22 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e26:	4a41      	ldr	r2, [pc, #260]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e28:	4b40      	ldr	r3, [pc, #256]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e32:	f7fc fc31 	bl	8001698 <HAL_GetTick>
 8004e36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e38:	e009      	b.n	8004e4e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e3a:	f7fc fc2d 	bl	8001698 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d902      	bls.n	8004e4e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	73fb      	strb	r3, [r7, #15]
        break;
 8004e4c:	e005      	b.n	8004e5a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e4e:	4b37      	ldr	r3, [pc, #220]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1ef      	bne.n	8004e3a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d160      	bne.n	8004f22 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d111      	bne.n	8004e8a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e66:	4831      	ldr	r0, [pc, #196]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e68:	4b30      	ldr	r3, [pc, #192]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6892      	ldr	r2, [r2, #8]
 8004e78:	0211      	lsls	r1, r2, #8
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	68d2      	ldr	r2, [r2, #12]
 8004e7e:	0912      	lsrs	r2, r2, #4
 8004e80:	0452      	lsls	r2, r2, #17
 8004e82:	430a      	orrs	r2, r1
 8004e84:	4313      	orrs	r3, r2
 8004e86:	6103      	str	r3, [r0, #16]
 8004e88:	e027      	b.n	8004eda <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d112      	bne.n	8004eb6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e90:	4826      	ldr	r0, [pc, #152]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e92:	4b26      	ldr	r3, [pc, #152]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6892      	ldr	r2, [r2, #8]
 8004ea2:	0211      	lsls	r1, r2, #8
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6912      	ldr	r2, [r2, #16]
 8004ea8:	0852      	lsrs	r2, r2, #1
 8004eaa:	3a01      	subs	r2, #1
 8004eac:	0552      	lsls	r2, r2, #21
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	6103      	str	r3, [r0, #16]
 8004eb4:	e011      	b.n	8004eda <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eb6:	481d      	ldr	r0, [pc, #116]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004eb8:	4b1c      	ldr	r3, [pc, #112]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ec0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6892      	ldr	r2, [r2, #8]
 8004ec8:	0211      	lsls	r1, r2, #8
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6952      	ldr	r2, [r2, #20]
 8004ece:	0852      	lsrs	r2, r2, #1
 8004ed0:	3a01      	subs	r2, #1
 8004ed2:	0652      	lsls	r2, r2, #25
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004eda:	4a14      	ldr	r2, [pc, #80]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004edc:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ee4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee6:	f7fc fbd7 	bl	8001698 <HAL_GetTick>
 8004eea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004eec:	e009      	b.n	8004f02 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004eee:	f7fc fbd3 	bl	8001698 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d902      	bls.n	8004f02 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	73fb      	strb	r3, [r7, #15]
          break;
 8004f00:	e005      	b.n	8004f0e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f02:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0ef      	beq.n	8004eee <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d106      	bne.n	8004f22 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f14:	4905      	ldr	r1, [pc, #20]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f16:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40021000 	.word	0x40021000

08004f30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f3e:	4b68      	ldr	r3, [pc, #416]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d018      	beq.n	8004f7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f4a:	4b65      	ldr	r3, [pc, #404]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f003 0203 	and.w	r2, r3, #3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d10d      	bne.n	8004f76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
       ||
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004f62:	4b5f      	ldr	r3, [pc, #380]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	091b      	lsrs	r3, r3, #4
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
       ||
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d044      	beq.n	8005000 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	73fb      	strb	r3, [r7, #15]
 8004f7a:	e041      	b.n	8005000 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d00c      	beq.n	8004f9e <RCCEx_PLLSAI2_Config+0x6e>
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d013      	beq.n	8004fb0 <RCCEx_PLLSAI2_Config+0x80>
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d120      	bne.n	8004fce <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f8c:	4b54      	ldr	r3, [pc, #336]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d11d      	bne.n	8004fd4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f9c:	e01a      	b.n	8004fd4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f9e:	4b50      	ldr	r3, [pc, #320]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d116      	bne.n	8004fd8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fae:	e013      	b.n	8004fd8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fb0:	4b4b      	ldr	r3, [pc, #300]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10f      	bne.n	8004fdc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fbc:	4b48      	ldr	r3, [pc, #288]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d109      	bne.n	8004fdc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fcc:	e006      	b.n	8004fdc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd2:	e004      	b.n	8004fde <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004fd4:	bf00      	nop
 8004fd6:	e002      	b.n	8004fde <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004fd8:	bf00      	nop
 8004fda:	e000      	b.n	8004fde <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004fdc:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fde:	7bfb      	ldrb	r3, [r7, #15]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10d      	bne.n	8005000 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fe4:	483e      	ldr	r0, [pc, #248]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fe6:	4b3e      	ldr	r3, [pc, #248]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6819      	ldr	r1, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	430b      	orrs	r3, r1
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d167      	bne.n	80050d6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005006:	4a36      	ldr	r2, [pc, #216]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005008:	4b35      	ldr	r3, [pc, #212]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005012:	f7fc fb41 	bl	8001698 <HAL_GetTick>
 8005016:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005018:	e009      	b.n	800502e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800501a:	f7fc fb3d 	bl	8001698 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d902      	bls.n	800502e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	73fb      	strb	r3, [r7, #15]
        break;
 800502c:	e005      	b.n	800503a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800502e:	4b2c      	ldr	r3, [pc, #176]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1ef      	bne.n	800501a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d14a      	bne.n	80050d6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d111      	bne.n	800506a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005046:	4826      	ldr	r0, [pc, #152]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005048:	4b25      	ldr	r3, [pc, #148]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6892      	ldr	r2, [r2, #8]
 8005058:	0211      	lsls	r1, r2, #8
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	68d2      	ldr	r2, [r2, #12]
 800505e:	0912      	lsrs	r2, r2, #4
 8005060:	0452      	lsls	r2, r2, #17
 8005062:	430a      	orrs	r2, r1
 8005064:	4313      	orrs	r3, r2
 8005066:	6143      	str	r3, [r0, #20]
 8005068:	e011      	b.n	800508e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800506a:	481d      	ldr	r0, [pc, #116]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800506c:	4b1c      	ldr	r3, [pc, #112]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005074:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6892      	ldr	r2, [r2, #8]
 800507c:	0211      	lsls	r1, r2, #8
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6912      	ldr	r2, [r2, #16]
 8005082:	0852      	lsrs	r2, r2, #1
 8005084:	3a01      	subs	r2, #1
 8005086:	0652      	lsls	r2, r2, #25
 8005088:	430a      	orrs	r2, r1
 800508a:	4313      	orrs	r3, r2
 800508c:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800508e:	4a14      	ldr	r2, [pc, #80]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005090:	4b13      	ldr	r3, [pc, #76]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005098:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509a:	f7fc fafd 	bl	8001698 <HAL_GetTick>
 800509e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050a0:	e009      	b.n	80050b6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050a2:	f7fc faf9 	bl	8001698 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d902      	bls.n	80050b6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	73fb      	strb	r3, [r7, #15]
          break;
 80050b4:	e005      	b.n	80050c2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050b6:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0ef      	beq.n	80050a2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d106      	bne.n	80050d6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050c8:	4905      	ldr	r1, [pc, #20]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80050ca:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80050cc:	695a      	ldr	r2, [r3, #20]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80050d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40021000 	.word	0x40021000

080050e4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b089      	sub	sp, #36	; 0x24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005100:	d10d      	bne.n	800511e <RCCEx_GetSAIxPeriphCLKFreq+0x3a>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005102:	4b63      	ldr	r3, [pc, #396]	; (8005290 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8005104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005108:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800510c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005114:	d114      	bne.n	8005140 <RCCEx_GetSAIxPeriphCLKFreq+0x5c>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005116:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800511a:	61fb      	str	r3, [r7, #28]
 800511c:	e010      	b.n	8005140 <RCCEx_GetSAIxPeriphCLKFreq+0x5c>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005124:	d10c      	bne.n	8005140 <RCCEx_GetSAIxPeriphCLKFreq+0x5c>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005126:	4b5a      	ldr	r3, [pc, #360]	; (8005290 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8005128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512c:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005130:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005138:	d102      	bne.n	8005140 <RCCEx_GetSAIxPeriphCLKFreq+0x5c>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800513a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800513e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	2b00      	cmp	r3, #0
 8005144:	f040 809c 	bne.w	8005280 <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
  {
    pllvco = InputFrequency;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005152:	d003      	beq.n	800515c <RCCEx_GetSAIxPeriphCLKFreq+0x78>
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800515a:	d12d      	bne.n	80051b8 <RCCEx_GetSAIxPeriphCLKFreq+0xd4>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 800515c:	4b4c      	ldr	r3, [pc, #304]	; (8005290 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 808b 	beq.w	8005280 <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800516a:	4b49      	ldr	r3, [pc, #292]	; (8005290 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	091b      	lsrs	r3, r3, #4
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	3301      	adds	r3, #1
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	fbb2 f3f3 	udiv	r3, r2, r3
 800517c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800517e:	4b44      	ldr	r3, [pc, #272]	; (8005290 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	0a1b      	lsrs	r3, r3, #8
 8005184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005188:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10a      	bne.n	80051a6 <RCCEx_GetSAIxPeriphCLKFreq+0xc2>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005190:	4b3f      	ldr	r3, [pc, #252]	; (8005290 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          {
            pllp = 17U;
 800519c:	2311      	movs	r3, #17
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	e001      	b.n	80051a6 <RCCEx_GetSAIxPeriphCLKFreq+0xc2>
          }
          else
          {
            pllp = 7U;
 80051a2:	2307      	movs	r3, #7
 80051a4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	fb02 f203 	mul.w	r2, r2, r3
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b4:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80051b6:	e063      	b.n	8005280 <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d12c      	bne.n	8005218 <RCCEx_GetSAIxPeriphCLKFreq+0x134>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 80051be:	4b34      	ldr	r3, [pc, #208]	; (8005290 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d05a      	beq.n	8005280 <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80051ca:	4b31      	ldr	r3, [pc, #196]	; (8005290 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	091b      	lsrs	r3, r3, #4
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	3301      	adds	r3, #1
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051dc:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80051de:	4b2c      	ldr	r3, [pc, #176]	; (8005290 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	0a1b      	lsrs	r3, r3, #8
 80051e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <RCCEx_GetSAIxPeriphCLKFreq+0x122>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80051f0:	4b27      	ldr	r3, [pc, #156]	; (8005290 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          {
            pllp = 17U;
 80051fc:	2311      	movs	r3, #17
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	e001      	b.n	8005206 <RCCEx_GetSAIxPeriphCLKFreq+0x122>
          }
          else
          {
            pllp = 7U;
 8005202:	2307      	movs	r3, #7
 8005204:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	fb02 f203 	mul.w	r2, r2, r3
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	fbb2 f3f3 	udiv	r3, r2, r3
 8005214:	61fb      	str	r3, [r7, #28]
 8005216:	e033      	b.n	8005280 <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800521e:	d003      	beq.n	8005228 <RCCEx_GetSAIxPeriphCLKFreq+0x144>
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005226:	d12b      	bne.n	8005280 <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8005228:	4b19      	ldr	r3, [pc, #100]	; (8005290 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d025      	beq.n	8005280 <RCCEx_GetSAIxPeriphCLKFreq+0x19c>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005234:	4b16      	ldr	r3, [pc, #88]	; (8005290 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	091b      	lsrs	r3, r3, #4
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	3301      	adds	r3, #1
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	fbb2 f3f3 	udiv	r3, r2, r3
 8005246:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005248:	4b11      	ldr	r3, [pc, #68]	; (8005290 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	0a1b      	lsrs	r3, r3, #8
 800524e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005252:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10a      	bne.n	8005270 <RCCEx_GetSAIxPeriphCLKFreq+0x18c>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800525a:	4b0d      	ldr	r3, [pc, #52]	; (8005290 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          {
            pllp = 17U;
 8005266:	2311      	movs	r3, #17
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	e001      	b.n	8005270 <RCCEx_GetSAIxPeriphCLKFreq+0x18c>
          }
          else
          {
            pllp = 7U;
 800526c:	2307      	movs	r3, #7
 800526e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	fb02 f203 	mul.w	r2, r2, r3
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	fbb2 f3f3 	udiv	r3, r2, r3
 800527e:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005280:	69fb      	ldr	r3, [r7, #28]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3724      	adds	r7, #36	; 0x24
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40021000 	.word	0x40021000

08005294 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e14a      	b.n	800553c <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f001 fb86 	bl	80069cc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fa35 	bl	8005730 <SAI_Disable>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e135      	b.n	800553c <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d007      	beq.n	80052f0 <HAL_SAI_Init+0x5c>
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d302      	bcc.n	80052ea <HAL_SAI_Init+0x56>
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d006      	beq.n	80052f6 <HAL_SAI_Init+0x62>
 80052e8:	e008      	b.n	80052fc <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	61fb      	str	r3, [r7, #28]
      break;
 80052ee:	e008      	b.n	8005302 <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80052f0:	2310      	movs	r3, #16
 80052f2:	61fb      	str	r3, [r7, #28]
      break;
 80052f4:	e005      	b.n	8005302 <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80052f6:	2320      	movs	r3, #32
 80052f8:	61fb      	str	r3, [r7, #28]
      break;
 80052fa:	e002      	b.n	8005302 <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	61fb      	str	r3, [r7, #28]
      break;
 8005300:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	2b03      	cmp	r3, #3
 8005308:	d81d      	bhi.n	8005346 <HAL_SAI_Init+0xb2>
 800530a:	a201      	add	r2, pc, #4	; (adr r2, 8005310 <HAL_SAI_Init+0x7c>)
 800530c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005310:	08005321 	.word	0x08005321
 8005314:	08005327 	.word	0x08005327
 8005318:	0800532f 	.word	0x0800532f
 800531c:	08005337 	.word	0x08005337
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	617b      	str	r3, [r7, #20]
      break;
 8005324:	e012      	b.n	800534c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800532a:	617b      	str	r3, [r7, #20]
      break;
 800532c:	e00e      	b.n	800534c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800532e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005332:	617b      	str	r3, [r7, #20]
      break;
 8005334:	e00a      	b.n	800534c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800533a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	61fb      	str	r3, [r7, #28]
      break;
 8005344:	e002      	b.n	800534c <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]
      break;
 800534a:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a7c      	ldr	r2, [pc, #496]	; (8005544 <HAL_SAI_Init+0x2b0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d004      	beq.n	8005360 <HAL_SAI_Init+0xcc>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a7b      	ldr	r2, [pc, #492]	; (8005548 <HAL_SAI_Init+0x2b4>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d103      	bne.n	8005368 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005360:	4a7a      	ldr	r2, [pc, #488]	; (800554c <HAL_SAI_Init+0x2b8>)
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	e002      	b.n	800536e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005368:	4a79      	ldr	r2, [pc, #484]	; (8005550 <HAL_SAI_Init+0x2bc>)
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d038      	beq.n	80053e8 <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a72      	ldr	r2, [pc, #456]	; (8005544 <HAL_SAI_Init+0x2b0>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d004      	beq.n	800538a <HAL_SAI_Init+0xf6>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a70      	ldr	r2, [pc, #448]	; (8005548 <HAL_SAI_Init+0x2b4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d105      	bne.n	8005396 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800538a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800538e:	f7ff f867 	bl	8004460 <HAL_RCCEx_GetPeriphCLKFreq>
 8005392:	6138      	str	r0, [r7, #16]
 8005394:	e004      	b.n	80053a0 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005396:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800539a:	f7ff f861 	bl	8004460 <HAL_RCCEx_GetPeriphCLKFreq>
 800539e:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	461a      	mov	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	025b      	lsls	r3, r3, #9
 80053b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b6:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4a66      	ldr	r2, [pc, #408]	; (8005554 <HAL_SAI_Init+0x2c0>)
 80053bc:	fba2 2303 	umull	r2, r3, r2, r3
 80053c0:	08da      	lsrs	r2, r3, #3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80053c6:	68f9      	ldr	r1, [r7, #12]
 80053c8:	4b62      	ldr	r3, [pc, #392]	; (8005554 <HAL_SAI_Init+0x2c0>)
 80053ca:	fba3 2301 	umull	r2, r3, r3, r1
 80053ce:	08da      	lsrs	r2, r3, #3
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	1aca      	subs	r2, r1, r3
 80053da:	2a08      	cmp	r2, #8
 80053dc:	d904      	bls.n	80053e8 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_SAI_Init+0x164>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d109      	bne.n	800540c <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_SAI_Init+0x170>
 8005400:	2300      	movs	r3, #0
 8005402:	e001      	b.n	8005408 <HAL_SAI_Init+0x174>
 8005404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	e008      	b.n	800541e <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005410:	2b01      	cmp	r3, #1
 8005412:	d102      	bne.n	800541a <HAL_SAI_Init+0x186>
 8005414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005418:	e000      	b.n	800541c <HAL_SAI_Init+0x188>
 800541a:	2300      	movs	r3, #0
 800541c:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6819      	ldr	r1, [r3, #0]
 8005428:	4b4b      	ldr	r3, [pc, #300]	; (8005558 <HAL_SAI_Init+0x2c4>)
 800542a:	400b      	ands	r3, r1
 800542c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	6811      	ldr	r1, [r2, #0]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6850      	ldr	r0, [r2, #4]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005440:	4310      	orrs	r0, r2
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6b52      	ldr	r2, [r2, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005446:	4310      	orrs	r0, r2
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800544c:	4310      	orrs	r0, r2
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	4310      	orrs	r0, r2
                          ckstr_bits | syncen_bits |                             \
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4310      	orrs	r0, r2
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6a52      	ldr	r2, [r2, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800545a:	4310      	orrs	r0, r2
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6912      	ldr	r2, [r2, #16]
 8005460:	4310      	orrs	r0, r2
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6952      	ldr	r2, [r2, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005466:	4310      	orrs	r0, r2
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6a12      	ldr	r2, [r2, #32]
 800546c:	0512      	lsls	r2, r2, #20
 800546e:	4302      	orrs	r2, r0
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005470:	430a      	orrs	r2, r1
 8005472:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005482:	f023 030f 	bic.w	r3, r3, #15
 8005486:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6812      	ldr	r2, [r2, #0]
 8005490:	6851      	ldr	r1, [r2, #4]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6990      	ldr	r0, [r2, #24]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800549a:	4310      	orrs	r0, r2
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054a0:	4302      	orrs	r2, r0
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6899      	ldr	r1, [r3, #8]
 80054b0:	4b2a      	ldr	r3, [pc, #168]	; (800555c <HAL_SAI_Init+0x2c8>)
 80054b2:	400b      	ands	r3, r1
 80054b4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6812      	ldr	r2, [r2, #0]
 80054be:	6891      	ldr	r1, [r2, #8]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054c4:	1e50      	subs	r0, r2, #1
                           hsai->FrameInit.FSOffset |
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80054ca:	4310      	orrs	r0, r2
                           hsai->FrameInit.FSDefinition |
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80054d0:	4310      	orrs	r0, r2
                           hsai->FrameInit.FSPolarity   |
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80054d6:	4310      	orrs	r0, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80054dc:	3a01      	subs	r2, #1
 80054de:	0212      	lsls	r2, r2, #8
                           hsai->FrameInit.FSPolarity   |
 80054e0:	4302      	orrs	r2, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80054e2:	430a      	orrs	r2, r1
 80054e4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68d9      	ldr	r1, [r3, #12]
 80054f0:	f24f 0320 	movw	r3, #61472	; 0xf020
 80054f4:	400b      	ands	r3, r1
 80054f6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	68d1      	ldr	r1, [r2, #12]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800550a:	4310      	orrs	r0, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8005510:	0412      	lsls	r2, r2, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005512:	4310      	orrs	r0, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005518:	3a01      	subs	r2, #1
 800551a:	0212      	lsls	r2, r2, #8
 800551c:	4302      	orrs	r2, r0
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800551e:	430a      	orrs	r2, r1
 8005520:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3720      	adds	r7, #32
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40015404 	.word	0x40015404
 8005548:	40015424 	.word	0x40015424
 800554c:	40015400 	.word	0x40015400
 8005550:	40015800 	.word	0x40015800
 8005554:	cccccccd 	.word	0xcccccccd
 8005558:	ff05c010 	.word	0xff05c010
 800555c:	fff88000 	.word	0xfff88000

08005560 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	4613      	mov	r3, r2
 800556c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800556e:	f7fc f893 	bl	8001698 <HAL_GetTick>
 8005572:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_SAI_Transmit_DMA+0x20>
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e093      	b.n	80056ac <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b01      	cmp	r3, #1
 800558e:	f040 808c 	bne.w	80056aa <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <HAL_SAI_Transmit_DMA+0x40>
 800559c:	2302      	movs	r3, #2
 800559e:	e085      	b.n	80056ac <HAL_SAI_Transmit_DMA+0x14c>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	88fa      	ldrh	r2, [r7, #6]
 80055b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	88fa      	ldrh	r2, [r7, #6]
 80055ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2212      	movs	r2, #18
 80055ca:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d2:	4a38      	ldr	r2, [pc, #224]	; (80056b4 <HAL_SAI_Transmit_DMA+0x154>)
 80055d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055da:	4a37      	ldr	r2, [pc, #220]	; (80056b8 <HAL_SAI_Transmit_DMA+0x158>)
 80055dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055e2:	4a36      	ldr	r2, [pc, #216]	; (80056bc <HAL_SAI_Transmit_DMA+0x15c>)
 80055e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ea:	2200      	movs	r2, #0
 80055ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055f6:	4619      	mov	r1, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	331c      	adds	r3, #28
 80055fe:	461a      	mov	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005606:	f7fc fd99 	bl	800213c <HAL_DMA_Start_IT>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e047      	b.n	80056ac <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800561c:	2100      	movs	r1, #0
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 f84e 	bl	80056c0 <SAI_InterruptFlag>
 8005624:	4601      	mov	r1, r0
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	6812      	ldr	r2, [r2, #0]
 800562e:	6912      	ldr	r2, [r2, #16]
 8005630:	430a      	orrs	r2, r1
 8005632:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	6812      	ldr	r2, [r2, #0]
 800563e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005642:	601a      	str	r2, [r3, #0]

    /* Wait untill FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005644:	e015      	b.n	8005672 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005646:	f7fc f827 	bl	8001698 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005654:	d90d      	bls.n	8005672 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800565c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e01c      	b.n	80056ac <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0e2      	beq.n	8005646 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d107      	bne.n	800569e <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	6812      	ldr	r2, [r2, #0]
 8005696:	6812      	ldr	r2, [r2, #0]
 8005698:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800569c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e000      	b.n	80056ac <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80056aa:	2302      	movs	r3, #2
  }
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	080057f7 	.word	0x080057f7
 80056b8:	08005799 	.word	0x08005799
 80056bc:	08005813 	.word	0x08005813

080056c0 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	460b      	mov	r3, r1
 80056ca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d103      	bne.n	80056de <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f043 0308 	orr.w	r3, r3, #8
 80056dc:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d10b      	bne.n	80056fe <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d003      	beq.n	80056f6 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d103      	bne.n	80056fe <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f043 0310 	orr.w	r3, r3, #16
 80056fc:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b03      	cmp	r3, #3
 8005704:	d003      	beq.n	800570e <SAI_InterruptFlag+0x4e>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d104      	bne.n	8005718 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	e003      	b.n	8005720 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f043 0304 	orr.w	r3, r3, #4
 800571e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005720:	68fb      	ldr	r3, [r7, #12]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
	...

08005730 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005730:	b490      	push	{r4, r7}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005738:	4b15      	ldr	r3, [pc, #84]	; (8005790 <SAI_Disable+0x60>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a15      	ldr	r2, [pc, #84]	; (8005794 <SAI_Disable+0x64>)
 800573e:	fba2 2303 	umull	r2, r3, r2, r3
 8005742:	0b1b      	lsrs	r3, r3, #12
 8005744:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6812      	ldr	r2, [r2, #0]
 8005752:	6812      	ldr	r2, [r2, #0]
 8005754:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005758:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800575a:	2c00      	cmp	r4, #0
 800575c:	d10a      	bne.n	8005774 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005764:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	73fb      	strb	r3, [r7, #15]
      break;
 8005772:	e007      	b.n	8005784 <SAI_Disable+0x54>
    }
    count--;
 8005774:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1ea      	bne.n	800575a <SAI_Disable+0x2a>

  return status;
 8005784:	7bfb      	ldrb	r3, [r7, #15]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bc90      	pop	{r4, r7}
 800578e:	4770      	bx	lr
 8005790:	20000044 	.word	0x20000044
 8005794:	95cbec1b 	.word	0x95cbec1b

08005798 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	d01c      	beq.n	80057e8 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	6812      	ldr	r2, [r2, #0]
 80057be:	6812      	ldr	r2, [r2, #0]
 80057c0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80057c4:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80057c6:	2100      	movs	r1, #0
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f7ff ff79 	bl	80056c0 <SAI_InterruptFlag>
 80057ce:	4603      	mov	r3, r0
 80057d0:	43da      	mvns	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68f9      	ldr	r1, [r7, #12]
 80057d8:	6809      	ldr	r1, [r1, #0]
 80057da:	6909      	ldr	r1, [r1, #16]
 80057dc:	400a      	ands	r2, r1
 80057de:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f001 f987 	bl	8006afc <HAL_SAI_TxCpltCallback>
#endif
}
 80057ee:	bf00      	nop
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005802:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f7fb fec5 	bl	8001594 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800580a:	bf00      	nop
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005826:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	6812      	ldr	r2, [r2, #0]
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800583e:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f7ff ff75 	bl	8005730 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f7fb feae 	bl	80015b8 <HAL_SAI_ErrorCallback>
#endif
}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <VL53L1X_writeReg>:
#include "VL53L1X.h"



void VL53L1X_writeReg(VL53L1X_DEV Dev, uint16_t reg, uint8_t value)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af04      	add	r7, sp, #16
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	807b      	strh	r3, [r7, #2]
 8005870:	4613      	mov	r3, r2
 8005872:	707b      	strb	r3, [r7, #1]
	HAL_I2C_Mem_Write(Dev->I2cHandle, Dev->I2cDevAddr, reg, 2, &value, 1, BASE_TIMEOUT);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6858      	ldr	r0, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	b299      	uxth	r1, r3
 800587e:	887a      	ldrh	r2, [r7, #2]
 8005880:	230a      	movs	r3, #10
 8005882:	9302      	str	r3, [sp, #8]
 8005884:	2301      	movs	r3, #1
 8005886:	9301      	str	r3, [sp, #4]
 8005888:	1c7b      	adds	r3, r7, #1
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	2302      	movs	r3, #2
 800588e:	f7fd f907 	bl	8002aa0 <HAL_I2C_Mem_Write>
}
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <VL53L1X_writeReg16Bit>:

void VL53L1X_writeReg16Bit(VL53L1X_DEV Dev, uint16_t reg, uint16_t value)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b088      	sub	sp, #32
 800589e:	af04      	add	r7, sp, #16
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	460b      	mov	r3, r1
 80058a4:	807b      	strh	r3, [r7, #2]
 80058a6:	4613      	mov	r3, r2
 80058a8:	803b      	strh	r3, [r7, #0]
	uint8_t tmp [2];
	*tmp = value>>8;
 80058aa:	883b      	ldrh	r3, [r7, #0]
 80058ac:	0a1b      	lsrs	r3, r3, #8
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	733b      	strb	r3, [r7, #12]
	tmp[1] = value & 0x00FF;
 80058b4:	883b      	ldrh	r3, [r7, #0]
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(Dev->I2cHandle, Dev->I2cDevAddr, reg, 2, tmp, 2, BASE_TIMEOUT+2*BYTE_TIMEOUT);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6858      	ldr	r0, [r3, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	b299      	uxth	r1, r3
 80058c4:	887a      	ldrh	r2, [r7, #2]
 80058c6:	230c      	movs	r3, #12
 80058c8:	9302      	str	r3, [sp, #8]
 80058ca:	2302      	movs	r3, #2
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	f107 030c 	add.w	r3, r7, #12
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	2302      	movs	r3, #2
 80058d6:	f7fd f8e3 	bl	8002aa0 <HAL_I2C_Mem_Write>
}
 80058da:	bf00      	nop
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <VL53L1X_writeReg32Bit>:
void VL53L1X_writeReg32Bit(VL53L1X_DEV Dev, uint16_t reg, uint32_t value)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b08a      	sub	sp, #40	; 0x28
 80058e6:	af04      	add	r7, sp, #16
 80058e8:	60f8      	str	r0, [r7, #12]
 80058ea:	460b      	mov	r3, r1
 80058ec:	607a      	str	r2, [r7, #4]
 80058ee:	817b      	strh	r3, [r7, #10]
	uint8_t tmp [4];
	*tmp = (value>>24) & 0xFF;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	0e1b      	lsrs	r3, r3, #24
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	753b      	strb	r3, [r7, #20]
	tmp[1] = (value>>16) & 0xFF;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	0c1b      	lsrs	r3, r3, #16
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	757b      	strb	r3, [r7, #21]
	tmp[2] = (value>>8) & 0xFF;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	0a1b      	lsrs	r3, r3, #8
 8005904:	b2db      	uxtb	r3, r3
 8005906:	75bb      	strb	r3, [r7, #22]
	tmp[3] = (value>0) & 0xFF;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	bf14      	ite	ne
 800590e:	2301      	movne	r3, #1
 8005910:	2300      	moveq	r3, #0
 8005912:	b2db      	uxtb	r3, r3
 8005914:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(Dev->I2cHandle, Dev->I2cDevAddr, reg, 2, tmp, 4, BASE_TIMEOUT+4*BYTE_TIMEOUT);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6858      	ldr	r0, [r3, #4]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	b299      	uxth	r1, r3
 8005920:	897a      	ldrh	r2, [r7, #10]
 8005922:	230e      	movs	r3, #14
 8005924:	9302      	str	r3, [sp, #8]
 8005926:	2304      	movs	r3, #4
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	f107 0314 	add.w	r3, r7, #20
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	2302      	movs	r3, #2
 8005932:	f7fd f8b5 	bl	8002aa0 <HAL_I2C_Mem_Write>
}
 8005936:	bf00      	nop
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <VL53L1X_readReg>:

uint8_t VL53L1X_readReg(VL53L1X_DEV Dev, uint16_t reg)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b088      	sub	sp, #32
 8005942:	af04      	add	r7, sp, #16
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	460b      	mov	r3, r1
 8005948:	807b      	strh	r3, [r7, #2]
	uint8_t value;
	HAL_I2C_Mem_Read(Dev->I2cHandle, Dev->I2cDevAddr, reg, 2, &value, 1, BASE_TIMEOUT);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6858      	ldr	r0, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	b299      	uxth	r1, r3
 8005954:	887a      	ldrh	r2, [r7, #2]
 8005956:	230a      	movs	r3, #10
 8005958:	9302      	str	r3, [sp, #8]
 800595a:	2301      	movs	r3, #1
 800595c:	9301      	str	r3, [sp, #4]
 800595e:	f107 030f 	add.w	r3, r7, #15
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	2302      	movs	r3, #2
 8005966:	f7fd f9af 	bl	8002cc8 <HAL_I2C_Mem_Read>
	return value;
 800596a:	7bfb      	ldrb	r3, [r7, #15]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <VL53L1X_readReg16Bit>:

uint16_t VL53L1X_readReg16Bit(VL53L1X_DEV Dev, uint16_t reg)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af04      	add	r7, sp, #16
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	807b      	strh	r3, [r7, #2]
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(Dev->I2cHandle, Dev->I2cDevAddr, reg, 2, tmp, 2, BASE_TIMEOUT+2*BYTE_TIMEOUT);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6858      	ldr	r0, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	b299      	uxth	r1, r3
 800598a:	887a      	ldrh	r2, [r7, #2]
 800598c:	230c      	movs	r3, #12
 800598e:	9302      	str	r3, [sp, #8]
 8005990:	2302      	movs	r3, #2
 8005992:	9301      	str	r3, [sp, #4]
 8005994:	f107 030c 	add.w	r3, r7, #12
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	2302      	movs	r3, #2
 800599c:	f7fd f994 	bl	8002cc8 <HAL_I2C_Mem_Read>
	return tmp[0]<<8 | tmp[1];
 80059a0:	7b3b      	ldrb	r3, [r7, #12]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	b21a      	sxth	r2, r3
 80059a6:	7b7b      	ldrb	r3, [r7, #13]
 80059a8:	b21b      	sxth	r3, r3
 80059aa:	4313      	orrs	r3, r2
 80059ac:	b21b      	sxth	r3, r3
 80059ae:	b29b      	uxth	r3, r3
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <VL53L1X_init>:
	return (tmp[0]<<24) | (tmp[1]<<16) | (tmp[2])<<8 | tmp[3];
}


VL53L1X_Status VL53L1X_init(VL53L1X_DEV Dev)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	Dev->calibrated = false;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	735a      	strb	r2, [r3, #13]
	Dev->fast_osc_frequency = 0;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	811a      	strh	r2, [r3, #8]
	Dev->osc_calibrate_val = 0;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	815a      	strh	r2, [r3, #10]
	Dev->distance_mode = Unknown;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2203      	movs	r2, #3
 80059d6:	731a      	strb	r2, [r3, #12]
	Dev->saved_vhv_init = 0;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	739a      	strb	r2, [r3, #14]
	Dev->saved_vhv_timeout = 0;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	73da      	strb	r2, [r3, #15]
	Dev->I2cDevAddr = VL53L1X_ADDRESS_DEFAULT;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2252      	movs	r2, #82	; 0x52
 80059e8:	701a      	strb	r2, [r3, #0]

	VL53L1X_writeReg(Dev, VL53L1_SOFT_RESET, 0x00);
 80059ea:	2200      	movs	r2, #0
 80059ec:	2100      	movs	r1, #0
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff ff38 	bl	8005864 <VL53L1X_writeReg>
	HAL_Delay(100);
 80059f4:	2064      	movs	r0, #100	; 0x64
 80059f6:	f7fb fe5b 	bl	80016b0 <HAL_Delay>
	VL53L1X_writeReg(Dev, VL53L1_SOFT_RESET, 0x01);
 80059fa:	2201      	movs	r2, #1
 80059fc:	2100      	movs	r1, #0
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff ff30 	bl	8005864 <VL53L1X_writeReg>

	HAL_Delay(1000);
 8005a04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a08:	f7fb fe52 	bl	80016b0 <HAL_Delay>


	if (VL53L1X_readReg16Bit(Dev, VL53L1_IDENTIFICATION__MODEL_ID) != 0xEACC)
 8005a0c:	f240 110f 	movw	r1, #271	; 0x10f
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff ffaf 	bl	8005974 <VL53L1X_readReg16Bit>
 8005a16:	4603      	mov	r3, r0
 8005a18:	461a      	mov	r2, r3
 8005a1a:	f64e 23cc 	movw	r3, #60108	; 0xeacc
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d001      	beq.n	8005a26 <VL53L1X_init+0x6e>
		return VL53L1X_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e0b1      	b.n	8005b8a <VL53L1X_init+0x1d2>

	uint8_t i = 0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	73fb      	strb	r3, [r7, #15]
	while((VL53L1X_readReg(Dev, VL53L1_FIRMWARE__SYSTEM_STATUS) & 0x01) == 0 && i < 50)
 8005a2a:	e005      	b.n	8005a38 <VL53L1X_init+0x80>
	{
		HAL_Delay(10);
 8005a2c:	200a      	movs	r0, #10
 8005a2e:	f7fb fe3f 	bl	80016b0 <HAL_Delay>
		i++;
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	3301      	adds	r3, #1
 8005a36:	73fb      	strb	r3, [r7, #15]
	while((VL53L1X_readReg(Dev, VL53L1_FIRMWARE__SYSTEM_STATUS) & 0x01) == 0 && i < 50)
 8005a38:	21e5      	movs	r1, #229	; 0xe5
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7ff ff7f 	bl	800593e <VL53L1X_readReg>
 8005a40:	4603      	mov	r3, r0
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d102      	bne.n	8005a50 <VL53L1X_init+0x98>
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	2b31      	cmp	r3, #49	; 0x31
 8005a4e:	d9ed      	bls.n	8005a2c <VL53L1X_init+0x74>
	}
	if((VL53L1X_readReg(Dev, VL53L1_FIRMWARE__SYSTEM_STATUS) & 0x01) == 0)
 8005a50:	21e5      	movs	r1, #229	; 0xe5
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff ff73 	bl	800593e <VL53L1X_readReg>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <VL53L1X_init+0xae>
		return VL53L1X_TIMEOUT;
 8005a62:	2302      	movs	r3, #2
 8005a64:	e091      	b.n	8005b8a <VL53L1X_init+0x1d2>

	Dev->fast_osc_frequency = VL53L1X_readReg16Bit(Dev, VL53L1_OSC_MEASURED__FAST_OSC__FREQUENCY);
 8005a66:	2106      	movs	r1, #6
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff ff83 	bl	8005974 <VL53L1X_readReg16Bit>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	461a      	mov	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	811a      	strh	r2, [r3, #8]
	Dev->osc_calibrate_val = VL53L1X_readReg16Bit(Dev, VL53L1_RESULT__OSC_CALIBRATE_VAL);
 8005a76:	21de      	movs	r1, #222	; 0xde
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff ff7b 	bl	8005974 <VL53L1X_readReg16Bit>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	461a      	mov	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	815a      	strh	r2, [r3, #10]

	VL53L1X_writeReg16Bit(Dev, VL53L1_DSS_CONFIG__TARGET_TOTAL_RATE_MCPS, VL53L1X_TARGET_RATE);
 8005a86:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005a8a:	2124      	movs	r1, #36	; 0x24
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7ff ff04 	bl	800589a <VL53L1X_writeReg16Bit>
	VL53L1X_writeReg(Dev, VL53L1_GPIO__TIO_HV_STATUS, 0x02);
 8005a92:	2202      	movs	r2, #2
 8005a94:	2131      	movs	r1, #49	; 0x31
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff fee4 	bl	8005864 <VL53L1X_writeReg>
	VL53L1X_writeReg(Dev, VL53L1_SIGMA_ESTIMATOR__EFFECTIVE_PULSE_WIDTH_NS, 8);
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	2136      	movs	r1, #54	; 0x36
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff fedf 	bl	8005864 <VL53L1X_writeReg>
	VL53L1X_writeReg(Dev, VL53L1_SIGMA_ESTIMATOR__EFFECTIVE_AMBIENT_WIDTH_NS, 16);
 8005aa6:	2210      	movs	r2, #16
 8005aa8:	2137      	movs	r1, #55	; 0x37
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff feda 	bl	8005864 <VL53L1X_writeReg>
	VL53L1X_writeReg(Dev, VL53L1_ALGO__CROSSTALK_COMPENSATION_VALID_HEIGHT_MM, 0x01);
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	2139      	movs	r1, #57	; 0x39
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7ff fed5 	bl	8005864 <VL53L1X_writeReg>
	VL53L1X_writeReg(Dev, VL53L1_ALGO__RANGE_IGNORE_VALID_HEIGHT_MM, 0xFF);
 8005aba:	22ff      	movs	r2, #255	; 0xff
 8005abc:	213e      	movs	r1, #62	; 0x3e
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff fed0 	bl	8005864 <VL53L1X_writeReg>
	VL53L1X_writeReg(Dev, VL53L1_ALGO__RANGE_MIN_CLIP, 0);
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	213f      	movs	r1, #63	; 0x3f
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff fecb 	bl	8005864 <VL53L1X_writeReg>
	VL53L1X_writeReg(Dev, VL53L1_ALGO__CONSISTENCY_CHECK__TOLERANCE, 2);
 8005ace:	2202      	movs	r2, #2
 8005ad0:	2140      	movs	r1, #64	; 0x40
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7ff fec6 	bl	8005864 <VL53L1X_writeReg>
	VL53L1X_writeReg16Bit(Dev, VL53L1_SYSTEM__THRESH_RATE_HIGH, 0x0000);
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2150      	movs	r1, #80	; 0x50
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7ff fedc 	bl	800589a <VL53L1X_writeReg16Bit>
	VL53L1X_writeReg16Bit(Dev, VL53L1_SYSTEM__THRESH_RATE_LOW, 0x0000);
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	2152      	movs	r1, #82	; 0x52
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff fed7 	bl	800589a <VL53L1X_writeReg16Bit>
	VL53L1X_writeReg(Dev, VL53L1_DSS_CONFIG__APERTURE_ATTENUATION, 0x38);
 8005aec:	2238      	movs	r2, #56	; 0x38
 8005aee:	2157      	movs	r1, #87	; 0x57
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff feb7 	bl	8005864 <VL53L1X_writeReg>
	VL53L1X_writeReg16Bit(Dev, VL53L1_RANGE_CONFIG__SIGMA_THRESH, 360);
 8005af6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8005afa:	2164      	movs	r1, #100	; 0x64
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff fecc 	bl	800589a <VL53L1X_writeReg16Bit>
	VL53L1X_writeReg16Bit(Dev, VL53L1_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS, 192);
 8005b02:	22c0      	movs	r2, #192	; 0xc0
 8005b04:	2166      	movs	r1, #102	; 0x66
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff fec7 	bl	800589a <VL53L1X_writeReg16Bit>
	VL53L1X_writeReg(Dev, VL53L1_SYSTEM__GROUPED_PARAMETER_HOLD_0, 0x01);
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	2171      	movs	r1, #113	; 0x71
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff fea7 	bl	8005864 <VL53L1X_writeReg>
	VL53L1X_writeReg(Dev, VL53L1_SYSTEM__GROUPED_PARAMETER_HOLD_1, 0x01);
 8005b16:	2201      	movs	r2, #1
 8005b18:	217c      	movs	r1, #124	; 0x7c
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff fea2 	bl	8005864 <VL53L1X_writeReg>
	VL53L1X_writeReg(Dev, VL53L1_SD_CONFIG__QUANTIFIER, 2);
 8005b20:	2202      	movs	r2, #2
 8005b22:	217e      	movs	r1, #126	; 0x7e
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff fe9d 	bl	8005864 <VL53L1X_writeReg>
	VL53L1X_writeReg(Dev, VL53L1_SYSTEM__GROUPED_PARAMETER_HOLD, 0x00);
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2182      	movs	r1, #130	; 0x82
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7ff fe98 	bl	8005864 <VL53L1X_writeReg>
	VL53L1X_writeReg(Dev, VL53L1_SYSTEM__SEED_CONFIG, 1);
 8005b34:	2201      	movs	r2, #1
 8005b36:	2177      	movs	r1, #119	; 0x77
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7ff fe93 	bl	8005864 <VL53L1X_writeReg>
	VL53L1X_writeReg(Dev, VL53L1_SYSTEM__SEQUENCE_CONFIG, 0x8B);
 8005b3e:	228b      	movs	r2, #139	; 0x8b
 8005b40:	2181      	movs	r1, #129	; 0x81
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff fe8e 	bl	8005864 <VL53L1X_writeReg>
	VL53L1X_writeReg16Bit(Dev, VL53L1_DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT, 200 << 8);
 8005b48:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8005b4c:	2154      	movs	r1, #84	; 0x54
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7ff fea3 	bl	800589a <VL53L1X_writeReg16Bit>
	VL53L1X_writeReg(Dev, VL53L1_DSS_CONFIG__ROI_MODE_CONTROL, 2);
 8005b54:	2202      	movs	r2, #2
 8005b56:	214f      	movs	r1, #79	; 0x4f
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff fe83 	bl	8005864 <VL53L1X_writeReg>

	VL53L1X_setDistanceMode(Dev, Short);
 8005b5e:	2100      	movs	r1, #0
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f82e 	bl	8005bc2 <VL53L1X_setDistanceMode>
	VL53L1X_setMeasurementTimingBudget(Dev, 50000);
 8005b66:	f24c 3150 	movw	r1, #50000	; 0xc350
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f904 	bl	8005d78 <VL53L1X_setMeasurementTimingBudget>
	VL53L1X_writeReg16Bit(Dev, VL53L1_ALGO__PART_TO_PART_RANGE_OFFSET_MM,
			VL53L1X_readReg16Bit(Dev, VL53L1_MM_CONFIG__OUTER_OFFSET_MM) * 4);
 8005b70:	2122      	movs	r1, #34	; 0x22
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff fefe 	bl	8005974 <VL53L1X_readReg16Bit>
 8005b78:	4603      	mov	r3, r0
	VL53L1X_writeReg16Bit(Dev, VL53L1_ALGO__PART_TO_PART_RANGE_OFFSET_MM,
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	211e      	movs	r1, #30
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff fe89 	bl	800589a <VL53L1X_writeReg16Bit>

	return VL53L1X_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <VL53L1X_setAddress>:

void VL53L1X_setAddress(VL53L1X_DEV Dev, uint8_t new_addr)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b082      	sub	sp, #8
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	70fb      	strb	r3, [r7, #3]
	VL53L1X_writeReg(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_addr & 0x7F);
 8005b9e:	78fb      	ldrb	r3, [r7, #3]
 8005ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	2101      	movs	r1, #1
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff fe5a 	bl	8005864 <VL53L1X_writeReg>
	Dev->I2cDevAddr = new_addr<<1;
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	701a      	strb	r2, [r3, #0]
}
 8005bba:	bf00      	nop
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <VL53L1X_setDistanceMode>:

VL53L1X_Status VL53L1X_setDistanceMode(VL53L1X_DEV Dev, DistanceMode mode)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b084      	sub	sp, #16
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
 8005bca:	460b      	mov	r3, r1
 8005bcc:	70fb      	strb	r3, [r7, #3]
	uint32_t budget_us = VL53L1X_getMeasurementTimingBudget(Dev);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f8ad 	bl	8005d2e <VL53L1X_getMeasurementTimingBudget>
 8005bd4:	60f8      	str	r0, [r7, #12]

	switch (mode)
 8005bd6:	78fb      	ldrb	r3, [r7, #3]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d027      	beq.n	8005c2c <VL53L1X_setDistanceMode+0x6a>
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d049      	beq.n	8005c74 <VL53L1X_setDistanceMode+0xb2>
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d16b      	bne.n	8005cbc <VL53L1X_setDistanceMode+0xfa>
	  {
	    case Short:
	    	VL53L1X_writeReg(Dev, VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 8005be4:	2207      	movs	r2, #7
 8005be6:	2160      	movs	r1, #96	; 0x60
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7ff fe3b 	bl	8005864 <VL53L1X_writeReg>
	    	VL53L1X_writeReg(Dev, VL53L1_RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 8005bee:	2205      	movs	r2, #5
 8005bf0:	2163      	movs	r1, #99	; 0x63
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff fe36 	bl	8005864 <VL53L1X_writeReg>
	    	VL53L1X_writeReg(Dev, VL53L1_RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 8005bf8:	2238      	movs	r2, #56	; 0x38
 8005bfa:	2169      	movs	r1, #105	; 0x69
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7ff fe31 	bl	8005864 <VL53L1X_writeReg>
	    	VL53L1X_writeReg(Dev, VL53L1_SD_CONFIG__WOI_SD0, 0x07);
 8005c02:	2207      	movs	r2, #7
 8005c04:	2178      	movs	r1, #120	; 0x78
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7ff fe2c 	bl	8005864 <VL53L1X_writeReg>
	    	VL53L1X_writeReg(Dev, VL53L1_SD_CONFIG__WOI_SD1, 0x05);
 8005c0c:	2205      	movs	r2, #5
 8005c0e:	2179      	movs	r1, #121	; 0x79
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff fe27 	bl	8005864 <VL53L1X_writeReg>
	    	VL53L1X_writeReg(Dev, VL53L1_SD_CONFIG__INITIAL_PHASE_SD0, 6);
 8005c16:	2206      	movs	r2, #6
 8005c18:	217a      	movs	r1, #122	; 0x7a
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff fe22 	bl	8005864 <VL53L1X_writeReg>
	    	VL53L1X_writeReg(Dev, VL53L1_SD_CONFIG__INITIAL_PHASE_SD1, 6);
 8005c20:	2206      	movs	r2, #6
 8005c22:	217b      	movs	r1, #123	; 0x7b
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7ff fe1d 	bl	8005864 <VL53L1X_writeReg>

	    	break;
 8005c2a:	e049      	b.n	8005cc0 <VL53L1X_setDistanceMode+0xfe>

	    case Medium:
	    	VL53L1X_writeReg(Dev, VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A, 0x0B);
 8005c2c:	220b      	movs	r2, #11
 8005c2e:	2160      	movs	r1, #96	; 0x60
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff fe17 	bl	8005864 <VL53L1X_writeReg>
	    	VL53L1X_writeReg(Dev, VL53L1_RANGE_CONFIG__VCSEL_PERIOD_B, 0x09);
 8005c36:	2209      	movs	r2, #9
 8005c38:	2163      	movs	r1, #99	; 0x63
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff fe12 	bl	8005864 <VL53L1X_writeReg>
	    	VL53L1X_writeReg(Dev, VL53L1_RANGE_CONFIG__VALID_PHASE_HIGH, 0x78);
 8005c40:	2278      	movs	r2, #120	; 0x78
 8005c42:	2169      	movs	r1, #105	; 0x69
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7ff fe0d 	bl	8005864 <VL53L1X_writeReg>
	    	VL53L1X_writeReg(Dev, VL53L1_SD_CONFIG__WOI_SD0, 0x0B);
 8005c4a:	220b      	movs	r2, #11
 8005c4c:	2178      	movs	r1, #120	; 0x78
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7ff fe08 	bl	8005864 <VL53L1X_writeReg>
	    	VL53L1X_writeReg(Dev, VL53L1_SD_CONFIG__WOI_SD1, 0x09);
 8005c54:	2209      	movs	r2, #9
 8005c56:	2179      	movs	r1, #121	; 0x79
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff fe03 	bl	8005864 <VL53L1X_writeReg>
	    	VL53L1X_writeReg(Dev, VL53L1_SD_CONFIG__INITIAL_PHASE_SD0, 10);
 8005c5e:	220a      	movs	r2, #10
 8005c60:	217a      	movs	r1, #122	; 0x7a
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff fdfe 	bl	8005864 <VL53L1X_writeReg>
	    	VL53L1X_writeReg(Dev, VL53L1_SD_CONFIG__INITIAL_PHASE_SD1, 10);
 8005c68:	220a      	movs	r2, #10
 8005c6a:	217b      	movs	r1, #123	; 0x7b
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff fdf9 	bl	8005864 <VL53L1X_writeReg>

	    	break;
 8005c72:	e025      	b.n	8005cc0 <VL53L1X_setDistanceMode+0xfe>

	    case Long:
	    	VL53L1X_writeReg(Dev, VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 8005c74:	220f      	movs	r2, #15
 8005c76:	2160      	movs	r1, #96	; 0x60
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7ff fdf3 	bl	8005864 <VL53L1X_writeReg>
	    	VL53L1X_writeReg(Dev, VL53L1_RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8005c7e:	220d      	movs	r2, #13
 8005c80:	2163      	movs	r1, #99	; 0x63
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7ff fdee 	bl	8005864 <VL53L1X_writeReg>
	    	VL53L1X_writeReg(Dev, VL53L1_RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 8005c88:	22b8      	movs	r2, #184	; 0xb8
 8005c8a:	2169      	movs	r1, #105	; 0x69
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff fde9 	bl	8005864 <VL53L1X_writeReg>
	    	VL53L1X_writeReg(Dev, VL53L1_SD_CONFIG__WOI_SD0, 0x0F);
 8005c92:	220f      	movs	r2, #15
 8005c94:	2178      	movs	r1, #120	; 0x78
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7ff fde4 	bl	8005864 <VL53L1X_writeReg>
	    	VL53L1X_writeReg(Dev, VL53L1_SD_CONFIG__WOI_SD1, 0x0D);
 8005c9c:	220d      	movs	r2, #13
 8005c9e:	2179      	movs	r1, #121	; 0x79
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff fddf 	bl	8005864 <VL53L1X_writeReg>
	    	VL53L1X_writeReg(Dev, VL53L1_SD_CONFIG__INITIAL_PHASE_SD0, 14);
 8005ca6:	220e      	movs	r2, #14
 8005ca8:	217a      	movs	r1, #122	; 0x7a
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7ff fdda 	bl	8005864 <VL53L1X_writeReg>
	    	VL53L1X_writeReg(Dev, VL53L1_SD_CONFIG__INITIAL_PHASE_SD1, 14);
 8005cb0:	220e      	movs	r2, #14
 8005cb2:	217b      	movs	r1, #123	; 0x7b
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff fdd5 	bl	8005864 <VL53L1X_writeReg>

	    	break;
 8005cba:	e001      	b.n	8005cc0 <VL53L1X_setDistanceMode+0xfe>

	    default:
	      return VL53L1X_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e007      	b.n	8005cd0 <VL53L1X_setDistanceMode+0x10e>
	  }
	VL53L1X_setMeasurementTimingBudget(Dev, budget_us);
 8005cc0:	68f9      	ldr	r1, [r7, #12]
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f858 	bl	8005d78 <VL53L1X_setMeasurementTimingBudget>

	Dev->distance_mode = mode;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	78fa      	ldrb	r2, [r7, #3]
 8005ccc:	731a      	strb	r2, [r3, #12]


	return VL53L1X_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <VL53L1X_calcMacroPeriod>:

uint32_t VL53L1X_calcMacroPeriod(VL53L1X_DEV Dev, uint8_t vcsel_period)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	70fb      	strb	r3, [r7, #3]
	uint32_t pll_period_us = ((uint32_t)0x01 << 30) / Dev->fast_osc_frequency;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	891b      	ldrh	r3, [r3, #8]
 8005ce8:	461a      	mov	r2, r3
 8005cea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]
	uint8_t vcsel_period_pclks = (vcsel_period + 1) << 1;
 8005cf4:	78fb      	ldrb	r3, [r7, #3]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	74fb      	strb	r3, [r7, #19]
	uint32_t macro_period_us = (uint32_t)2304 * pll_period_us;
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4613      	mov	r3, r2
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	4413      	add	r3, r2
 8005d06:	021b      	lsls	r3, r3, #8
 8005d08:	60fb      	str	r3, [r7, #12]
	macro_period_us >>= 6;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	099b      	lsrs	r3, r3, #6
 8005d0e:	60fb      	str	r3, [r7, #12]
	macro_period_us *= vcsel_period_pclks;
 8005d10:	7cfa      	ldrb	r2, [r7, #19]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	fb02 f303 	mul.w	r3, r2, r3
 8005d18:	60fb      	str	r3, [r7, #12]
	macro_period_us >>= 6;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	099b      	lsrs	r3, r3, #6
 8005d1e:	60fb      	str	r3, [r7, #12]

	return macro_period_us;
 8005d20:	68fb      	ldr	r3, [r7, #12]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <VL53L1X_getMeasurementTimingBudget>:

uint32_t VL53L1X_getMeasurementTimingBudget(VL53L1X_DEV Dev)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b084      	sub	sp, #16
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
	uint32_t macro_period_us = VL53L1X_calcMacroPeriod(Dev, VL53L1X_readReg(Dev, VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A));
 8005d36:	2160      	movs	r1, #96	; 0x60
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff fe00 	bl	800593e <VL53L1X_readReg>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	4619      	mov	r1, r3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7ff ffc8 	bl	8005cd8 <VL53L1X_calcMacroPeriod>
 8005d48:	60f8      	str	r0, [r7, #12]

	uint32_t range_config_timeout_us = VL53L1X_timeoutMclksToMicroseconds(VL53L1X_decodeTimeout(
 8005d4a:	215e      	movs	r1, #94	; 0x5e
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff fe11 	bl	8005974 <VL53L1X_readReg16Bit>
 8005d52:	4603      	mov	r3, r0
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 f8c6 	bl	8005ee6 <VL53L1X_decodeTimeout>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	68f9      	ldr	r1, [r7, #12]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 f88c 	bl	8005e7c <VL53L1X_timeoutMclksToMicroseconds>
 8005d64:	60b8      	str	r0, [r7, #8]
	  VL53L1X_readReg16Bit(Dev, VL53L1_RANGE_CONFIG__TIMEOUT_MACROP_A_HI)), macro_period_us);

	return  2 * range_config_timeout_us + VL53L1X_TIMING_GUARD;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8005d6c:	005b      	lsls	r3, r3, #1
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <VL53L1X_setMeasurementTimingBudget>:


VL53L1X_Status VL53L1X_setMeasurementTimingBudget(VL53L1X_DEV Dev, uint32_t budget_us)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
	if(budget_us < VL53L1X_TIMING_GUARD)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	f241 12af 	movw	r2, #4527	; 0x11af
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d801      	bhi.n	8005d90 <VL53L1X_setMeasurementTimingBudget+0x18>
		return VL53L1X_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e06e      	b.n	8005e6e <VL53L1X_setMeasurementTimingBudget+0xf6>

	uint32_t range_config_timeout_us = budget_us -= VL53L1X_TIMING_GUARD;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	f5a3 538d 	sub.w	r3, r3, #4512	; 0x11a0
 8005d96:	3b10      	subs	r3, #16
 8005d98:	603b      	str	r3, [r7, #0]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	613b      	str	r3, [r7, #16]
	if (range_config_timeout_us > 1100000)
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	4a35      	ldr	r2, [pc, #212]	; (8005e78 <VL53L1X_setMeasurementTimingBudget+0x100>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d901      	bls.n	8005daa <VL53L1X_setMeasurementTimingBudget+0x32>
		return VL53L1X_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e061      	b.n	8005e6e <VL53L1X_setMeasurementTimingBudget+0xf6>

	range_config_timeout_us /= 2;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	085b      	lsrs	r3, r3, #1
 8005dae:	613b      	str	r3, [r7, #16]
	uint32_t macro_period_us;

	macro_period_us = VL53L1X_calcMacroPeriod(Dev, VL53L1X_readReg(Dev, VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A));
 8005db0:	2160      	movs	r1, #96	; 0x60
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff fdc3 	bl	800593e <VL53L1X_readReg>
 8005db8:	4603      	mov	r3, r0
 8005dba:	4619      	mov	r1, r3
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff ff8b 	bl	8005cd8 <VL53L1X_calcMacroPeriod>
 8005dc2:	60f8      	str	r0, [r7, #12]
	uint32_t phasecal_timeout_mclks = VL53L1X_timeoutMicrosecondsToMclks(1000, macro_period_us);
 8005dc4:	68f9      	ldr	r1, [r7, #12]
 8005dc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005dca:	f000 f879 	bl	8005ec0 <VL53L1X_timeoutMicrosecondsToMclks>
 8005dce:	6178      	str	r0, [r7, #20]
	if (phasecal_timeout_mclks > 0xFF)
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2bff      	cmp	r3, #255	; 0xff
 8005dd4:	d901      	bls.n	8005dda <VL53L1X_setMeasurementTimingBudget+0x62>
		phasecal_timeout_mclks = 0xFF;
 8005dd6:	23ff      	movs	r3, #255	; 0xff
 8005dd8:	617b      	str	r3, [r7, #20]

	VL53L1X_writeReg(Dev, VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP, phasecal_timeout_mclks);
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	214b      	movs	r1, #75	; 0x4b
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7ff fd3e 	bl	8005864 <VL53L1X_writeReg>
	VL53L1X_writeReg16Bit(Dev, VL53L1_MM_CONFIG__TIMEOUT_MACROP_A_HI, VL53L1X_encodeTimeout(
 8005de8:	68f9      	ldr	r1, [r7, #12]
 8005dea:	2001      	movs	r0, #1
 8005dec:	f000 f868 	bl	8005ec0 <VL53L1X_timeoutMicrosecondsToMclks>
 8005df0:	4603      	mov	r3, r0
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 f889 	bl	8005f0a <VL53L1X_encodeTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	215a      	movs	r1, #90	; 0x5a
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff fd4b 	bl	800589a <VL53L1X_writeReg16Bit>
			VL53L1X_timeoutMicrosecondsToMclks(1, macro_period_us)));
	VL53L1X_writeReg16Bit(Dev, VL53L1_RANGE_CONFIG__TIMEOUT_MACROP_A_HI, VL53L1X_encodeTimeout(
 8005e04:	68f9      	ldr	r1, [r7, #12]
 8005e06:	6938      	ldr	r0, [r7, #16]
 8005e08:	f000 f85a 	bl	8005ec0 <VL53L1X_timeoutMicrosecondsToMclks>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 f87b 	bl	8005f0a <VL53L1X_encodeTimeout>
 8005e14:	4603      	mov	r3, r0
 8005e16:	461a      	mov	r2, r3
 8005e18:	215e      	movs	r1, #94	; 0x5e
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff fd3d 	bl	800589a <VL53L1X_writeReg16Bit>
	    VL53L1X_timeoutMicrosecondsToMclks(range_config_timeout_us, macro_period_us)));

	macro_period_us = VL53L1X_calcMacroPeriod(Dev, VL53L1X_readReg(Dev, VL53L1_RANGE_CONFIG__VCSEL_PERIOD_B));
 8005e20:	2163      	movs	r1, #99	; 0x63
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff fd8b 	bl	800593e <VL53L1X_readReg>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff ff53 	bl	8005cd8 <VL53L1X_calcMacroPeriod>
 8005e32:	60f8      	str	r0, [r7, #12]

	VL53L1X_writeReg16Bit(Dev, VL53L1_MM_CONFIG__TIMEOUT_MACROP_B_HI, VL53L1X_encodeTimeout(
 8005e34:	68f9      	ldr	r1, [r7, #12]
 8005e36:	2001      	movs	r0, #1
 8005e38:	f000 f842 	bl	8005ec0 <VL53L1X_timeoutMicrosecondsToMclks>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 f863 	bl	8005f0a <VL53L1X_encodeTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	461a      	mov	r2, r3
 8005e48:	215c      	movs	r1, #92	; 0x5c
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff fd25 	bl	800589a <VL53L1X_writeReg16Bit>
	    VL53L1X_timeoutMicrosecondsToMclks(1, macro_period_us)));

	VL53L1X_writeReg16Bit(Dev, VL53L1_RANGE_CONFIG__TIMEOUT_MACROP_B_HI, VL53L1X_encodeTimeout(
 8005e50:	68f9      	ldr	r1, [r7, #12]
 8005e52:	6938      	ldr	r0, [r7, #16]
 8005e54:	f000 f834 	bl	8005ec0 <VL53L1X_timeoutMicrosecondsToMclks>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 f855 	bl	8005f0a <VL53L1X_encodeTimeout>
 8005e60:	4603      	mov	r3, r0
 8005e62:	461a      	mov	r2, r3
 8005e64:	2161      	movs	r1, #97	; 0x61
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff fd17 	bl	800589a <VL53L1X_writeReg16Bit>
	    VL53L1X_timeoutMicrosecondsToMclks(range_config_timeout_us, macro_period_us)));


	return VL53L1X_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	0010c8e0 	.word	0x0010c8e0

08005e7c <VL53L1X_timeoutMclksToMicroseconds>:

uint32_t VL53L1X_timeoutMclksToMicroseconds(uint32_t timeout_mclks, uint32_t macro_period_us)
{
 8005e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
	  return ((uint64_t)timeout_mclks * macro_period_us + 0x800) >> 12;
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	4615      	mov	r5, r2
 8005e8a:	f04f 0600 	mov.w	r6, #0
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	4611      	mov	r1, r2
 8005e92:	f04f 0200 	mov.w	r2, #0
 8005e96:	fb01 fe06 	mul.w	lr, r1, r6
 8005e9a:	fb05 f002 	mul.w	r0, r5, r2
 8005e9e:	4470      	add	r0, lr
 8005ea0:	fba5 1201 	umull	r1, r2, r5, r1
 8005ea4:	4410      	add	r0, r2
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	f511 6100 	adds.w	r1, r1, #2048	; 0x800
 8005eac:	f142 0200 	adc.w	r2, r2, #0
 8005eb0:	0b0b      	lsrs	r3, r1, #12
 8005eb2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005eb6:	0b14      	lsrs	r4, r2, #12
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ec0 <VL53L1X_timeoutMicrosecondsToMclks>:
uint32_t VL53L1X_timeoutMicrosecondsToMclks(uint32_t timeout_us, uint32_t macro_period_us)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
	  return (((uint32_t)timeout_us << 12) + (macro_period_us >> 1)) / macro_period_us;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	031a      	lsls	r2, r3, #12
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	085b      	lsrs	r3, r3, #1
 8005ed2:	441a      	add	r2, r3
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <VL53L1X_decodeTimeout>:

uint32_t VL53L1X_decodeTimeout(uint16_t reg_val)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	4603      	mov	r3, r0
 8005eee:	80fb      	strh	r3, [r7, #6]
	  return ((uint32_t)(reg_val & 0xFF) << (reg_val >> 8)) + 1;
 8005ef0:	88fb      	ldrh	r3, [r7, #6]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	88fa      	ldrh	r2, [r7, #6]
 8005ef6:	0a12      	lsrs	r2, r2, #8
 8005ef8:	b292      	uxth	r2, r2
 8005efa:	4093      	lsls	r3, r2
 8005efc:	3301      	adds	r3, #1

}
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <VL53L1X_encodeTimeout>:

uint16_t VL53L1X_encodeTimeout(uint32_t timeout_mclks)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b085      	sub	sp, #20
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
	 uint32_t ls_byte = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	60fb      	str	r3, [r7, #12]
	 uint16_t ms_byte = 0;
 8005f16:	2300      	movs	r3, #0
 8005f18:	817b      	strh	r3, [r7, #10]

	 if (timeout_mclks > 0)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d018      	beq.n	8005f52 <VL53L1X_encodeTimeout+0x48>
	 {
		 ls_byte = timeout_mclks - 1;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	60fb      	str	r3, [r7, #12]

		 while ((ls_byte & 0xFFFFFF00) > 0)
 8005f26:	e005      	b.n	8005f34 <VL53L1X_encodeTimeout+0x2a>
		 {
			 ls_byte >>= 1;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	085b      	lsrs	r3, r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]
			 ms_byte++;
 8005f2e:	897b      	ldrh	r3, [r7, #10]
 8005f30:	3301      	adds	r3, #1
 8005f32:	817b      	strh	r3, [r7, #10]
		 while ((ls_byte & 0xFFFFFF00) > 0)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1f4      	bne.n	8005f28 <VL53L1X_encodeTimeout+0x1e>
		 }

		 return (ms_byte << 8) | (ls_byte & 0xFF);
 8005f3e:	897b      	ldrh	r3, [r7, #10]
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	e000      	b.n	8005f54 <VL53L1X_encodeTimeout+0x4a>
	 }
	 	 else
	 		 return 0;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <VL53L1X_startContinuous>:


void VL53L1X_startContinuous(VL53L1X_DEV Dev, uint32_t period_ms)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
	VL53L1X_writeReg32Bit(Dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD, period_ms * Dev->osc_calibrate_val);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	895b      	ldrh	r3, [r3, #10]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	fb03 f302 	mul.w	r3, r3, r2
 8005f76:	461a      	mov	r2, r3
 8005f78:	216c      	movs	r1, #108	; 0x6c
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7ff fcb1 	bl	80058e2 <VL53L1X_writeReg32Bit>
	VL53L1X_writeReg(Dev, VL53L1_SYSTEM__INTERRUPT_CLEAR, 0x01);
 8005f80:	2201      	movs	r2, #1
 8005f82:	2186      	movs	r1, #134	; 0x86
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff fc6d 	bl	8005864 <VL53L1X_writeReg>
	VL53L1X_writeReg(Dev, VL53L1_SYSTEM__MODE_START, 0x40);
 8005f8a:	2240      	movs	r2, #64	; 0x40
 8005f8c:	2187      	movs	r1, #135	; 0x87
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff fc68 	bl	8005864 <VL53L1X_writeReg>
}
 8005f94:	bf00      	nop
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <VL53L1X_dataReady>:

	VL53L1X_writeReg(Dev, VL53L1_PHASECAL_CONFIG__OVERRIDE, 0x00);
}

VL53L1X_Status VL53L1X_dataReady(VL53L1X_DEV Dev)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
	if ((VL53L1X_readReg(Dev, VL53L1_GPIO__TIO_HV_STATUS) & 0x01) == 0)
 8005fa4:	2131      	movs	r1, #49	; 0x31
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7ff fcc9 	bl	800593e <VL53L1X_readReg>
 8005fac:	4603      	mov	r3, r0
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <VL53L1X_dataReady+0x1e>
		return VL53L1X_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e000      	b.n	8005fbc <VL53L1X_dataReady+0x20>
	return VL53L1X_ERROR;
 8005fba:	2301      	movs	r3, #1
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <VL53L1X_updateDSS>:

void VL53L1X_updateDSS(VL53L1X_DEV Dev, ResultBuffer* results)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
	  uint16_t spadCount = results->dss_actual_effective_spads_sd0;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	885b      	ldrh	r3, [r3, #2]
 8005fd2:	81fb      	strh	r3, [r7, #14]

	  if (spadCount != 0)
 8005fd4:	89fb      	ldrh	r3, [r7, #14]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d02d      	beq.n	8006036 <VL53L1X_updateDSS+0x72>
	  {
	    uint32_t totalRatePerSpad =
	      (uint32_t)results->peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +results->ambient_count_rate_mcps_sd0;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	891b      	ldrh	r3, [r3, #8]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	889b      	ldrh	r3, [r3, #4]
	    uint32_t totalRatePerSpad =
 8005fe4:	4413      	add	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]

	    if (totalRatePerSpad > 0xFFFF)
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fee:	d302      	bcc.n	8005ff6 <VL53L1X_updateDSS+0x32>
	    	totalRatePerSpad = 0xFFFF;
 8005ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ff4:	617b      	str	r3, [r7, #20]

	    totalRatePerSpad <<= 16;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	041b      	lsls	r3, r3, #16
 8005ffa:	617b      	str	r3, [r7, #20]

	    totalRatePerSpad /= spadCount;
 8005ffc:	89fb      	ldrh	r3, [r7, #14]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	fbb2 f3f3 	udiv	r3, r2, r3
 8006004:	617b      	str	r3, [r7, #20]

	    if (totalRatePerSpad != 0)
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d014      	beq.n	8006036 <VL53L1X_updateDSS+0x72>
	    {
	      uint32_t requiredSpads = ((uint32_t)VL53L1X_TARGET_RATE << 16) / totalRatePerSpad;
 800600c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	fbb2 f3f3 	udiv	r3, r2, r3
 8006016:	613b      	str	r3, [r7, #16]

	      if (requiredSpads > 0xFFFF)
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800601e:	d302      	bcc.n	8006026 <VL53L1X_updateDSS+0x62>
	    	  requiredSpads = 0xFFFF;
 8006020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006024:	613b      	str	r3, [r7, #16]

	      VL53L1X_writeReg16Bit(Dev, VL53L1_DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT, requiredSpads);
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	b29b      	uxth	r3, r3
 800602a:	461a      	mov	r2, r3
 800602c:	2154      	movs	r1, #84	; 0x54
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff fc33 	bl	800589a <VL53L1X_writeReg16Bit>

	      return;
 8006034:	e005      	b.n	8006042 <VL53L1X_updateDSS+0x7e>
	    }
	  }

	   VL53L1X_writeReg16Bit(Dev, VL53L1_DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT, 0x8000);
 8006036:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800603a:	2154      	movs	r1, #84	; 0x54
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7ff fc2c 	bl	800589a <VL53L1X_writeReg16Bit>
}
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <VL53L1X_read>:

uint16_t VL53L1X_read(VL53L1X_DEV Dev, RangingData* data, ResultBuffer* results)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
	while(VL53L1X_dataReady(Dev) != VL53L1X_OK);
 8006054:	bf00      	nop
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f7ff ffa0 	bl	8005f9c <VL53L1X_dataReady>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f9      	bne.n	8006056 <VL53L1X_read+0xe>

	VL53L1X_readResults(Dev, results);
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f85d 	bl	8006124 <VL53L1X_readResults>

	if(!Dev->calibrated)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	7b5b      	ldrb	r3, [r3, #13]
 800606e:	f083 0301 	eor.w	r3, r3, #1
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d005      	beq.n	8006084 <VL53L1X_read+0x3c>
	{
		VL53L1X_setupManualCalibration(Dev);
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 f816 	bl	80060aa <VL53L1X_setupManualCalibration>
		Dev->calibrated = true;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2201      	movs	r2, #1
 8006082:	735a      	strb	r2, [r3, #13]
	}
	VL53L1X_updateDSS(Dev, results);
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7ff ff9c 	bl	8005fc4 <VL53L1X_updateDSS>
	VL53L1X_getRangingData(data, results);
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	68b8      	ldr	r0, [r7, #8]
 8006090:	f000 f87a 	bl	8006188 <VL53L1X_getRangingData>

	VL53L1X_writeReg(Dev, VL53L1_SYSTEM__INTERRUPT_CLEAR, 0x01);
 8006094:	2201      	movs	r2, #1
 8006096:	2186      	movs	r1, #134	; 0x86
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f7ff fbe3 	bl	8005864 <VL53L1X_writeReg>

	return data->range_mm;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	881b      	ldrh	r3, [r3, #0]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <VL53L1X_setupManualCalibration>:

void VL53L1X_setupManualCalibration(VL53L1X_DEV Dev)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b082      	sub	sp, #8
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
	 Dev->saved_vhv_init = VL53L1X_readReg(Dev, VL53L1_VHV_CONFIG__INIT);
 80060b2:	210b      	movs	r1, #11
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff fc42 	bl	800593e <VL53L1X_readReg>
 80060ba:	4603      	mov	r3, r0
 80060bc:	461a      	mov	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	739a      	strb	r2, [r3, #14]
	 Dev->saved_vhv_timeout = VL53L1X_readReg(Dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND);
 80060c2:	2108      	movs	r1, #8
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff fc3a 	bl	800593e <VL53L1X_readReg>
 80060ca:	4603      	mov	r3, r0
 80060cc:	461a      	mov	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	73da      	strb	r2, [r3, #15]
	 VL53L1X_writeReg(Dev, VL53L1_VHV_CONFIG__INIT, Dev->saved_vhv_init & 0x7F);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	7b9b      	ldrb	r3, [r3, #14]
 80060d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	461a      	mov	r2, r3
 80060de:	210b      	movs	r1, #11
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff fbbf 	bl	8005864 <VL53L1X_writeReg>
	 VL53L1X_writeReg(Dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND,(Dev->saved_vhv_timeout & 0x03) + (3 << 2));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	7bdb      	ldrb	r3, [r3, #15]
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	330c      	adds	r3, #12
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	461a      	mov	r2, r3
 80060f6:	2108      	movs	r1, #8
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7ff fbb3 	bl	8005864 <VL53L1X_writeReg>
	 VL53L1X_writeReg(Dev, VL53L1_PHASECAL_CONFIG__OVERRIDE, 0x01);
 80060fe:	2201      	movs	r2, #1
 8006100:	214d      	movs	r1, #77	; 0x4d
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff fbae 	bl	8005864 <VL53L1X_writeReg>
	 VL53L1X_writeReg(Dev, VL53L1_CAL_CONFIG__VCSEL_START, VL53L1X_readReg(Dev, VL53L1_PHASECAL_RESULT__VCSEL_START));
 8006108:	21d8      	movs	r1, #216	; 0xd8
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff fc17 	bl	800593e <VL53L1X_readReg>
 8006110:	4603      	mov	r3, r0
 8006112:	461a      	mov	r2, r3
 8006114:	2147      	movs	r1, #71	; 0x47
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff fba4 	bl	8005864 <VL53L1X_writeReg>
}
 800611c:	bf00      	nop
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <VL53L1X_readResults>:

void VL53L1X_readResults(VL53L1X_DEV Dev, ResultBuffer* results)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
	results->range_status = VL53L1X_readReg(Dev, VL53L1_RESULT__RANGE_STATUS);
 800612e:	2189      	movs	r1, #137	; 0x89
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff fc04 	bl	800593e <VL53L1X_readReg>
 8006136:	4603      	mov	r3, r0
 8006138:	461a      	mov	r2, r3
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	701a      	strb	r2, [r3, #0]
	results->final_crosstalk_corrected_range_mm_sd0 = VL53L1X_readReg16Bit(Dev, VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0);
 800613e:	2196      	movs	r1, #150	; 0x96
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7ff fc17 	bl	8005974 <VL53L1X_readReg16Bit>
 8006146:	4603      	mov	r3, r0
 8006148:	461a      	mov	r2, r3
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	80da      	strh	r2, [r3, #6]
	results->ambient_count_rate_mcps_sd0 = VL53L1X_readReg16Bit(Dev, VL53L1_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0);
 800614e:	2190      	movs	r1, #144	; 0x90
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff fc0f 	bl	8005974 <VL53L1X_readReg16Bit>
 8006156:	4603      	mov	r3, r0
 8006158:	461a      	mov	r2, r3
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	809a      	strh	r2, [r3, #4]
	results->dss_actual_effective_spads_sd0 = VL53L1X_readReg16Bit(Dev, VL53L1_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0);
 800615e:	218c      	movs	r1, #140	; 0x8c
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff fc07 	bl	8005974 <VL53L1X_readReg16Bit>
 8006166:	4603      	mov	r3, r0
 8006168:	461a      	mov	r2, r3
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	805a      	strh	r2, [r3, #2]
	results->peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
			VL53L1X_readReg16Bit(Dev, VL53L1_RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0);
 800616e:	2198      	movs	r1, #152	; 0x98
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7ff fbff 	bl	8005974 <VL53L1X_readReg16Bit>
 8006176:	4603      	mov	r3, r0
 8006178:	461a      	mov	r2, r3
	results->peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	811a      	strh	r2, [r3, #8]
}
 800617e:	bf00      	nop
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
	...

08006188 <VL53L1X_getRangingData>:

void VL53L1X_getRangingData(RangingData* data, ResultBuffer* results)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
	uint16_t range = results->final_crosstalk_corrected_range_mm_sd0;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	88db      	ldrh	r3, [r3, #6]
 8006196:	81fb      	strh	r3, [r7, #14]
	data->range_mm = ((uint32_t)range * 2011 + 0x0400) / 0x0800;
 8006198:	89fb      	ldrh	r3, [r7, #14]
 800619a:	f240 72db 	movw	r2, #2011	; 0x7db
 800619e:	fb02 f303 	mul.w	r3, r2, r3
 80061a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061a6:	0adb      	lsrs	r3, r3, #11
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	801a      	strh	r2, [r3, #0]

	 switch(results->range_status)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	2b11      	cmp	r3, #17
 80061b6:	d84f      	bhi.n	8006258 <VL53L1X_getRangingData+0xd0>
 80061b8:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <VL53L1X_getRangingData+0x38>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	08006209 	.word	0x08006209
 80061c4:	08006209 	.word	0x08006209
 80061c8:	08006209 	.word	0x08006209
 80061cc:	08006229 	.word	0x08006229
 80061d0:	08006221 	.word	0x08006221
 80061d4:	08006231 	.word	0x08006231
 80061d8:	08006239 	.word	0x08006239
 80061dc:	08006249 	.word	0x08006249
 80061e0:	08006251 	.word	0x08006251
 80061e4:	08006259 	.word	0x08006259
 80061e8:	08006259 	.word	0x08006259
 80061ec:	08006241 	.word	0x08006241
 80061f0:	08006211 	.word	0x08006211
 80061f4:	08006259 	.word	0x08006259
 80061f8:	08006259 	.word	0x08006259
 80061fc:	08006259 	.word	0x08006259
 8006200:	08006209 	.word	0x08006209
 8006204:	08006219 	.word	0x08006219
	  {
	    case 17:
	    case 2:
	    case 1:
	    case 3:
	      data->range_status = HardwareFail;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2205      	movs	r2, #5
 800620c:	709a      	strb	r2, [r3, #2]
	      break;
 800620e:	e026      	b.n	800625e <VL53L1X_getRangingData+0xd6>

	    case 13:
	      data->range_status = MinRangeFail;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	220d      	movs	r2, #13
 8006214:	709a      	strb	r2, [r3, #2]
	      break;
 8006216:	e022      	b.n	800625e <VL53L1X_getRangingData+0xd6>

	    case 18:
	      data->range_status = SynchronizationInt;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	220a      	movs	r2, #10
 800621c:	709a      	strb	r2, [r3, #2]
	      break;
 800621e:	e01e      	b.n	800625e <VL53L1X_getRangingData+0xd6>

	    case 5:
	      data->range_status =  OutOfBoundsFail;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2204      	movs	r2, #4
 8006224:	709a      	strb	r2, [r3, #2]
	      break;
 8006226:	e01a      	b.n	800625e <VL53L1X_getRangingData+0xd6>

	    case 4:
	      data->range_status = SignalFail;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	709a      	strb	r2, [r3, #2]
	      break;
 800622e:	e016      	b.n	800625e <VL53L1X_getRangingData+0xd6>

	    case 6:
	      data->range_status = SignalFail;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	709a      	strb	r2, [r3, #2]
	      break;
 8006236:	e012      	b.n	800625e <VL53L1X_getRangingData+0xd6>

	    case 7:
	      data->range_status = WrapTargetFail;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2207      	movs	r2, #7
 800623c:	709a      	strb	r2, [r3, #2]
	      break;
 800623e:	e00e      	b.n	800625e <VL53L1X_getRangingData+0xd6>

	    case 12:
	      data->range_status = XtalkSignalFail;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2209      	movs	r2, #9
 8006244:	709a      	strb	r2, [r3, #2]
	      break;
 8006246:	e00a      	b.n	800625e <VL53L1X_getRangingData+0xd6>

	    case 8:
	      data->range_status = RangeValidMinRangeClipped;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2203      	movs	r2, #3
 800624c:	709a      	strb	r2, [r3, #2]
	      break;
 800624e:	e006      	b.n	800625e <VL53L1X_getRangingData+0xd6>

	    case 9:
	        data->range_status = RangeValid;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	709a      	strb	r2, [r3, #2]
	      break;
 8006256:	e002      	b.n	800625e <VL53L1X_getRangingData+0xd6>

	    default:
	      data->range_status = None;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	22ff      	movs	r2, #255	; 0xff
 800625c:	709a      	strb	r2, [r3, #2]
	  }
	  data->peak_signal_count_rate_MCPS = VL53L1X_countRateFixedToFloat(results->peak_signal_count_rate_crosstalk_corrected_mcps_sd0);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	891b      	ldrh	r3, [r3, #8]
 8006262:	4618      	mov	r0, r3
 8006264:	f000 f814 	bl	8006290 <VL53L1X_countRateFixedToFloat>
 8006268:	eef0 7a40 	vmov.f32	s15, s0
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	edc3 7a01 	vstr	s15, [r3, #4]
	  data->ambient_count_rate_MCPS = VL53L1X_countRateFixedToFloat(results->ambient_count_rate_mcps_sd0);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	889b      	ldrh	r3, [r3, #4]
 8006276:	4618      	mov	r0, r3
 8006278:	f000 f80a 	bl	8006290 <VL53L1X_countRateFixedToFloat>
 800627c:	eef0 7a40 	vmov.f32	s15, s0
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8006286:	bf00      	nop
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop

08006290 <VL53L1X_countRateFixedToFloat>:


float VL53L1X_countRateFixedToFloat(uint16_t count_rate_fixed)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	80fb      	strh	r3, [r7, #6]
	return (float)count_rate_fixed / (1 << 7);
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	ee07 3a90 	vmov	s15, r3
 80062a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80062c0 <VL53L1X_countRateFixedToFloat+0x30>
 80062a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062ac:	eef0 7a66 	vmov.f32	s15, s13
}
 80062b0:	eeb0 0a67 	vmov.f32	s0, s15
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	43000000 	.word	0x43000000
 80062c4:	00000000 	.word	0x00000000

080062c8 <SineWave_generate>:
	hsin->amp = 1.0;
	hsin->freq = 1000; //range
}

void SineWave_generate(SineWaveHandler hsin, RangingData *dataFreq, RangingData *dataAmp)
{
 80062c8:	b590      	push	{r4, r7, lr}
 80062ca:	ed2d 8b02 	vpush	{d8}
 80062ce:	b08b      	sub	sp, #44	; 0x2c
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
//	memcpy(hsin->data, lookup, LOOKUP_SIZE);
//	hsin->amp = 1.0*data->range_mm/1700;
	//hsin->freq = 1.0*dataFreq->range_mm;
	//hsin->amp = 40/RANGE_MAX(data->range_mm, 40, 400);
	//hsin->amp=0.2;
	hsin->freq = RANGE_MAX(dataFreq->range_mm, 40, 400);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	2b27      	cmp	r3, #39	; 0x27
 80062de:	d908      	bls.n	80062f2 <SineWave_generate+0x2a>
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80062e8:	bf28      	it	cs
 80062ea:	f44f 73c8 	movcs.w	r3, #400	; 0x190
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	e000      	b.n	80062f4 <SineWave_generate+0x2c>
 80062f2:	2228      	movs	r2, #40	; 0x28
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	809a      	strh	r2, [r3, #4]
	float32_t temp = dataAmp->range_mm*0.001;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fa f8b5 	bl	800046c <__aeabi_i2d>
 8006302:	a353      	add	r3, pc, #332	; (adr r3, 8006450 <SineWave_generate+0x188>)
 8006304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006308:	f7fa f916 	bl	8000538 <__aeabi_dmul>
 800630c:	4603      	mov	r3, r0
 800630e:	460c      	mov	r4, r1
 8006310:	4618      	mov	r0, r3
 8006312:	4621      	mov	r1, r4
 8006314:	f7fa fbaa 	bl	8000a6c <__aeabi_d2f>
 8006318:	4603      	mov	r3, r0
 800631a:	61fb      	str	r3, [r7, #28]
	hsin->amp = RANGE_MAX(temp, 0.1, 0.4);
 800631c:	69f8      	ldr	r0, [r7, #28]
 800631e:	f7fa f8b7 	bl	8000490 <__aeabi_f2d>
 8006322:	a34d      	add	r3, pc, #308	; (adr r3, 8006458 <SineWave_generate+0x190>)
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	f7fa fb78 	bl	8000a1c <__aeabi_dcmplt>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <SineWave_generate+0x6e>
 8006332:	4b43      	ldr	r3, [pc, #268]	; (8006440 <SineWave_generate+0x178>)
 8006334:	e00d      	b.n	8006352 <SineWave_generate+0x8a>
 8006336:	69f8      	ldr	r0, [r7, #28]
 8006338:	f7fa f8aa 	bl	8000490 <__aeabi_f2d>
 800633c:	a33c      	add	r3, pc, #240	; (adr r3, 8006430 <SineWave_generate+0x168>)
 800633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006342:	f7fa fb6b 	bl	8000a1c <__aeabi_dcmplt>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <SineWave_generate+0x88>
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	e000      	b.n	8006352 <SineWave_generate+0x8a>
 8006350:	4b3c      	ldr	r3, [pc, #240]	; (8006444 <SineWave_generate+0x17c>)
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	6013      	str	r3, [r2, #0]
	hsin->amp *=2;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	edd3 7a00 	vldr	s15, [r3]
 800635c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	edc3 7a00 	vstr	s15, [r3]
	hsin->sampleNum = hsin->freq;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	889b      	ldrh	r3, [r3, #4]
 800636a:	461a      	mov	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	60da      	str	r2, [r3, #12]
	float32_t step = 2.0*PI/hsin->sampleNum;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	4618      	mov	r0, r3
 8006376:	f7fa f869 	bl	800044c <__aeabi_ui2d>
 800637a:	4603      	mov	r3, r0
 800637c:	460c      	mov	r4, r1
 800637e:	461a      	mov	r2, r3
 8006380:	4623      	mov	r3, r4
 8006382:	a12d      	add	r1, pc, #180	; (adr r1, 8006438 <SineWave_generate+0x170>)
 8006384:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006388:	f7fa fa00 	bl	800078c <__aeabi_ddiv>
 800638c:	4603      	mov	r3, r0
 800638e:	460c      	mov	r4, r1
 8006390:	4618      	mov	r0, r3
 8006392:	4621      	mov	r1, r4
 8006394:	f7fa fb6a 	bl	8000a6c <__aeabi_d2f>
 8006398:	4603      	mov	r3, r0
 800639a:	61bb      	str	r3, [r7, #24]
	hsin->sampleNum = 2*hsin->sampleNum;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	005a      	lsls	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	60da      	str	r2, [r3, #12]
	float32_t pos = 0;
 80063a6:	f04f 0300 	mov.w	r3, #0
 80063aa:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t sample;
	for(uint32_t i=0; i<hsin->sampleNum; i+=2)
 80063ac:	2300      	movs	r3, #0
 80063ae:	623b      	str	r3, [r7, #32]
 80063b0:	e031      	b.n	8006416 <SineWave_generate+0x14e>
	{
		sample = hsin->amp*((arm_sin_f32(pos))*(INT16_MAX));
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	ed93 8a00 	vldr	s16, [r3]
 80063b8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80063bc:	f000 fd36 	bl	8006e2c <arm_sin_f32>
 80063c0:	eeb0 7a40 	vmov.f32	s14, s0
 80063c4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8006448 <SineWave_generate+0x180>
 80063c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063cc:	ee68 7a27 	vmul.f32	s15, s16, s15
 80063d0:	edc7 7a05 	vstr	s15, [r7, #20]
		prepare[i]= (uint16_t)sample;
 80063d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80063d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063dc:	edc7 7a00 	vstr	s15, [r7]
 80063e0:	883b      	ldrh	r3, [r7, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	b219      	sxth	r1, r3
 80063e6:	4a19      	ldr	r2, [pc, #100]	; (800644c <SineWave_generate+0x184>)
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		prepare[i+1] = prepare[i];
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	3301      	adds	r3, #1
 80063f2:	4916      	ldr	r1, [pc, #88]	; (800644c <SineWave_generate+0x184>)
 80063f4:	6a3a      	ldr	r2, [r7, #32]
 80063f6:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80063fa:	4a14      	ldr	r2, [pc, #80]	; (800644c <SineWave_generate+0x184>)
 80063fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		//sampleShow = lookup[i];
		pos+=step;
 8006400:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006404:	edd7 7a06 	vldr	s15, [r7, #24]
 8006408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800640c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for(uint32_t i=0; i<hsin->sampleNum; i+=2)
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	3302      	adds	r3, #2
 8006414:	623b      	str	r3, [r7, #32]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	429a      	cmp	r2, r3
 800641e:	d8c8      	bhi.n	80063b2 <SineWave_generate+0xea>
	}
	//hsin->data = lookup;
}
 8006420:	bf00      	nop
 8006422:	372c      	adds	r7, #44	; 0x2c
 8006424:	46bd      	mov	sp, r7
 8006426:	ecbd 8b02 	vpop	{d8}
 800642a:	bd90      	pop	{r4, r7, pc}
 800642c:	f3af 8000 	nop.w
 8006430:	9999999a 	.word	0x9999999a
 8006434:	3fd99999 	.word	0x3fd99999
 8006438:	60000000 	.word	0x60000000
 800643c:	401921fb 	.word	0x401921fb
 8006440:	3dcccccd 	.word	0x3dcccccd
 8006444:	3ecccccd 	.word	0x3ecccccd
 8006448:	46fffe00 	.word	0x46fffe00
 800644c:	20007e40 	.word	0x20007e40
 8006450:	d2f1a9fc 	.word	0xd2f1a9fc
 8006454:	3f50624d 	.word	0x3f50624d
 8006458:	9999999a 	.word	0x9999999a
 800645c:	3fb99999 	.word	0x3fb99999

08006460 <MX_GPIO_Init>:
static void DFSDM_Init(void);
static void Playback_Init(void);

/* Private functions ---------------------------------------------------------*/
static void MX_GPIO_Init(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006466:	1d3b      	adds	r3, r7, #4
 8006468:	2200      	movs	r2, #0
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	605a      	str	r2, [r3, #4]
 800646e:	609a      	str	r2, [r3, #8]
 8006470:	60da      	str	r2, [r3, #12]
 8006472:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006474:	4a11      	ldr	r2, [pc, #68]	; (80064bc <MX_GPIO_Init+0x5c>)
 8006476:	4b11      	ldr	r3, [pc, #68]	; (80064bc <MX_GPIO_Init+0x5c>)
 8006478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800647a:	f043 0301 	orr.w	r3, r3, #1
 800647e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006480:	4b0e      	ldr	r3, [pc, #56]	; (80064bc <MX_GPIO_Init+0x5c>)
 8006482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	603b      	str	r3, [r7, #0]
 800648a:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XSHUT_GPIO_Port, XSHUT_Pin, GPIO_PIN_RESET);
 800648c:	2200      	movs	r2, #0
 800648e:	2101      	movs	r1, #1
 8006490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006494:	f7fc fa2e 	bl	80028f4 <HAL_GPIO_WritePin>


  /*Configure GPIO pin : XSHUT_Pin */
  GPIO_InitStruct.Pin = XSHUT_Pin;
 8006498:	2301      	movs	r3, #1
 800649a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800649c:	2301      	movs	r3, #1
 800649e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064a4:	2300      	movs	r3, #0
 80064a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(XSHUT_GPIO_Port, &GPIO_InitStruct);
 80064a8:	1d3b      	adds	r3, r7, #4
 80064aa:	4619      	mov	r1, r3
 80064ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064b0:	f7fb ff84 	bl	80023bc <HAL_GPIO_Init>

}
 80064b4:	bf00      	nop
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	40021000 	.word	0x40021000

080064c0 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08e      	sub	sp, #56	; 0x38
 80064c4:	af00      	add	r7, sp, #0
	ResultBuffer resultsAmp;

	thereminStatus statusTheremin;
	VL53L1X_Status statusDev;

	devFreq->I2cHandle=&I2c1Handle;
 80064c6:	4b34      	ldr	r3, [pc, #208]	; (8006598 <main+0xd8>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a34      	ldr	r2, [pc, #208]	; (800659c <main+0xdc>)
 80064cc:	605a      	str	r2, [r3, #4]
	devAmp->I2cHandle=&I2c1Handle;
 80064ce:	4b34      	ldr	r3, [pc, #208]	; (80065a0 <main+0xe0>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a32      	ldr	r2, [pc, #200]	; (800659c <main+0xdc>)
 80064d4:	605a      	str	r2, [r3, #4]

	HAL_Init();
 80064d6:	f7fb f895 	bl	8001604 <HAL_Init>

	/* Configure the system clock to have a frequency of 80 MHz */
	SystemClock_Config();
 80064da:	f000 f86f 	bl	80065bc <SystemClock_Config>
	MX_GPIO_Init();
 80064de:	f7ff ffbf 	bl	8006460 <MX_GPIO_Init>

	/* Initialize DFSDM channels and filter for record */
	DFSDM_Init();
 80064e2:	f000 f8b3 	bl	800664c <DFSDM_Init>

	/* Initialize playback */
	Playback_Init();
 80064e6:	f000 f92f 	bl	8006748 <Playback_Init>

	/* Start DFSDM conversions */
	if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&DfsdmFilterHandle, RecBuff, 2048))
 80064ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064ee:	492d      	ldr	r1, [pc, #180]	; (80065a4 <main+0xe4>)
 80064f0:	482d      	ldr	r0, [pc, #180]	; (80065a8 <main+0xe8>)
 80064f2:	f7fb fc0f 	bl	8001d14 <HAL_DFSDM_FilterRegularStart_DMA>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <main+0x40>
	{
		Error_Handler();
 80064fc:	f000 f9b2 	bl	8006864 <Error_Handler>
	}



	statusTheremin = thereminInit(devFreq, devAmp);
 8006500:	4b25      	ldr	r3, [pc, #148]	; (8006598 <main+0xd8>)
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	4b26      	ldr	r3, [pc, #152]	; (80065a0 <main+0xe0>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4619      	mov	r1, r3
 800650a:	4610      	mov	r0, r2
 800650c:	f000 fc16 	bl	8006d3c <thereminInit>
 8006510:	4603      	mov	r3, r0
 8006512:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37



	SineWave_generate(hsin, &dataFreq, &dataAmp);
 8006516:	4b25      	ldr	r3, [pc, #148]	; (80065ac <main+0xec>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f107 0210 	add.w	r2, r7, #16
 800651e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006522:	4618      	mov	r0, r3
 8006524:	f7ff fed0 	bl	80062c8 <SineWave_generate>
	audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *) &lookup[0], hsin->sampleNum);
 8006528:	4b21      	ldr	r3, [pc, #132]	; (80065b0 <main+0xf0>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	4a1f      	ldr	r2, [pc, #124]	; (80065ac <main+0xec>)
 8006530:	6812      	ldr	r2, [r2, #0]
 8006532:	68d2      	ldr	r2, [r2, #12]
 8006534:	b292      	uxth	r2, r2
 8006536:	491f      	ldr	r1, [pc, #124]	; (80065b4 <main+0xf4>)
 8006538:	2094      	movs	r0, #148	; 0x94
 800653a:	4798      	blx	r3
	HAL_SAI_Transmit_DMA(&SaiHandle, (uint8_t *) &lookup[0], hsin->sampleNum);
 800653c:	4b1b      	ldr	r3, [pc, #108]	; (80065ac <main+0xec>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	b29b      	uxth	r3, r3
 8006544:	461a      	mov	r2, r3
 8006546:	491b      	ldr	r1, [pc, #108]	; (80065b4 <main+0xf4>)
 8006548:	481b      	ldr	r0, [pc, #108]	; (80065b8 <main+0xf8>)
 800654a:	f7ff f809 	bl	8005560 <HAL_SAI_Transmit_DMA>

	while(1)
	{
		VL53L1X_read(devFreq, &dataFreq ,&resultsFreq);
 800654e:	4b12      	ldr	r3, [pc, #72]	; (8006598 <main+0xd8>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f107 021c 	add.w	r2, r7, #28
 8006556:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800655a:	4618      	mov	r0, r3
 800655c:	f7ff fd74 	bl	8006048 <VL53L1X_read>
		VL53L1X_read(devAmp, &dataAmp ,&resultsAmp);
 8006560:	4b0f      	ldr	r3, [pc, #60]	; (80065a0 <main+0xe0>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	1d3a      	adds	r2, r7, #4
 8006566:	f107 0110 	add.w	r1, r7, #16
 800656a:	4618      	mov	r0, r3
 800656c:	f7ff fd6c 	bl	8006048 <VL53L1X_read>

		hsin->amp = 1;
 8006570:	4b0e      	ldr	r3, [pc, #56]	; (80065ac <main+0xec>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006578:	601a      	str	r2, [r3, #0]
		hsin->freq =480;
 800657a:	4b0c      	ldr	r3, [pc, #48]	; (80065ac <main+0xec>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006582:	809a      	strh	r2, [r3, #4]
		SineWave_generate(hsin, &dataFreq, &dataAmp);
 8006584:	4b09      	ldr	r3, [pc, #36]	; (80065ac <main+0xec>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f107 0210 	add.w	r2, r7, #16
 800658c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff fe99 	bl	80062c8 <SineWave_generate>
		VL53L1X_read(devFreq, &dataFreq ,&resultsFreq);
 8006596:	e7da      	b.n	800654e <main+0x8e>
 8006598:	2000003c 	.word	0x2000003c
 800659c:	2000fb94 	.word	0x2000fb94
 80065a0:	20000040 	.word	0x20000040
 80065a4:	2000fc1c 	.word	0x2000fc1c
 80065a8:	20013d1c 	.word	0x20013d1c
 80065ac:	20000038 	.word	0x20000038
 80065b0:	20013d18 	.word	0x20013d18
 80065b4:	20000140 	.word	0x20000140
 80065b8:	20013c3c 	.word	0x20013c3c

080065bc <SystemClock_Config>:
 *            Flash Latency(WS)              = 4
 * @param  None
 * @retval None
 */
void SystemClock_Config(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b096      	sub	sp, #88	; 0x58
 80065c0:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80065c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80065c6:	2200      	movs	r2, #0
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	605a      	str	r2, [r3, #4]
 80065cc:	609a      	str	r2, [r3, #8]
 80065ce:	60da      	str	r2, [r3, #12]
 80065d0:	611a      	str	r2, [r3, #16]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80065d2:	463b      	mov	r3, r7
 80065d4:	2244      	movs	r2, #68	; 0x44
 80065d6:	2100      	movs	r1, #0
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 fc9a 	bl	8006f12 <memset>

	/* MSI is enabled after System reset, activate PLL with MSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80065de:	2310      	movs	r3, #16
 80065e0:	603b      	str	r3, [r7, #0]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80065e2:	2301      	movs	r3, #1
 80065e4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80065e6:	2360      	movs	r3, #96	; 0x60
 80065e8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80065ea:	2300      	movs	r3, #0
 80065ec:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80065ee:	2302      	movs	r3, #2
 80065f0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80065f2:	2301      	movs	r3, #1
 80065f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80065f6:	2301      	movs	r3, #1
 80065f8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLN = 40;
 80065fa:	2328      	movs	r3, #40	; 0x28
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLR = 2;
 80065fe:	2302      	movs	r3, #2
 8006600:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = 7;
 8006602:	2307      	movs	r3, #7
 8006604:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8006606:	2304      	movs	r3, #4
 8006608:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800660a:	463b      	mov	r3, r7
 800660c:	4618      	mov	r0, r3
 800660e:	f7fc fecb 	bl	80033a8 <HAL_RCC_OscConfig>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d000      	beq.n	800661a <SystemClock_Config+0x5e>
	{
		/* Initialization Error */
		while(1);
 8006618:	e7fe      	b.n	8006618 <SystemClock_Config+0x5c>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800661a:	230f      	movs	r3, #15
 800661c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800661e:	2303      	movs	r3, #3
 8006620:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006622:	2300      	movs	r3, #0
 8006624:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006626:	2300      	movs	r3, #0
 8006628:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800662a:	2300      	movs	r3, #0
 800662c:	657b      	str	r3, [r7, #84]	; 0x54
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800662e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006632:	2104      	movs	r1, #4
 8006634:	4618      	mov	r0, r3
 8006636:	f7fd fa1b 	bl	8003a70 <HAL_RCC_ClockConfig>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d000      	beq.n	8006642 <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		while(1);
 8006640:	e7fe      	b.n	8006640 <SystemClock_Config+0x84>
	}
}
 8006642:	bf00      	nop
 8006644:	3758      	adds	r7, #88	; 0x58
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <DFSDM_Init>:
 * @brief  DFSDM channels and filter initialization
 * @param  None
 * @retval None
 */
static void DFSDM_Init(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
	/* Initialize channel 2 */
	__HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&DfsdmChannelHandle);
 8006650:	4b38      	ldr	r3, [pc, #224]	; (8006734 <DFSDM_Init+0xe8>)
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	DfsdmChannelHandle.Instance                      = DFSDM1_Channel2;
 8006658:	4b36      	ldr	r3, [pc, #216]	; (8006734 <DFSDM_Init+0xe8>)
 800665a:	4a37      	ldr	r2, [pc, #220]	; (8006738 <DFSDM_Init+0xec>)
 800665c:	601a      	str	r2, [r3, #0]
	DfsdmChannelHandle.Init.OutputClock.Activation   = ENABLE;
 800665e:	4b35      	ldr	r3, [pc, #212]	; (8006734 <DFSDM_Init+0xe8>)
 8006660:	2201      	movs	r2, #1
 8006662:	711a      	strb	r2, [r3, #4]
	DfsdmChannelHandle.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8006664:	4b33      	ldr	r3, [pc, #204]	; (8006734 <DFSDM_Init+0xe8>)
 8006666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800666a:	609a      	str	r2, [r3, #8]
	DfsdmChannelHandle.Init.OutputClock.Divider      = 4; /* 11.294MHz/4 = 2.82MHz */
 800666c:	4b31      	ldr	r3, [pc, #196]	; (8006734 <DFSDM_Init+0xe8>)
 800666e:	2204      	movs	r2, #4
 8006670:	60da      	str	r2, [r3, #12]
	DfsdmChannelHandle.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8006672:	4b30      	ldr	r3, [pc, #192]	; (8006734 <DFSDM_Init+0xe8>)
 8006674:	2200      	movs	r2, #0
 8006676:	611a      	str	r2, [r3, #16]
	DfsdmChannelHandle.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE; /* N.U. */
 8006678:	4b2e      	ldr	r3, [pc, #184]	; (8006734 <DFSDM_Init+0xe8>)
 800667a:	2200      	movs	r2, #0
 800667c:	615a      	str	r2, [r3, #20]
	DfsdmChannelHandle.Init.Input.Pins               = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800667e:	4b2d      	ldr	r3, [pc, #180]	; (8006734 <DFSDM_Init+0xe8>)
 8006680:	2200      	movs	r2, #0
 8006682:	619a      	str	r2, [r3, #24]
	DfsdmChannelHandle.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_RISING;
 8006684:	4b2b      	ldr	r3, [pc, #172]	; (8006734 <DFSDM_Init+0xe8>)
 8006686:	2200      	movs	r2, #0
 8006688:	61da      	str	r2, [r3, #28]
	DfsdmChannelHandle.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800668a:	4b2a      	ldr	r3, [pc, #168]	; (8006734 <DFSDM_Init+0xe8>)
 800668c:	2204      	movs	r2, #4
 800668e:	621a      	str	r2, [r3, #32]
	DfsdmChannelHandle.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER; /* N.U. */
 8006690:	4b28      	ldr	r3, [pc, #160]	; (8006734 <DFSDM_Init+0xe8>)
 8006692:	2200      	movs	r2, #0
 8006694:	625a      	str	r2, [r3, #36]	; 0x24
	DfsdmChannelHandle.Init.Awd.Oversampling         = 10; /* N.U. */
 8006696:	4b27      	ldr	r3, [pc, #156]	; (8006734 <DFSDM_Init+0xe8>)
 8006698:	220a      	movs	r2, #10
 800669a:	629a      	str	r2, [r3, #40]	; 0x28
	DfsdmChannelHandle.Init.Offset                   = 0;
 800669c:	4b25      	ldr	r3, [pc, #148]	; (8006734 <DFSDM_Init+0xe8>)
 800669e:	2200      	movs	r2, #0
 80066a0:	62da      	str	r2, [r3, #44]	; 0x2c
	DfsdmChannelHandle.Init.RightBitShift            = 2;
 80066a2:	4b24      	ldr	r3, [pc, #144]	; (8006734 <DFSDM_Init+0xe8>)
 80066a4:	2202      	movs	r2, #2
 80066a6:	631a      	str	r2, [r3, #48]	; 0x30
	if(HAL_OK != HAL_DFSDM_ChannelInit(&DfsdmChannelHandle))
 80066a8:	4822      	ldr	r0, [pc, #136]	; (8006734 <DFSDM_Init+0xe8>)
 80066aa:	f7fb f953 	bl	8001954 <HAL_DFSDM_ChannelInit>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <DFSDM_Init+0x6c>
	{
		Error_Handler();
 80066b4:	f000 f8d6 	bl	8006864 <Error_Handler>
	}

	/* Initialize filter 0 */
	__HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&DfsdmFilterHandle);
 80066b8:	4b20      	ldr	r3, [pc, #128]	; (800673c <DFSDM_Init+0xf0>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DfsdmFilterHandle.Instance                          = DFSDM1_Filter0;
 80066c0:	4b1e      	ldr	r3, [pc, #120]	; (800673c <DFSDM_Init+0xf0>)
 80066c2:	4a1f      	ldr	r2, [pc, #124]	; (8006740 <DFSDM_Init+0xf4>)
 80066c4:	601a      	str	r2, [r3, #0]
	DfsdmFilterHandle.Init.RegularParam.Trigger         = DFSDM_FILTER_SW_TRIGGER;
 80066c6:	4b1d      	ldr	r3, [pc, #116]	; (800673c <DFSDM_Init+0xf0>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	605a      	str	r2, [r3, #4]
	DfsdmFilterHandle.Init.RegularParam.FastMode        = ENABLE;
 80066cc:	4b1b      	ldr	r3, [pc, #108]	; (800673c <DFSDM_Init+0xf0>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	721a      	strb	r2, [r3, #8]
	DfsdmFilterHandle.Init.RegularParam.DmaMode         = ENABLE;
 80066d2:	4b1a      	ldr	r3, [pc, #104]	; (800673c <DFSDM_Init+0xf0>)
 80066d4:	2201      	movs	r2, #1
 80066d6:	725a      	strb	r2, [r3, #9]
	DfsdmFilterHandle.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER; /* N.U. */
 80066d8:	4b18      	ldr	r3, [pc, #96]	; (800673c <DFSDM_Init+0xf0>)
 80066da:	2200      	movs	r2, #0
 80066dc:	60da      	str	r2, [r3, #12]
	DfsdmFilterHandle.Init.InjectedParam.ScanMode       = ENABLE; /* N.U. */
 80066de:	4b17      	ldr	r3, [pc, #92]	; (800673c <DFSDM_Init+0xf0>)
 80066e0:	2201      	movs	r2, #1
 80066e2:	741a      	strb	r2, [r3, #16]
	DfsdmFilterHandle.Init.InjectedParam.DmaMode        = DISABLE; /* N.U. */
 80066e4:	4b15      	ldr	r3, [pc, #84]	; (800673c <DFSDM_Init+0xf0>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	745a      	strb	r2, [r3, #17]
	DfsdmFilterHandle.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO; /* N.U. */
 80066ea:	4b14      	ldr	r3, [pc, #80]	; (800673c <DFSDM_Init+0xf0>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	615a      	str	r2, [r3, #20]
	DfsdmFilterHandle.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE; /* N.U. */
 80066f0:	4b12      	ldr	r3, [pc, #72]	; (800673c <DFSDM_Init+0xf0>)
 80066f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066f6:	619a      	str	r2, [r3, #24]
	DfsdmFilterHandle.Init.FilterParam.SincOrder        = DFSDM_FILTER_SINC3_ORDER;
 80066f8:	4b10      	ldr	r3, [pc, #64]	; (800673c <DFSDM_Init+0xf0>)
 80066fa:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80066fe:	61da      	str	r2, [r3, #28]
	DfsdmFilterHandle.Init.FilterParam.Oversampling     = 64; /* 11.294MHz/(4*64) = 44.1KHz */
 8006700:	4b0e      	ldr	r3, [pc, #56]	; (800673c <DFSDM_Init+0xf0>)
 8006702:	2240      	movs	r2, #64	; 0x40
 8006704:	621a      	str	r2, [r3, #32]
	//DfsdmFilterHandle.Init.FilterParam.Oversampling     = 256; /* 11.294MHz/(4*64) = 44.1KHz */
	DfsdmFilterHandle.Init.FilterParam.IntOversampling  = 1;
 8006706:	4b0d      	ldr	r3, [pc, #52]	; (800673c <DFSDM_Init+0xf0>)
 8006708:	2201      	movs	r2, #1
 800670a:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_OK != HAL_DFSDM_FilterInit(&DfsdmFilterHandle))
 800670c:	480b      	ldr	r0, [pc, #44]	; (800673c <DFSDM_Init+0xf0>)
 800670e:	f7fb f9e1 	bl	8001ad4 <HAL_DFSDM_FilterInit>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <DFSDM_Init+0xd0>
	{
		Error_Handler();
 8006718:	f000 f8a4 	bl	8006864 <Error_Handler>
	}

	/* Configure regular channel and continuous mode for filter 0 */
	if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&DfsdmFilterHandle, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON))
 800671c:	2201      	movs	r2, #1
 800671e:	4909      	ldr	r1, [pc, #36]	; (8006744 <DFSDM_Init+0xf8>)
 8006720:	4806      	ldr	r0, [pc, #24]	; (800673c <DFSDM_Init+0xf0>)
 8006722:	f7fb fab1 	bl	8001c88 <HAL_DFSDM_FilterConfigRegChannel>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <DFSDM_Init+0xe4>
	{
		Error_Handler();
 800672c:	f000 f89a 	bl	8006864 <Error_Handler>
	}
}
 8006730:	bf00      	nop
 8006732:	bd80      	pop	{r7, pc}
 8006734:	2000fbe4 	.word	0x2000fbe4
 8006738:	40016040 	.word	0x40016040
 800673c:	20013d1c 	.word	0x20013d1c
 8006740:	40016100 	.word	0x40016100
 8006744:	00020004 	.word	0x00020004

08006748 <Playback_Init>:
 * @brief  Playback initialization
 * @param  None
 * @retval None
 */
static void Playback_Init(void)
{
 8006748:	b598      	push	{r3, r4, r7, lr}
 800674a:	af00      	add	r7, sp, #0
	/* Initialize SAI */
	__HAL_SAI_RESET_HANDLE_STATE(&SaiHandle);
 800674c:	4b41      	ldr	r3, [pc, #260]	; (8006854 <Playback_Init+0x10c>)
 800674e:	2200      	movs	r2, #0
 8006750:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	SaiHandle.Instance = SAI1_Block_A;
 8006754:	4b3f      	ldr	r3, [pc, #252]	; (8006854 <Playback_Init+0x10c>)
 8006756:	4a40      	ldr	r2, [pc, #256]	; (8006858 <Playback_Init+0x110>)
 8006758:	601a      	str	r2, [r3, #0]

	SaiHandle.Init.AudioMode      = SAI_MODEMASTER_TX;
 800675a:	4b3e      	ldr	r3, [pc, #248]	; (8006854 <Playback_Init+0x10c>)
 800675c:	2200      	movs	r2, #0
 800675e:	605a      	str	r2, [r3, #4]
	SaiHandle.Init.Synchro        = SAI_ASYNCHRONOUS;
 8006760:	4b3c      	ldr	r3, [pc, #240]	; (8006854 <Playback_Init+0x10c>)
 8006762:	2200      	movs	r2, #0
 8006764:	609a      	str	r2, [r3, #8]
	SaiHandle.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8006766:	4b3b      	ldr	r3, [pc, #236]	; (8006854 <Playback_Init+0x10c>)
 8006768:	2200      	movs	r2, #0
 800676a:	60da      	str	r2, [r3, #12]
	SaiHandle.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 800676c:	4b39      	ldr	r3, [pc, #228]	; (8006854 <Playback_Init+0x10c>)
 800676e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006772:	611a      	str	r2, [r3, #16]
	SaiHandle.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8006774:	4b37      	ldr	r3, [pc, #220]	; (8006854 <Playback_Init+0x10c>)
 8006776:	2200      	movs	r2, #0
 8006778:	615a      	str	r2, [r3, #20]
	SaiHandle.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 800677a:	4b36      	ldr	r3, [pc, #216]	; (8006854 <Playback_Init+0x10c>)
 800677c:	2201      	movs	r2, #1
 800677e:	619a      	str	r2, [r3, #24]
	//SaiHandle.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
	SaiHandle.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8006780:	4b34      	ldr	r3, [pc, #208]	; (8006854 <Playback_Init+0x10c>)
 8006782:	f64a 4244 	movw	r2, #44100	; 0xac44
 8006786:	61da      	str	r2, [r3, #28]
	SaiHandle.Init.Mckdiv         = 0; /* N.U */
 8006788:	4b32      	ldr	r3, [pc, #200]	; (8006854 <Playback_Init+0x10c>)
 800678a:	2200      	movs	r2, #0
 800678c:	621a      	str	r2, [r3, #32]
	SaiHandle.Init.MonoStereoMode = SAI_STEREOMODE;
 800678e:	4b31      	ldr	r3, [pc, #196]	; (8006854 <Playback_Init+0x10c>)
 8006790:	2200      	movs	r2, #0
 8006792:	625a      	str	r2, [r3, #36]	; 0x24
	SaiHandle.Init.CompandingMode = SAI_NOCOMPANDING;
 8006794:	4b2f      	ldr	r3, [pc, #188]	; (8006854 <Playback_Init+0x10c>)
 8006796:	2200      	movs	r2, #0
 8006798:	629a      	str	r2, [r3, #40]	; 0x28
	SaiHandle.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 800679a:	4b2e      	ldr	r3, [pc, #184]	; (8006854 <Playback_Init+0x10c>)
 800679c:	2200      	movs	r2, #0
 800679e:	62da      	str	r2, [r3, #44]	; 0x2c
	SaiHandle.Init.Protocol       = SAI_FREE_PROTOCOL;
 80067a0:	4b2c      	ldr	r3, [pc, #176]	; (8006854 <Playback_Init+0x10c>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30
	SaiHandle.Init.DataSize       = SAI_DATASIZE_16;
 80067a6:	4b2b      	ldr	r3, [pc, #172]	; (8006854 <Playback_Init+0x10c>)
 80067a8:	2280      	movs	r2, #128	; 0x80
 80067aa:	635a      	str	r2, [r3, #52]	; 0x34
	SaiHandle.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 80067ac:	4b29      	ldr	r3, [pc, #164]	; (8006854 <Playback_Init+0x10c>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	639a      	str	r2, [r3, #56]	; 0x38
	SaiHandle.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 80067b2:	4b28      	ldr	r3, [pc, #160]	; (8006854 <Playback_Init+0x10c>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	63da      	str	r2, [r3, #60]	; 0x3c

	SaiHandle.FrameInit.FrameLength       = 32;
 80067b8:	4b26      	ldr	r3, [pc, #152]	; (8006854 <Playback_Init+0x10c>)
 80067ba:	2220      	movs	r2, #32
 80067bc:	641a      	str	r2, [r3, #64]	; 0x40
	SaiHandle.FrameInit.ActiveFrameLength = 16;
 80067be:	4b25      	ldr	r3, [pc, #148]	; (8006854 <Playback_Init+0x10c>)
 80067c0:	2210      	movs	r2, #16
 80067c2:	645a      	str	r2, [r3, #68]	; 0x44
	SaiHandle.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80067c4:	4b23      	ldr	r3, [pc, #140]	; (8006854 <Playback_Init+0x10c>)
 80067c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80067ca:	649a      	str	r2, [r3, #72]	; 0x48
	SaiHandle.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80067cc:	4b21      	ldr	r3, [pc, #132]	; (8006854 <Playback_Init+0x10c>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	64da      	str	r2, [r3, #76]	; 0x4c
	SaiHandle.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80067d2:	4b20      	ldr	r3, [pc, #128]	; (8006854 <Playback_Init+0x10c>)
 80067d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80067d8:	651a      	str	r2, [r3, #80]	; 0x50

	SaiHandle.SlotInit.FirstBitOffset = 0;
 80067da:	4b1e      	ldr	r3, [pc, #120]	; (8006854 <Playback_Init+0x10c>)
 80067dc:	2200      	movs	r2, #0
 80067de:	655a      	str	r2, [r3, #84]	; 0x54
	SaiHandle.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 80067e0:	4b1c      	ldr	r3, [pc, #112]	; (8006854 <Playback_Init+0x10c>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	659a      	str	r2, [r3, #88]	; 0x58
	SaiHandle.SlotInit.SlotNumber     = 2;
 80067e6:	4b1b      	ldr	r3, [pc, #108]	; (8006854 <Playback_Init+0x10c>)
 80067e8:	2202      	movs	r2, #2
 80067ea:	65da      	str	r2, [r3, #92]	; 0x5c
	SaiHandle.SlotInit.SlotActive     = (SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1);
 80067ec:	4b19      	ldr	r3, [pc, #100]	; (8006854 <Playback_Init+0x10c>)
 80067ee:	2203      	movs	r2, #3
 80067f0:	661a      	str	r2, [r3, #96]	; 0x60

	if(HAL_OK != HAL_SAI_Init(&SaiHandle))
 80067f2:	4818      	ldr	r0, [pc, #96]	; (8006854 <Playback_Init+0x10c>)
 80067f4:	f7fe fd4e 	bl	8005294 <HAL_SAI_Init>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <Playback_Init+0xba>
	{
		Error_Handler();
 80067fe:	f000 f831 	bl	8006864 <Error_Handler>
	}

	/* Enable SAI to generate clock used by audio driver */
	__HAL_SAI_ENABLE(&SaiHandle);
 8006802:	4b14      	ldr	r3, [pc, #80]	; (8006854 <Playback_Init+0x10c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a13      	ldr	r2, [pc, #76]	; (8006854 <Playback_Init+0x10c>)
 8006808:	6812      	ldr	r2, [r2, #0]
 800680a:	6812      	ldr	r2, [r2, #0]
 800680c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006810:	601a      	str	r2, [r3, #0]

	/* Initialize audio driver */
	if(CS43L22_ID != cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS))
 8006812:	4b12      	ldr	r3, [pc, #72]	; (800685c <Playback_Init+0x114>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2094      	movs	r0, #148	; 0x94
 8006818:	4798      	blx	r3
 800681a:	4603      	mov	r3, r0
 800681c:	2be0      	cmp	r3, #224	; 0xe0
 800681e:	d001      	beq.n	8006824 <Playback_Init+0xdc>
	{
		Error_Handler();
 8006820:	f000 f820 	bl	8006864 <Error_Handler>
	}
	audio_drv = &cs43l22_drv;
 8006824:	4b0e      	ldr	r3, [pc, #56]	; (8006860 <Playback_Init+0x118>)
 8006826:	4a0d      	ldr	r2, [pc, #52]	; (800685c <Playback_Init+0x114>)
 8006828:	601a      	str	r2, [r3, #0]
	audio_drv->Reset(AUDIO_I2C_ADDRESS);
 800682a:	4b0d      	ldr	r3, [pc, #52]	; (8006860 <Playback_Init+0x118>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006830:	2094      	movs	r0, #148	; 0x94
 8006832:	4798      	blx	r3
	if(0 != audio_drv->Init(AUDIO_I2C_ADDRESS, OUTPUT_DEVICE_HEADPHONE, 60, AUDIO_FREQUENCY_44K))
 8006834:	4b0a      	ldr	r3, [pc, #40]	; (8006860 <Playback_Init+0x118>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681c      	ldr	r4, [r3, #0]
 800683a:	f64a 4344 	movw	r3, #44100	; 0xac44
 800683e:	223c      	movs	r2, #60	; 0x3c
 8006840:	2102      	movs	r1, #2
 8006842:	2094      	movs	r0, #148	; 0x94
 8006844:	47a0      	blx	r4
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <Playback_Init+0x108>
	{
		Error_Handler();
 800684c:	f000 f80a 	bl	8006864 <Error_Handler>
	}
}
 8006850:	bf00      	nop
 8006852:	bd98      	pop	{r3, r4, r7, pc}
 8006854:	20013c3c 	.word	0x20013c3c
 8006858:	40015404 	.word	0x40015404
 800685c:	20000000 	.word	0x20000000
 8006860:	20013d18 	.word	0x20013d18

08006864 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
	while (1)
	{
		/* Toggle LED4 with a period of one second */
		//BSP_LED_Toggle(LED4);
		//	HAL_GPIO_TogglePin(LD_Green_GPIO_Port, LD_Green_Pin);
		HAL_Delay(1000);
 8006868:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800686c:	f7fa ff20 	bl	80016b0 <HAL_Delay>
 8006870:	e7fa      	b.n	8006868 <Error_Handler+0x4>
	...

08006874 <HAL_DFSDM_ChannelMspInit>:
 * @brief  Initializes the DFSDM channel MSP.
 * @param  hdfsdm_channel : DFSDM channel handle.
 * @retval None
 */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b0ac      	sub	sp, #176	; 0xb0
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	/* Init of clock, gpio and PLLSAI1 clock */
	GPIO_InitTypeDef GPIO_Init;
	RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;

	/* Enable DFSDM clock */
	__HAL_RCC_DFSDM1_CLK_ENABLE();
 800687c:	4a2a      	ldr	r2, [pc, #168]	; (8006928 <HAL_DFSDM_ChannelMspInit+0xb4>)
 800687e:	4b2a      	ldr	r3, [pc, #168]	; (8006928 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8006880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006886:	6613      	str	r3, [r2, #96]	; 0x60
 8006888:	4b27      	ldr	r3, [pc, #156]	; (8006928 <HAL_DFSDM_ChannelMspInit+0xb4>)
 800688a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800688c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	693b      	ldr	r3, [r7, #16]

	/* Configure PE9 for DFSDM_CKOUT and PE7 for DFSDM_DATIN2 */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8006894:	4a24      	ldr	r2, [pc, #144]	; (8006928 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8006896:	4b24      	ldr	r3, [pc, #144]	; (8006928 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8006898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800689a:	f043 0310 	orr.w	r3, r3, #16
 800689e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068a0:	4b21      	ldr	r3, [pc, #132]	; (8006928 <HAL_DFSDM_ChannelMspInit+0xb4>)
 80068a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a4:	f003 0310 	and.w	r3, r3, #16
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	68fb      	ldr	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80068ac:	2302      	movs	r3, #2
 80068ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	GPIO_Init.Pull      = GPIO_PULLDOWN;
 80068b2:	2302      	movs	r3, #2
 80068b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80068b8:	2303      	movs	r3, #3
 80068ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	GPIO_Init.Alternate = GPIO_AF6_DFSDM1;
 80068be:	2306      	movs	r3, #6
 80068c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_Init.Pin = GPIO_PIN_9;
 80068c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_GPIO_Init(GPIOE, &GPIO_Init);
 80068cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80068d0:	4619      	mov	r1, r3
 80068d2:	4816      	ldr	r0, [pc, #88]	; (800692c <HAL_DFSDM_ChannelMspInit+0xb8>)
 80068d4:	f7fb fd72 	bl	80023bc <HAL_GPIO_Init>
	GPIO_Init.Pin = GPIO_PIN_7;
 80068d8:	2380      	movs	r3, #128	; 0x80
 80068da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_GPIO_Init(GPIOE, &GPIO_Init);
 80068de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80068e2:	4619      	mov	r1, r3
 80068e4:	4811      	ldr	r0, [pc, #68]	; (800692c <HAL_DFSDM_ChannelMspInit+0xb8>)
 80068e6:	f7fb fd69 	bl	80023bc <HAL_GPIO_Init>

	/* Configure and enable PLLSAI1 clock to generate 11.294MHz */
	RCC_PeriphCLKInitStruct.PeriphClockSelection    = RCC_PERIPHCLK_SAI1;
 80068ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068ee:	617b      	str	r3, [r7, #20]
	RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1Source   = RCC_PLLSOURCE_MSI;
 80068f0:	2301      	movs	r3, #1
 80068f2:	61bb      	str	r3, [r7, #24]
	RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1M        = 1;
 80068f4:	2301      	movs	r3, #1
 80068f6:	61fb      	str	r3, [r7, #28]
	RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1N        = 48;
 80068f8:	2330      	movs	r3, #48	; 0x30
 80068fa:	623b      	str	r3, [r7, #32]

	//RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1N        = 44;

	RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1P        = 17;
 80068fc:	2311      	movs	r3, #17
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24

	//RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1P        = 17;

	RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8006900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006904:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_PeriphCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI1;
 8006906:	2300      	movs	r3, #0
 8006908:	67bb      	str	r3, [r7, #120]	; 0x78
	if(HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
 800690a:	f107 0314 	add.w	r3, r7, #20
 800690e:	4618      	mov	r0, r3
 8006910:	f7fd fac0 	bl	8003e94 <HAL_RCCEx_PeriphCLKConfig>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <HAL_DFSDM_ChannelMspInit+0xaa>
	{
		Error_Handler();
 800691a:	f7ff ffa3 	bl	8006864 <Error_Handler>
	}
}
 800691e:	bf00      	nop
 8006920:	37b0      	adds	r7, #176	; 0xb0
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	40021000 	.word	0x40021000
 800692c:	48001000 	.word	0x48001000

08006930 <HAL_DFSDM_FilterMspInit>:
 * @brief  Initializes the DFSDM filter MSP.
 * @param  hdfsdm_filter : DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	/* Configure DMA1_Channel4 */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8006938:	4a21      	ldr	r2, [pc, #132]	; (80069c0 <HAL_DFSDM_FilterMspInit+0x90>)
 800693a:	4b21      	ldr	r3, [pc, #132]	; (80069c0 <HAL_DFSDM_FilterMspInit+0x90>)
 800693c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	6493      	str	r3, [r2, #72]	; 0x48
 8006944:	4b1e      	ldr	r3, [pc, #120]	; (80069c0 <HAL_DFSDM_FilterMspInit+0x90>)
 8006946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	68fb      	ldr	r3, [r7, #12]
	hDfsdmDma.Init.Request             = DMA_REQUEST_0;
 8006950:	4b1c      	ldr	r3, [pc, #112]	; (80069c4 <HAL_DFSDM_FilterMspInit+0x94>)
 8006952:	2200      	movs	r2, #0
 8006954:	605a      	str	r2, [r3, #4]
	hDfsdmDma.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006956:	4b1b      	ldr	r3, [pc, #108]	; (80069c4 <HAL_DFSDM_FilterMspInit+0x94>)
 8006958:	2200      	movs	r2, #0
 800695a:	609a      	str	r2, [r3, #8]
	hDfsdmDma.Init.PeriphInc           = DMA_PINC_DISABLE;
 800695c:	4b19      	ldr	r3, [pc, #100]	; (80069c4 <HAL_DFSDM_FilterMspInit+0x94>)
 800695e:	2200      	movs	r2, #0
 8006960:	60da      	str	r2, [r3, #12]
	hDfsdmDma.Init.MemInc              = DMA_MINC_ENABLE;
 8006962:	4b18      	ldr	r3, [pc, #96]	; (80069c4 <HAL_DFSDM_FilterMspInit+0x94>)
 8006964:	2280      	movs	r2, #128	; 0x80
 8006966:	611a      	str	r2, [r3, #16]
	hDfsdmDma.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006968:	4b16      	ldr	r3, [pc, #88]	; (80069c4 <HAL_DFSDM_FilterMspInit+0x94>)
 800696a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800696e:	615a      	str	r2, [r3, #20]
	hDfsdmDma.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006970:	4b14      	ldr	r3, [pc, #80]	; (80069c4 <HAL_DFSDM_FilterMspInit+0x94>)
 8006972:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006976:	619a      	str	r2, [r3, #24]
	hDfsdmDma.Init.Mode                = DMA_CIRCULAR;
 8006978:	4b12      	ldr	r3, [pc, #72]	; (80069c4 <HAL_DFSDM_FilterMspInit+0x94>)
 800697a:	2220      	movs	r2, #32
 800697c:	61da      	str	r2, [r3, #28]
	hDfsdmDma.Init.Priority            = DMA_PRIORITY_HIGH;
 800697e:	4b11      	ldr	r3, [pc, #68]	; (80069c4 <HAL_DFSDM_FilterMspInit+0x94>)
 8006980:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006984:	621a      	str	r2, [r3, #32]
	hDfsdmDma.Instance                 = DMA1_Channel4;
 8006986:	4b0f      	ldr	r3, [pc, #60]	; (80069c4 <HAL_DFSDM_FilterMspInit+0x94>)
 8006988:	4a0f      	ldr	r2, [pc, #60]	; (80069c8 <HAL_DFSDM_FilterMspInit+0x98>)
 800698a:	601a      	str	r2, [r3, #0]
	__HAL_LINKDMA(hdfsdm_filter, hdmaReg, hDfsdmDma);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a0d      	ldr	r2, [pc, #52]	; (80069c4 <HAL_DFSDM_FilterMspInit+0x94>)
 8006990:	629a      	str	r2, [r3, #40]	; 0x28
 8006992:	4a0c      	ldr	r2, [pc, #48]	; (80069c4 <HAL_DFSDM_FilterMspInit+0x94>)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6293      	str	r3, [r2, #40]	; 0x28
	if (HAL_OK != HAL_DMA_Init(&hDfsdmDma))
 8006998:	480a      	ldr	r0, [pc, #40]	; (80069c4 <HAL_DFSDM_FilterMspInit+0x94>)
 800699a:	f7fb fb17 	bl	8001fcc <HAL_DMA_Init>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <HAL_DFSDM_FilterMspInit+0x78>
	{
		Error_Handler();
 80069a4:	f7ff ff5e 	bl	8006864 <Error_Handler>
	}
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0x01, 0);
 80069a8:	2200      	movs	r2, #0
 80069aa:	2101      	movs	r1, #1
 80069ac:	200e      	movs	r0, #14
 80069ae:	f7fa ff8c 	bl	80018ca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80069b2:	200e      	movs	r0, #14
 80069b4:	f7fa ffa5 	bl	8001902 <HAL_NVIC_EnableIRQ>
}
 80069b8:	bf00      	nop
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	40021000 	.word	0x40021000
 80069c4:	20013d70 	.word	0x20013d70
 80069c8:	40020044 	.word	0x40020044

080069cc <HAL_SAI_MspInit>:
 * @param  hsai : pointer to a SAI_HandleTypeDef structure that contains
 *                the configuration information for SAI module.
 * @retval None
 */
void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08a      	sub	sp, #40	; 0x28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef  GPIO_Init;

	/* Enable SAI1 clock */
	__HAL_RCC_SAI1_CLK_ENABLE();
 80069d4:	4a35      	ldr	r2, [pc, #212]	; (8006aac <HAL_SAI_MspInit+0xe0>)
 80069d6:	4b35      	ldr	r3, [pc, #212]	; (8006aac <HAL_SAI_MspInit+0xe0>)
 80069d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069de:	6613      	str	r3, [r2, #96]	; 0x60
 80069e0:	4b32      	ldr	r3, [pc, #200]	; (8006aac <HAL_SAI_MspInit+0xe0>)
 80069e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069e8:	613b      	str	r3, [r7, #16]
 80069ea:	693b      	ldr	r3, [r7, #16]

	/* Configure GPIOs used for SAI1 */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80069ec:	4a2f      	ldr	r2, [pc, #188]	; (8006aac <HAL_SAI_MspInit+0xe0>)
 80069ee:	4b2f      	ldr	r3, [pc, #188]	; (8006aac <HAL_SAI_MspInit+0xe0>)
 80069f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f2:	f043 0310 	orr.w	r3, r3, #16
 80069f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069f8:	4b2c      	ldr	r3, [pc, #176]	; (8006aac <HAL_SAI_MspInit+0xe0>)
 80069fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	68fb      	ldr	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8006a04:	2302      	movs	r3, #2
 8006a06:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Pull      = GPIO_NOPULL;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	61fb      	str	r3, [r7, #28]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	623b      	str	r3, [r7, #32]
	GPIO_Init.Alternate = GPIO_AF13_SAI1;
 8006a10:	230d      	movs	r3, #13
 8006a12:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_Init.Pin       = (GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 8006a14:	2374      	movs	r3, #116	; 0x74
 8006a16:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOE, &GPIO_Init);
 8006a18:	f107 0314 	add.w	r3, r7, #20
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4824      	ldr	r0, [pc, #144]	; (8006ab0 <HAL_SAI_MspInit+0xe4>)
 8006a20:	f7fb fccc 	bl	80023bc <HAL_GPIO_Init>

	/* Configure DMA used for SAI1 */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8006a24:	4a21      	ldr	r2, [pc, #132]	; (8006aac <HAL_SAI_MspInit+0xe0>)
 8006a26:	4b21      	ldr	r3, [pc, #132]	; (8006aac <HAL_SAI_MspInit+0xe0>)
 8006a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a2a:	f043 0302 	orr.w	r3, r3, #2
 8006a2e:	6493      	str	r3, [r2, #72]	; 0x48
 8006a30:	4b1e      	ldr	r3, [pc, #120]	; (8006aac <HAL_SAI_MspInit+0xe0>)
 8006a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	60bb      	str	r3, [r7, #8]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
	hSaiDma.Init.Request             = DMA_REQUEST_1;
 8006a3c:	4b1d      	ldr	r3, [pc, #116]	; (8006ab4 <HAL_SAI_MspInit+0xe8>)
 8006a3e:	2201      	movs	r2, #1
 8006a40:	605a      	str	r2, [r3, #4]
	hSaiDma.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8006a42:	4b1c      	ldr	r3, [pc, #112]	; (8006ab4 <HAL_SAI_MspInit+0xe8>)
 8006a44:	2210      	movs	r2, #16
 8006a46:	609a      	str	r2, [r3, #8]
	hSaiDma.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006a48:	4b1a      	ldr	r3, [pc, #104]	; (8006ab4 <HAL_SAI_MspInit+0xe8>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	60da      	str	r2, [r3, #12]
	hSaiDma.Init.MemInc              = DMA_MINC_ENABLE;
 8006a4e:	4b19      	ldr	r3, [pc, #100]	; (8006ab4 <HAL_SAI_MspInit+0xe8>)
 8006a50:	2280      	movs	r2, #128	; 0x80
 8006a52:	611a      	str	r2, [r3, #16]
	hSaiDma.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006a54:	4b17      	ldr	r3, [pc, #92]	; (8006ab4 <HAL_SAI_MspInit+0xe8>)
 8006a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a5a:	615a      	str	r2, [r3, #20]
	hSaiDma.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8006a5c:	4b15      	ldr	r3, [pc, #84]	; (8006ab4 <HAL_SAI_MspInit+0xe8>)
 8006a5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a62:	619a      	str	r2, [r3, #24]
	hSaiDma.Init.Mode                = DMA_CIRCULAR;
 8006a64:	4b13      	ldr	r3, [pc, #76]	; (8006ab4 <HAL_SAI_MspInit+0xe8>)
 8006a66:	2220      	movs	r2, #32
 8006a68:	61da      	str	r2, [r3, #28]
	hSaiDma.Init.Priority            = DMA_PRIORITY_HIGH;
 8006a6a:	4b12      	ldr	r3, [pc, #72]	; (8006ab4 <HAL_SAI_MspInit+0xe8>)
 8006a6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a70:	621a      	str	r2, [r3, #32]
	hSaiDma.Instance                 = DMA2_Channel1;
 8006a72:	4b10      	ldr	r3, [pc, #64]	; (8006ab4 <HAL_SAI_MspInit+0xe8>)
 8006a74:	4a10      	ldr	r2, [pc, #64]	; (8006ab8 <HAL_SAI_MspInit+0xec>)
 8006a76:	601a      	str	r2, [r3, #0]
	__HAL_LINKDMA(hsai, hdmatx, hSaiDma);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a0e      	ldr	r2, [pc, #56]	; (8006ab4 <HAL_SAI_MspInit+0xe8>)
 8006a7c:	66da      	str	r2, [r3, #108]	; 0x6c
 8006a7e:	4a0d      	ldr	r2, [pc, #52]	; (8006ab4 <HAL_SAI_MspInit+0xe8>)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6293      	str	r3, [r2, #40]	; 0x28
	if (HAL_OK != HAL_DMA_Init(&hSaiDma))
 8006a84:	480b      	ldr	r0, [pc, #44]	; (8006ab4 <HAL_SAI_MspInit+0xe8>)
 8006a86:	f7fb faa1 	bl	8001fcc <HAL_DMA_Init>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <HAL_SAI_MspInit+0xc8>
	{
		Error_Handler();
 8006a90:	f7ff fee8 	bl	8006864 <Error_Handler>
	}
	HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0x01, 0);
 8006a94:	2200      	movs	r2, #0
 8006a96:	2101      	movs	r1, #1
 8006a98:	2038      	movs	r0, #56	; 0x38
 8006a9a:	f7fa ff16 	bl	80018ca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8006a9e:	2038      	movs	r0, #56	; 0x38
 8006aa0:	f7fa ff2f 	bl	8001902 <HAL_NVIC_EnableIRQ>
}
 8006aa4:	bf00      	nop
 8006aa6:	3728      	adds	r7, #40	; 0x28
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	40021000 	.word	0x40021000
 8006ab0:	48001000 	.word	0x48001000
 8006ab4:	20013cd0 	.word	0x20013cd0
 8006ab8:	40020408 	.word	0x40020408

08006abc <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
 * @brief  Half regular conversion complete callback.
 * @param  hdfsdm_filter : DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
	DmaRecHalfBuffCplt = 1;
 8006ac4:	4b04      	ldr	r3, [pc, #16]	; (8006ad8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	2000fb40 	.word	0x2000fb40

08006adc <HAL_DFSDM_FilterRegConvCpltCallback>:
            using HAL_DFSDM_FilterGetRegularValue.
 * @param  hdfsdm_filter : DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
	DmaRecBuffCplt = 1;
 8006ae4:	4b04      	ldr	r3, [pc, #16]	; (8006af8 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	2000fb44 	.word	0x2000fb44

08006afc <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
	memcpy(lookup, prepare, 2*hsin->sampleNum);
 8006b04:	4b0a      	ldr	r3, [pc, #40]	; (8006b30 <HAL_SAI_TxCpltCallback+0x34>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	4909      	ldr	r1, [pc, #36]	; (8006b34 <HAL_SAI_TxCpltCallback+0x38>)
 8006b10:	4809      	ldr	r0, [pc, #36]	; (8006b38 <HAL_SAI_TxCpltCallback+0x3c>)
 8006b12:	f000 f9f3 	bl	8006efc <memcpy>
	HAL_SAI_Transmit_DMA(hsai, (uint8_t*)&lookup[0], hsin->sampleNum);
 8006b16:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <HAL_SAI_TxCpltCallback+0x34>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	461a      	mov	r2, r3
 8006b20:	4905      	ldr	r1, [pc, #20]	; (8006b38 <HAL_SAI_TxCpltCallback+0x3c>)
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fe fd1c 	bl	8005560 <HAL_SAI_Transmit_DMA>
}
 8006b28:	bf00      	nop
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	20000038 	.word	0x20000038
 8006b34:	20007e40 	.word	0x20007e40
 8006b38:	20000140 	.word	0x20000140

08006b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b42:	4a0f      	ldr	r2, [pc, #60]	; (8006b80 <HAL_MspInit+0x44>)
 8006b44:	4b0e      	ldr	r3, [pc, #56]	; (8006b80 <HAL_MspInit+0x44>)
 8006b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b48:	f043 0301 	orr.w	r3, r3, #1
 8006b4c:	6613      	str	r3, [r2, #96]	; 0x60
 8006b4e:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <HAL_MspInit+0x44>)
 8006b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	607b      	str	r3, [r7, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b5a:	4a09      	ldr	r2, [pc, #36]	; (8006b80 <HAL_MspInit+0x44>)
 8006b5c:	4b08      	ldr	r3, [pc, #32]	; (8006b80 <HAL_MspInit+0x44>)
 8006b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b64:	6593      	str	r3, [r2, #88]	; 0x58
 8006b66:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <HAL_MspInit+0x44>)
 8006b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b6e:	603b      	str	r3, [r7, #0]
 8006b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b72:	bf00      	nop
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40021000 	.word	0x40021000

08006b84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08a      	sub	sp, #40	; 0x28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b8c:	f107 0314 	add.w	r3, r7, #20
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	605a      	str	r2, [r3, #4]
 8006b96:	609a      	str	r2, [r3, #8]
 8006b98:	60da      	str	r2, [r3, #12]
 8006b9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a17      	ldr	r2, [pc, #92]	; (8006c00 <HAL_I2C_MspInit+0x7c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d127      	bne.n	8006bf6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ba6:	4a17      	ldr	r2, [pc, #92]	; (8006c04 <HAL_I2C_MspInit+0x80>)
 8006ba8:	4b16      	ldr	r3, [pc, #88]	; (8006c04 <HAL_I2C_MspInit+0x80>)
 8006baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bac:	f043 0302 	orr.w	r3, r3, #2
 8006bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bb2:	4b14      	ldr	r3, [pc, #80]	; (8006c04 <HAL_I2C_MspInit+0x80>)
 8006bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	613b      	str	r3, [r7, #16]
 8006bbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006bbe:	23c0      	movs	r3, #192	; 0xc0
 8006bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006bc2:	2312      	movs	r3, #18
 8006bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006bce:	2304      	movs	r3, #4
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bd2:	f107 0314 	add.w	r3, r7, #20
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	480b      	ldr	r0, [pc, #44]	; (8006c08 <HAL_I2C_MspInit+0x84>)
 8006bda:	f7fb fbef 	bl	80023bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006bde:	4a09      	ldr	r2, [pc, #36]	; (8006c04 <HAL_I2C_MspInit+0x80>)
 8006be0:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <HAL_I2C_MspInit+0x80>)
 8006be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006be8:	6593      	str	r3, [r2, #88]	; 0x58
 8006bea:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <HAL_I2C_MspInit+0x80>)
 8006bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bf2:	60fb      	str	r3, [r7, #12]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006bf6:	bf00      	nop
 8006bf8:	3728      	adds	r7, #40	; 0x28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	40005400 	.word	0x40005400
 8006c04:	40021000 	.word	0x40021000
 8006c08:	48000400 	.word	0x48000400

08006c0c <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]

  if(hi2c->Instance==I2C1)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <HAL_I2C_MspDeInit+0x30>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d109      	bne.n	8006c32 <HAL_I2C_MspDeInit+0x26>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006c1e:	4a08      	ldr	r2, [pc, #32]	; (8006c40 <HAL_I2C_MspDeInit+0x34>)
 8006c20:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <HAL_I2C_MspDeInit+0x34>)
 8006c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c28:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8006c2a:	21c0      	movs	r1, #192	; 0xc0
 8006c2c:	4805      	ldr	r0, [pc, #20]	; (8006c44 <HAL_I2C_MspDeInit+0x38>)
 8006c2e:	f7fb fd6d 	bl	800270c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	40005400 	.word	0x40005400
 8006c40:	40021000 	.word	0x40021000
 8006c44:	48000400 	.word	0x48000400

08006c48 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	af00      	add	r7, sp, #0
}
 8006c4c:	bf00      	nop
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006c56:	b480      	push	{r7}
 8006c58:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006c5a:	e7fe      	b.n	8006c5a <HardFault_Handler+0x4>

08006c5c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8006c60:	e7fe      	b.n	8006c60 <MemManage_Handler+0x4>

08006c62 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8006c62:	b480      	push	{r7}
 8006c64:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8006c66:	e7fe      	b.n	8006c66 <BusFault_Handler+0x4>

08006c68 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8006c6c:	e7fe      	b.n	8006c6c <UsageFault_Handler+0x4>

08006c6e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	af00      	add	r7, sp, #0
}
 8006c72:	bf00      	nop
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
}
 8006c80:	bf00      	nop
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	af00      	add	r7, sp, #0
}
 8006c8e:	bf00      	nop
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8006c9c:	f7fa fcee 	bl	800167c <HAL_IncTick>
}
 8006ca0:	bf00      	nop
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <DMA1_Channel4_IRQHandler>:
  * @brief  This function handles DMA1_Channel4 interrupt request.
  * @param  None
  * @retval None
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hDfsdmDma);
 8006ca8:	4802      	ldr	r0, [pc, #8]	; (8006cb4 <DMA1_Channel4_IRQHandler+0x10>)
 8006caa:	f7fb faa7 	bl	80021fc <HAL_DMA_IRQHandler>
}
 8006cae:	bf00      	nop
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20013d70 	.word	0x20013d70

08006cb8 <DMA2_Channel1_IRQHandler>:
  * @brief  This function handles SAI DMA interrupt request.
  * @param  None
  * @retval None
  */
void DMA2_Channel1_IRQHandler(void)
{ 
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(SaiHandle.hdmatx);
 8006cbc:	4b03      	ldr	r3, [pc, #12]	; (8006ccc <DMA2_Channel1_IRQHandler+0x14>)
 8006cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fb fa9b 	bl	80021fc <HAL_DMA_IRQHandler>
}
 8006cc6:	bf00      	nop
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20013c3c 	.word	0x20013c3c

08006cd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006cd4:	4a17      	ldr	r2, [pc, #92]	; (8006d34 <SystemInit+0x64>)
 8006cd6:	4b17      	ldr	r3, [pc, #92]	; (8006d34 <SystemInit+0x64>)
 8006cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006ce4:	4a14      	ldr	r2, [pc, #80]	; (8006d38 <SystemInit+0x68>)
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <SystemInit+0x68>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f043 0301 	orr.w	r3, r3, #1
 8006cee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006cf0:	4b11      	ldr	r3, [pc, #68]	; (8006d38 <SystemInit+0x68>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8006cf6:	4a10      	ldr	r2, [pc, #64]	; (8006d38 <SystemInit+0x68>)
 8006cf8:	4b0f      	ldr	r3, [pc, #60]	; (8006d38 <SystemInit+0x68>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006d00:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006d04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8006d06:	4b0c      	ldr	r3, [pc, #48]	; (8006d38 <SystemInit+0x68>)
 8006d08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d0c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006d0e:	4a0a      	ldr	r2, [pc, #40]	; (8006d38 <SystemInit+0x68>)
 8006d10:	4b09      	ldr	r3, [pc, #36]	; (8006d38 <SystemInit+0x68>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006d1a:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <SystemInit+0x68>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006d20:	4b04      	ldr	r3, [pc, #16]	; (8006d34 <SystemInit+0x64>)
 8006d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d26:	609a      	str	r2, [r3, #8]
#endif
}
 8006d28:	bf00      	nop
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	e000ed00 	.word	0xe000ed00
 8006d38:	40021000 	.word	0x40021000

08006d3c <thereminInit>:


#include "theremin.h"

thereminStatus thereminInit(VL53L1X_DEV Dev1, VL53L1X_DEV Dev2)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]

	 HAL_GPIO_WritePin(XSHUT_GPIO_Port, XSHUT_Pin, GPIO_PIN_SET);
 8006d46:	2201      	movs	r2, #1
 8006d48:	2101      	movs	r1, #1
 8006d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d4e:	f7fb fdd1 	bl	80028f4 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 8006d52:	2064      	movs	r0, #100	; 0x64
 8006d54:	f7fa fcac 	bl	80016b0 <HAL_Delay>

	 if(VL53L1X_init(Dev1) == VL53L1X_ERROR)
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7fe fe2d 	bl	80059b8 <VL53L1X_init>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d101      	bne.n	8006d68 <thereminInit+0x2c>
	 		return thereminError_Dev1;
 8006d64:	2302      	movs	r3, #2
 8006d66:	e032      	b.n	8006dce <thereminInit+0x92>
	 HAL_Delay(100);
 8006d68:	2064      	movs	r0, #100	; 0x64
 8006d6a:	f7fa fca1 	bl	80016b0 <HAL_Delay>

	 HAL_GPIO_WritePin(XSHUT_GPIO_Port, XSHUT_Pin, GPIO_PIN_RESET);
 8006d6e:	2200      	movs	r2, #0
 8006d70:	2101      	movs	r1, #1
 8006d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d76:	f7fb fdbd 	bl	80028f4 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 8006d7a:	2064      	movs	r0, #100	; 0x64
 8006d7c:	f7fa fc98 	bl	80016b0 <HAL_Delay>

	 VL53L1X_setAddress(Dev1, VL53L1X_2ND_ADDRESS);
 8006d80:	2136      	movs	r1, #54	; 0x36
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7fe ff05 	bl	8005b92 <VL53L1X_setAddress>
	 HAL_Delay(100);
 8006d88:	2064      	movs	r0, #100	; 0x64
 8006d8a:	f7fa fc91 	bl	80016b0 <HAL_Delay>

	 HAL_GPIO_WritePin(XSHUT_GPIO_Port, XSHUT_Pin, GPIO_PIN_SET);
 8006d8e:	2201      	movs	r2, #1
 8006d90:	2101      	movs	r1, #1
 8006d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d96:	f7fb fdad 	bl	80028f4 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 8006d9a:	2064      	movs	r0, #100	; 0x64
 8006d9c:	f7fa fc88 	bl	80016b0 <HAL_Delay>

	 if(VL53L1X_init(Dev2) == VL53L1X_ERROR)
 8006da0:	6838      	ldr	r0, [r7, #0]
 8006da2:	f7fe fe09 	bl	80059b8 <VL53L1X_init>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d101      	bne.n	8006db0 <thereminInit+0x74>
	 		return thereminError_Dev2;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e00e      	b.n	8006dce <thereminInit+0x92>
	 HAL_Delay(100);
 8006db0:	2064      	movs	r0, #100	; 0x64
 8006db2:	f7fa fc7d 	bl	80016b0 <HAL_Delay>

	 VL53L1X_startContinuous(Dev1, 50);
 8006db6:	2132      	movs	r1, #50	; 0x32
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff f8d1 	bl	8005f60 <VL53L1X_startContinuous>
	 VL53L1X_startContinuous(Dev2, 50);
 8006dbe:	2132      	movs	r1, #50	; 0x32
 8006dc0:	6838      	ldr	r0, [r7, #0]
 8006dc2:	f7ff f8cd 	bl	8005f60 <VL53L1X_startContinuous>
	 HAL_Delay(100);
 8006dc6:	2064      	movs	r0, #100	; 0x64
 8006dc8:	f7fa fc72 	bl	80016b0 <HAL_Delay>

	return thereminOK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
	...

08006dd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006e10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006ddc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006dde:	e003      	b.n	8006de8 <LoopCopyDataInit>

08006de0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006de0:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006de2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006de4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006de6:	3104      	adds	r1, #4

08006de8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006de8:	480b      	ldr	r0, [pc, #44]	; (8006e18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006dea:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8006dec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006dee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006df0:	d3f6      	bcc.n	8006de0 <CopyDataInit>
	ldr	r2, =_sbss
 8006df2:	4a0b      	ldr	r2, [pc, #44]	; (8006e20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006df4:	e002      	b.n	8006dfc <LoopFillZerobss>

08006df6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006df6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006df8:	f842 3b04 	str.w	r3, [r2], #4

08006dfc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006dfc:	4b09      	ldr	r3, [pc, #36]	; (8006e24 <LoopForever+0x16>)
	cmp	r2, r3
 8006dfe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006e00:	d3f9      	bcc.n	8006df6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006e02:	f7ff ff65 	bl	8006cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006e06:	f000 f855 	bl	8006eb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006e0a:	f7ff fb59 	bl	80064c0 <main>

08006e0e <LoopForever>:

LoopForever:
    b LoopForever
 8006e0e:	e7fe      	b.n	8006e0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006e10:	20017fff 	.word	0x20017fff
	ldr	r3, =_sidata
 8006e14:	08007790 	.word	0x08007790
	ldr	r0, =_sdata
 8006e18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006e1c:	20000048 	.word	0x20000048
	ldr	r2, =_sbss
 8006e20:	20000048 	.word	0x20000048
	ldr	r3, = _ebss
 8006e24:	20013db8 	.word	0x20013db8

08006e28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006e28:	e7fe      	b.n	8006e28 <ADC1_2_IRQHandler>
	...

08006e2c <arm_sin_f32>:
 8006e2c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006ea8 <arm_sin_f32+0x7c>
 8006e30:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006e34:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e3c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8006e40:	d42c      	bmi.n	8006e9c <arm_sin_f32+0x70>
 8006e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e46:	eddf 6a19 	vldr	s13, [pc, #100]	; 8006eac <arm_sin_f32+0x80>
 8006e4a:	4a19      	ldr	r2, [pc, #100]	; (8006eb0 <arm_sin_f32+0x84>)
 8006e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006e54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006e58:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e60:	bfa8      	it	ge
 8006e62:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 8006e66:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8006e6a:	ee17 3a10 	vmov	r3, s14
 8006e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e72:	ee07 3a10 	vmov	s14, r3
 8006e76:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006e7a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8006e7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e82:	edd1 6a01 	vldr	s13, [r1, #4]
 8006e86:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006e8a:	ed91 0a00 	vldr	s0, [r1]
 8006e8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006e92:	ee27 0a00 	vmul.f32	s0, s14, s0
 8006e96:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006e9a:	4770      	bx	lr
 8006e9c:	ee17 3a90 	vmov	r3, s15
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	e7cc      	b.n	8006e42 <arm_sin_f32+0x16>
 8006ea8:	3e22f983 	.word	0x3e22f983
 8006eac:	44000000 	.word	0x44000000
 8006eb0:	08006f84 	.word	0x08006f84

08006eb4 <__libc_init_array>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	4e0d      	ldr	r6, [pc, #52]	; (8006eec <__libc_init_array+0x38>)
 8006eb8:	4c0d      	ldr	r4, [pc, #52]	; (8006ef0 <__libc_init_array+0x3c>)
 8006eba:	1ba4      	subs	r4, r4, r6
 8006ebc:	10a4      	asrs	r4, r4, #2
 8006ebe:	2500      	movs	r5, #0
 8006ec0:	42a5      	cmp	r5, r4
 8006ec2:	d109      	bne.n	8006ed8 <__libc_init_array+0x24>
 8006ec4:	4e0b      	ldr	r6, [pc, #44]	; (8006ef4 <__libc_init_array+0x40>)
 8006ec6:	4c0c      	ldr	r4, [pc, #48]	; (8006ef8 <__libc_init_array+0x44>)
 8006ec8:	f000 f82c 	bl	8006f24 <_init>
 8006ecc:	1ba4      	subs	r4, r4, r6
 8006ece:	10a4      	asrs	r4, r4, #2
 8006ed0:	2500      	movs	r5, #0
 8006ed2:	42a5      	cmp	r5, r4
 8006ed4:	d105      	bne.n	8006ee2 <__libc_init_array+0x2e>
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
 8006ed8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006edc:	4798      	blx	r3
 8006ede:	3501      	adds	r5, #1
 8006ee0:	e7ee      	b.n	8006ec0 <__libc_init_array+0xc>
 8006ee2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ee6:	4798      	blx	r3
 8006ee8:	3501      	adds	r5, #1
 8006eea:	e7f2      	b.n	8006ed2 <__libc_init_array+0x1e>
 8006eec:	08007788 	.word	0x08007788
 8006ef0:	08007788 	.word	0x08007788
 8006ef4:	08007788 	.word	0x08007788
 8006ef8:	0800778c 	.word	0x0800778c

08006efc <memcpy>:
 8006efc:	b510      	push	{r4, lr}
 8006efe:	1e43      	subs	r3, r0, #1
 8006f00:	440a      	add	r2, r1
 8006f02:	4291      	cmp	r1, r2
 8006f04:	d100      	bne.n	8006f08 <memcpy+0xc>
 8006f06:	bd10      	pop	{r4, pc}
 8006f08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f10:	e7f7      	b.n	8006f02 <memcpy+0x6>

08006f12 <memset>:
 8006f12:	4402      	add	r2, r0
 8006f14:	4603      	mov	r3, r0
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d100      	bne.n	8006f1c <memset+0xa>
 8006f1a:	4770      	bx	lr
 8006f1c:	f803 1b01 	strb.w	r1, [r3], #1
 8006f20:	e7f9      	b.n	8006f16 <memset+0x4>
	...

08006f24 <_init>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	bf00      	nop
 8006f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2a:	bc08      	pop	{r3}
 8006f2c:	469e      	mov	lr, r3
 8006f2e:	4770      	bx	lr

08006f30 <_fini>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	bf00      	nop
 8006f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f36:	bc08      	pop	{r3}
 8006f38:	469e      	mov	lr, r3
 8006f3a:	4770      	bx	lr
